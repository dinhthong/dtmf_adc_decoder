


78K0R Assembler V1.80                                                                                    Date: 5 Jun 2021 Page:   1



Command:  -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\Device\RL78\Devicefile Debug\r_cg_tau.asm -_msgoff -pDebu
          g -oDebug -zs
Para-file:
In-file:  Debug\r_cg_tau.asm
Obj-file: Debug\r_cg_tau.rel
Prn-file: Debug\r_cg_tau.prn

      Assemble list

 ALNO  STNO ADRS   OBJECT   M I  SOURCE STATEMENT

    1     1                      ; 78K0R C Compiler V2.60 Assembler Source        Date: 5 Jun 2021 Time:10:38:23
    2     2                      
    3     3                      ; Command   : -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\
    4     4                      ;             Device\RL78\Devicefile ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_tau.c
    5     5                      ;              -oDebug -_msgoff -nq -i..\RSKRL78L13\ADC_Repeat\cg_src -v -w2 -z
    6     6                      ;             ps -mm -mi0 -saDebug -li -no -g2
    7     7                      ; In-file   : ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_tau.c
    8     8                      ; Asm-file  : Debug\r_cg_tau.asm
    9     9                      ; Para-file : 
   10    10                      
   11    11                      $PROCESSOR(F10WMG)
   12    12                      $DEBUG
   13    13                      $NODEBUGA
   14    14                      $KANJICODE SJIS
   15    15                      $TOL_INF        03FH, 0260H, 00H, 04000H, 00H, 00H, 00H
   16    16                      
   17    17                      $DGS    FIL_NAM, .file,         049H,   0FFFEH, 03FH,   067H,   01H,    00H
   18    18                      $DGS    AUX_FIL, r_cg_tau.c
   19    19                      $DGS    MOD_NAM, r_cg_tau,      00H,    0FFFEH, 00H,    077H,   00H,    00H
   20    20                      $DGS    SEC_NAM, @@BITS,        U,      U,      00H,    078H,   00H,    00H
   21    21                      $DGS    SEC_NAM, @@CNST,        U,      U,      00H,    078H,   00H,    00H
   22    22                      $DGS    SEC_NAM, @@R_INIT,      U,      U,      00H,    078H,   00H,    00H
   23    23                      $DGS    SEC_NAM, @@INIT,        U,      U,      00H,    078H,   00H,    00H
   24    24                      $DGS    SEC_NAM, @@DATA,        U,      U,      00H,    078H,   00H,    00H
   25    25                      $DGS    SEC_NAM, @@R_INIS,      U,      U,      00H,    078H,   00H,    00H
   26    26                      $DGS    SEC_NAM, @@INIS,        U,      U,      00H,    078H,   00H,    00H
   27    27                      $DGS    SEC_NAM, @@DATS,        U,      U,      00H,    078H,   00H,    00H
   28    28                      $DGS    SEC_NAM, @@CNSTL,       U,      U,      00H,    078H,   00H,    00H
   29    29                      $DGS    SEC_NAM, @@RLINIT,      U,      U,      00H,    078H,   00H,    00H
   30    30                      $DGS    SEC_NAM, @@INITL,       U,      U,      00H,    078H,   00H,    00H
   31    31                      $DGS    SEC_NAM, @@DATAL,       U,      U,      00H,    078H,   00H,    00H
   32    32                      $DGS    SEC_NAM, @@CALT,        U,      U,      00H,    078H,   00H,    00H
   33    33                      $DGS    SEC_NAM, @@CODE,        U,      U,      00H,    078H,   00H,    00H
   34    34                      $DGS    SEC_NAM, @@CODEL,       U,      U,      00H,    078H,   00H,    00H
   35    35                      $DGS    SEC_NAM, @@BASE,        U,      U,      00H,    078H,   00H,    00H
   36    36                      $DGS    GLV_SYM, _R_TAU0_Create,        U,      U,      01H,    026H,   01H,    02H
   37    37                      $DGS    AUX_FUN, 00H,           U,      U,      019H,   01H,    00H
   38    38                      $DGS    BEG_FUN, ??bf_R_TAU0_Create,    U,      U,      00H,    065H,   01H,    00H
   39    39                      $DGS    AUX_BEG, 03EH,          00H,    019H
   40    40                      $DGS    END_FUN, ??ef_R_TAU0_Create,    U,      U,      00H,    065H,   01H,    00H
   41    41                      $DGS    AUX_END, 051H
   42    42                      $DGS    GLV_SYM, _R_TAU0_Channel0_Start,        U,      U,      01H,    026H,   01H,    02H
   43    43                      $DGS    AUX_FUN, 00H,           U,      U,      01FH,   01H,    00H
   44    44                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel0_Start,    U,      U,      00H,    065H,   01H,    00H
   45    45                      $DGS    AUX_BEG, 096H,          00H,    01FH
   46    46                      $DGS    END_FUN, ??ef_R_TAU0_Channel0_Start,    U,      U,      00H,    065H,   01H,    00H
   47    47                      $DGS    AUX_END, 05H
   48    48                      $DGS    GLV_SYM, _R_TAU0_Channel0_Stop, U,      U,      01H,    026H,   01H,    02H
   49    49                      $DGS    AUX_FUN, 00H,           U,      U,      025H,   01H,    00H
   50    50                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel0_Stop,     U,      U,      00H,    065H,   01H,    00H
   51    51                      $DGS    AUX_BEG, 0A2H,          00H,    025H
   52    52                      $DGS    END_FUN, ??ef_R_TAU0_Channel0_Stop,     U,      U,      00H,    065H,   01H,    00H
   53    53                      $DGS    AUX_END, 06H
   54    54                      $DGS    GLV_SYM, _R_TAU0_Channel1_Start,        U,      U,      01H,    026H,   01H,    02H
   55    55                      $DGS    AUX_FUN, 00H,           U,      U,      02BH,   01H,    00H
   56    56                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel1_Start,    U,      U,      00H,    065H,   01H,    00H
   57    57                      $DGS    AUX_BEG, 0AFH,          00H,    02BH
   58    58                      $DGS    END_FUN, ??ef_R_TAU0_Channel1_Start,    U,      U,      00H,    065H,   01H,    00H
   59    59                      $DGS    AUX_END, 05H
   60    60                      $DGS    GLV_SYM, _R_TAU0_Channel1_Stop, U,      U,      01H,    026H,   01H,    02H
   61    61                      $DGS    AUX_FUN, 00H,           U,      U,      031H,   01H,    00H
   62    62                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel1_Stop,     U,      U,      00H,    065H,   01H,    00H
   63    63                      $DGS    AUX_BEG, 0BBH,          00H,    031H
   64    64                      $DGS    END_FUN, ??ef_R_TAU0_Channel1_Stop,     U,      U,      00H,    065H,   01H,    00H
   65    65                      $DGS    AUX_END, 06H
   66    66                      $DGS    GLV_SYM, _R_TAU0_Channel2_Start,        U,      U,      01H,    026H,   01H,    02H
   67    67                      $DGS    AUX_FUN, 00H,           U,      U,      037H,   01H,    00H
   68    68                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel2_Start,    U,      U,      00H,    065H,   01H,    00H
   69    69                      $DGS    AUX_BEG, 0C8H,          00H,    037H
   70    70                      $DGS    END_FUN, ??ef_R_TAU0_Channel2_Start,    U,      U,      00H,    065H,   01H,    00H
   71    71                      $DGS    AUX_END, 05H
   72    72                      $DGS    GLV_SYM, _R_TAU0_Channel2_Stop, U,      U,      01H,    026H,   01H,    02H
   73    73                      $DGS    AUX_FUN, 00H,           U,      U,      03DH,   01H,    00H
   74    74                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel2_Stop,     U,      U,      00H,    065H,   01H,    00H
   75    75                      $DGS    AUX_BEG, 0D4H,          00H,    03DH
   76    76                      $DGS    END_FUN, ??ef_R_TAU0_Channel2_Stop,     U,      U,      00H,    065H,   01H,    00H
   77    77                      $DGS    AUX_END, 06H
   78    78                      $DGS    GLV_SYM, _R_TAU0_Channel3_Start,        U,      U,      01H,    026H,   01H,    02H
   79    79                      $DGS    AUX_FUN, 00H,           U,      U,      043H,   01H,    00H
   80    80                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel3_Start,    U,      U,      00H,    065H,   01H,    00H
   81    81                      $DGS    AUX_BEG, 0E1H,          00H,    043H
   82    82                      $DGS    END_FUN, ??ef_R_TAU0_Channel3_Start,    U,      U,      00H,    065H,   01H,    00H
   83    83                      $DGS    AUX_END, 05H
   84    84                      $DGS    GLV_SYM, _R_TAU0_Channel3_Stop, U,      U,      01H,    026H,   01H,    02H
   85    85                      $DGS    AUX_FUN, 00H,           U,      U,      049H,   01H,    00H
   86    86                      $DGS    BEG_FUN, ??bf_R_TAU0_Channel3_Stop,     U,      U,      00H,    065H,   01H,    00H
   87    87                      $DGS    AUX_BEG, 0EDH,          00H,    049H
   88    88                      $DGS    END_FUN, ??ef_R_TAU0_Channel3_Stop,     U,      U,      00H,    065H,   01H,    00H
   89    89                      $DGS    AUX_END, 06H
   90    90                      
   91    91                              PUBLIC  _R_TAU0_Create
   92    92                              PUBLIC  _R_TAU0_Channel0_Start
   93    93                              PUBLIC  _R_TAU0_Channel0_Stop
   94    94                              PUBLIC  _R_TAU0_Channel1_Start
   95    95                              PUBLIC  _R_TAU0_Channel1_Stop
   96    96                              PUBLIC  _R_TAU0_Channel2_Start
   97    97                              PUBLIC  _R_TAU0_Channel2_Stop
   98    98                              PUBLIC  _R_TAU0_Channel3_Start
   99    99                              PUBLIC  _R_TAU0_Channel3_Stop
  100   100                      
  101   101 -----                @@BITS  BSEG
  102   102                      
  103   103 -----                @@CNST  CSEG    MIRRORP
  104   104                      
  105   105 -----                @@R_INIT        CSEG    UNIT64KP
  106   106                      
  107   107 -----                @@INIT  DSEG    BASEP
  108   108                      
  109   109 -----                @@DATA  DSEG    BASEP
  110   110                      
  111   111 -----                @@R_INIS        CSEG    UNIT64KP
  112   112                      
  113   113 -----                @@INIS  DSEG    SADDRP
  114   114                      
  115   115 -----                @@DATS  DSEG    SADDRP
  116   116                      
  117   117 -----                @@CNSTL CSEG    PAGE64KP
  118   118                      
  119   119 -----                @@RLINIT        CSEG    UNIT64KP
  120   120                      
  121   121 -----                @@INITL DSEG    UNIT64KP
  122   122                      
  123   123 -----                @@DATAL DSEG    UNIT64KP
  124   124                      
  125   125 -----                @@CALT  CSEG    CALLT0
  126   126                      
  127   127                      ; line     1 : /***************************************************************
  128   128                      ;              ********************************************************
  129   129                      ; line     2 : * DISCLAIMER
  130   130                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  131   131                      ;              nd is only 
  132   132                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  133   133                      ;              orized. This 
  134   134                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  135   135                      ;              otected under 
  136   136                      ; line     6 : * all applicable laws, including copyright laws.
  137   137                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  138   138                      ;              IES REGARDING 
  139   139                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  140   140                      ;              G BUT NOT 
  141   141                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  142   142                      ;              ULAR PURPOSE 
  143   143                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  144   144                      ;              AIMED.
  145   145                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  146   146                      ;               RENESAS 
  147   147                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  148   148                      ;              ALL BE LIABLE 
  149   149                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  150   150                      ;               DAMAGES FOR 
  151   151                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  152   152                      ;              FILIATES HAVE 
  153   153                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  154   154                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  155   155                      ;               this software 
  156   156                      ; line    17 : * and to discontinue the availability of this software.  By usin
  157   157                      ;              g this software, 
  158   158                      ; line    18 : * you agree to the additional terms and conditions found by acce
  159   159                      ;              ssing the 
  160   160                      ; line    19 : * following link:
  161   161                      ; line    20 : * http://www.renesas.com/disclaimer
  162   162                      ; line    21 : *
  163   163                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  164   164                      ;               reserved.
  165   165                      ; line    23 : ****************************************************************
  166   166                      ;              *******************************************************/
  167   167                      ; line    24 : 
  168   168                      ; line    25 : /***************************************************************
  169   169                      ;              ********************************************************
  170   170                      ; line    26 : * File Name    : r_cg_macrodriver.h
  171   171                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  172   172                      ;              ]
  173   173                      ; line    28 : * Device(s)    : R5F10WMG
  174   174                      ; line    29 : * Tool-Chain   : CA78K0R
  175   175                      ; line    30 : * Description  : This file implements general head file.
  176   176                      ; line    31 : * Creation Date: 05-Jun-21
  177   177                      ; line    32 : ****************************************************************
  178   178                      ;              *******************************************************/
  179   179                      ; line    33 : #ifndef MODULEID_H
  180   180                      ; line    34 : #define MODULEID_H
  181   181                      ; line    35 : /***************************************************************
  182   182                      ;              ********************************************************
  183   183                      ; line    36 : Includes
  184   184                      ; line    37 : ****************************************************************
  185   185                      ;              *******************************************************/
  186   186                      ; line    38 : #pragma sfr
  187   187                      ; line    39 : #pragma DI
  188   188                      ; line    40 : #pragma EI
  189   189                      ; line    41 : #pragma NOP
  190   190                      ; line    42 : #pragma HALT
  191   191                      ; line    43 : #pragma STOP
  192   192                      ; line    44 : 
  193   193                      ; line    45 : /***************************************************************
  194   194                      ;              ********************************************************
  195   195                      ; line    46 : Macro definitions (Register bit)
  196   196                      ; line    47 : ****************************************************************
  197   197                      ;              *******************************************************/
  198   198                      ; line    48 : 
  199   199                      ; line    49 : /***************************************************************
  200   200                      ;              ********************************************************
  201   201                      ; line    50 : Macro definitions
  202   202                      ; line    51 : ****************************************************************
  203   203                      ;              *******************************************************/
  204   204                      ; line    52 : #ifndef __TYPEDEF__
  205   205                      ; line    53 : /* Status list definition */
  206   206                      ; line    54 : #define MD_STATUSBASE        (0x00U)
  207   207                      ; line    55 : #define MD_OK                (MD_STATUSBASE + 0x00U) /* register
  208   208                      ;               setting OK */
  209   209                      ; line    56 : #define MD_SPT               (MD_STATUSBASE + 0x01U) /* IIC stop
  210   210                      ;               */
  211   211                      ; line    57 : #define MD_NACK              (MD_STATUSBASE + 0x02U) /* IIC no A
  212   212                      ;              CK */
  213   213                      ; line    58 : #define MD_BUSY1             (MD_STATUSBASE + 0x03U) /* busy 1 *
  214   214                      ;              /
  215   215                      ; line    59 : #define MD_BUSY2             (MD_STATUSBASE + 0x04U) /* busy 2 *
  216   216                      ;              /
  217   217                      ; line    60 : 
  218   218                      ; line    61 : /* Error list definition */
  219   219                      ; line    62 : #define MD_ERRORBASE         (0x80U)
  220   220                      ; line    63 : #define MD_ERROR             (MD_ERRORBASE + 0x00U)  /* error */
  221   221                      ; line    64 : #define MD_ARGERROR          (MD_ERRORBASE + 0x01U)  /* error ag
  222   222                      ;              rument input error */
  223   223                      ; line    65 : #define MD_ERROR1            (MD_ERRORBASE + 0x02U)  /* error 1 
  224   224                      ;              */
  225   225                      ; line    66 : #define MD_ERROR2            (MD_ERRORBASE + 0x03U)  /* error 2 
  226   226                      ;              */
  227   227                      ; line    67 : #define MD_ERROR3            (MD_ERRORBASE + 0x04U)  /* error 3 
  228   228                      ;              */
  229   229                      ; line    68 : #define MD_ERROR4            (MD_ERRORBASE + 0x05U)  /* error 4 
  230   230                      ;              */
  231   231                      ; line    69 : #define MD_ERROR5            (MD_ERRORBASE + 0x06U)  /* error 5 
  232   232                      ;              */
  233   233                      ; line    70 : #endif
  234   234                      ; line    71 : 
  235   235                      ; line    72 : /***************************************************************
  236   236                      ;              ********************************************************
  237   237                      ; line    73 : Typedef definitions
  238   238                      ; line    74 : ****************************************************************
  239   239                      ;              *******************************************************/
  240   240                      ; line    75 : #ifndef __TYPEDEF__
  241   241                      ; line    76 : typedef signed char         int8_t;
  242   242                      ; line    77 : typedef unsigned char       uint8_t;
  243   243                      ; line    78 : typedef signed short        int16_t;
  244   244                      ; line    79 : typedef unsigned short      uint16_t;
  245   245                      ; line    80 : typedef signed long         int32_t;
  246   246                      ; line    81 : typedef unsigned long       uint32_t;
  247   247                      ; line    82 : typedef unsigned short      MD_STATUS;
  248   248                      ; line     1 : /***************************************************************
  249   249                      ;              ********************************************************
  250   250                      ; line     2 : * DISCLAIMER
  251   251                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  252   252                      ;              nd is only 
  253   253                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  254   254                      ;              orized. This 
  255   255                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  256   256                      ;              otected under 
  257   257                      ; line     6 : * all applicable laws, including copyright laws.
  258   258                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  259   259                      ;              IES REGARDING 
  260   260                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  261   261                      ;              G BUT NOT 
  262   262                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  263   263                      ;              ULAR PURPOSE 
  264   264                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  265   265                      ;              AIMED.
  266   266                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  267   267                      ;               RENESAS 
  268   268                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  269   269                      ;              ALL BE LIABLE 
  270   270                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  271   271                      ;               DAMAGES FOR 
  272   272                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  273   273                      ;              FILIATES HAVE 
  274   274                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  275   275                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  276   276                      ;               this software 
  277   277                      ; line    17 : * and to discontinue the availability of this software.  By usin
  278   278                      ;              g this software, 
  279   279                      ; line    18 : * you agree to the additional terms and conditions found by acce
  280   280                      ;              ssing the 
  281   281                      ; line    19 : * following link:
  282   282                      ; line    20 : * http://www.renesas.com/disclaimer
  283   283                      ; line    21 : *
  284   284                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  285   285                      ;               reserved.
  286   286                      ; line    23 : ****************************************************************
  287   287                      ;              *******************************************************/
  288   288                      ; line    24 : 
  289   289                      ; line    25 : /***************************************************************
  290   290                      ;              ********************************************************
  291   291                      ; line    26 : * File Name    : r_cg_tau.h
  292   292                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  293   293                      ;              ]
  294   294                      ; line    28 : * Device(s)    : R5F10WMG
  295   295                      ; line    29 : * Tool-Chain   : CA78K0R
  296   296                      ; line    30 : * Description  : This file implements device driver for TAU modu
  297   297                      ;              le.
  298   298                      ; line    31 : * Creation Date: 05-Jun-21
  299   299                      ; line    32 : ****************************************************************
  300   300                      ;              *******************************************************/
  301   301                      ; line    33 : #ifndef TAU_H
  302   302                      ; line    34 : #define TAU_H
  303   303                      ; line    35 : 
  304   304                      ; line    36 : /***************************************************************
  305   305                      ;              ********************************************************
  306   306                      ; line    37 : Macro definitions (Register bit)
  307   307                      ; line    38 : ****************************************************************
  308   308                      ;              *******************************************************/
  309   309                      ; line    39 : /*
  310   310                      ; line    40 :     Peripheral Enable Register 0 (PER0)
  311   311                      ; line    41 : */
  312   312                      ; line    42 : /* Control of timer array unit 0 input clock (TAU0EN) */
  313   313                      ; line    43 : #define _00_TAU0_CLOCK_STOP                     (0x00U) /* stops
  314   314                      ;               supply of input clock */
  315   315                      ; line    44 : #define _01_TAU0_CLOCK_SUPPLY                   (0x01U) /* suppl
  316   316                      ;              ies input clock */
  317   317                      ; line    45 : 
  318   318                      ; line    46 : /*
  319   319                      ; line    47 :     Timer Clock Select Register m (TPSm)
  320   320                      ; line    48 : */
  321   321                      ; line    49 : /* Operating mode and clear mode selection (PRSm03 - PRSm00) */
  322   322                      ; line    50 : #define _0000_TAU_CKM0_fCLK_0                   (0x0000U) /* ckm
  323   323                      ;              0 - fCLK */
  324   324                      ; line    51 : #define _0001_TAU_CKM0_fCLK_1                   (0x0001U) /* ckm
  325   325                      ;              0 - fCLK/2^1 */
  326   326                      ; line    52 : #define _0002_TAU_CKM0_fCLK_2                   (0x0002U) /* ckm
  327   327                      ;              0 - fCLK/2^2 */
  328   328                      ; line    53 : #define _0003_TAU_CKM0_fCLK_3                   (0x0003U) /* ckm
  329   329                      ;              0 - fCLK/2^3 */
  330   330                      ; line    54 : #define _0004_TAU_CKM0_fCLK_4                   (0x0004U) /* ckm
  331   331                      ;              0 - fCLK/2^4 */
  332   332                      ; line    55 : #define _0005_TAU_CKM0_fCLK_5                   (0x0005U) /* ckm
  333   333                      ;              0 - fCLK/2^5 */
  334   334                      ; line    56 : #define _0006_TAU_CKM0_fCLK_6                   (0x0006U) /* ckm
  335   335                      ;              0 - fCLK/2^6 */
  336   336                      ; line    57 : #define _0007_TAU_CKM0_fCLK_7                   (0x0007U) /* ckm
  337   337                      ;              0 - fCLK/2^7 */
  338   338                      ; line    58 : #define _0008_TAU_CKM0_fCLK_8                   (0x0008U) /* ckm
  339   339                      ;              0 - fCLK/2^8 */
  340   340                      ; line    59 : #define _0009_TAU_CKM0_fCLK_9                   (0x0009U) /* ckm
  341   341                      ;              0 - fCLK/2^9 */
  342   342                      ; line    60 : #define _000A_TAU_CKM0_fCLK_10                  (0x000AU) /* ckm
  343   343                      ;              0 - fCLK/2^10 */
  344   344                      ; line    61 : #define _000B_TAU_CKM0_fCLK_11                  (0x000BU) /* ckm
  345   345                      ;              0 - fCLK/2^11 */
  346   346                      ; line    62 : #define _000C_TAU_CKM0_fCLK_12                  (0x000CU) /* ckm
  347   347                      ;              0 - fCLK/2^12 */
  348   348                      ; line    63 : #define _000D_TAU_CKM0_fCLK_13                  (0x000DU) /* ckm
  349   349                      ;              0 - fCLK/2^13 */
  350   350                      ; line    64 : #define _000E_TAU_CKM0_fCLK_14                  (0x000EU) /* ckm
  351   351                      ;              0 - fCLK/2^14 */
  352   352                      ; line    65 : #define _000F_TAU_CKM0_fCLK_15                  (0x000FU) /* ckm
  353   353                      ;              0 - fCLK/2^15 */
  354   354                      ; line    66 : /* Operating mode and clear mode selection (PRSm13 - PRSm10) */
  355   355                      ; line    67 : #define _0000_TAU_CKM1_fCLK_0                   (0x0000U) /* ckm
  356   356                      ;              1 - fCLK */
  357   357                      ; line    68 : #define _0010_TAU_CKM1_fCLK_1                   (0x0010U) /* ckm
  358   358                      ;              1 - fCLK/2^1 */
  359   359                      ; line    69 : #define _0020_TAU_CKM1_fCLK_2                   (0x0020U) /* ckm
  360   360                      ;              1 - fCLK/2^2 */
  361   361                      ; line    70 : #define _0030_TAU_CKM1_fCLK_3                   (0x0030U) /* ckm
  362   362                      ;              1 - fCLK/2^3 */
  363   363                      ; line    71 : #define _0040_TAU_CKM1_fCLK_4                   (0x0040U) /* ckm
  364   364                      ;              1 - fCLK/2^4 */
  365   365                      ; line    72 : #define _0050_TAU_CKM1_fCLK_5                   (0x0050U) /* ckm
  366   366                      ;              1 - fCLK/2^5 */
  367   367                      ; line    73 : #define _0060_TAU_CKM1_fCLK_6                   (0x0060U) /* ckm
  368   368                      ;              1 - fCLK/2^6 */
  369   369                      ; line    74 : #define _0070_TAU_CKM1_fCLK_7                   (0x0070U) /* ckm
  370   370                      ;              1 - fCLK/2^7 */
  371   371                      ; line    75 : #define _0080_TAU_CKM1_fCLK_8                   (0x0080U) /* ckm
  372   372                      ;              1 - fCLK/2^8 */
  373   373                      ; line    76 : #define _0090_TAU_CKM1_fCLK_9                   (0x0090U) /* ckm
  374   374                      ;              1 - fCLK/2^9 */
  375   375                      ; line    77 : #define _00A0_TAU_CKM1_fCLK_10                  (0x00A0U) /* ckm
  376   376                      ;              1 - fCLK/2^10 */
  377   377                      ; line    78 : #define _00B0_TAU_CKM1_fCLK_11                  (0x00B0U) /* ckm
  378   378                      ;              1 - fCLK/2^11 */
  379   379                      ; line    79 : #define _00C0_TAU_CKM1_fCLK_12                  (0x00C0U) /* ckm
  380   380                      ;              1 - fCLK/2^12 */
  381   381                      ; line    80 : #define _00D0_TAU_CKM1_fCLK_13                  (0x00D0U) /* ckm
  382   382                      ;              1 - fCLK/2^13 */
  383   383                      ; line    81 : #define _00E0_TAU_CKM1_fCLK_14                  (0x00E0U) /* ckm
  384   384                      ;              1 - fCLK/2^14 */
  385   385                      ; line    82 : #define _00F0_TAU_CKM1_fCLK_15                  (0x00F0U) /* ckm
  386   386                      ;              1 - fCLK/2^15 */
  387   387                      ; line    83 : /* Operating mode and clear mode selection (PRSm21 - PRSm20) */
  388   388                      ; line    84 : #define _0000_TAU_CKM2_fCLK_1                   (0x0000U) /* ckm
  389   389                      ;              2 - fCLK/2^1 */
  390   390                      ; line    85 : #define _0100_TAU_CKM2_fCLK_2                   (0x0100U) /* ckm
  391   391                      ;              2 - fCLK/2^2 */
  392   392                      ; line    86 : #define _0200_TAU_CKM2_fCLK_4                   (0x0200U) /* ckm
  393   393                      ;              2 - fCLK/2^4 */
  394   394                      ; line    87 : #define _0300_TAU_CKM2_fCLK_6                   (0x0300U) /* ckm
  395   395                      ;              2 - fCLK/2^6 */
  396   396                      ; line    88 : /* Operating mode and clear mode selection (PRSm31 - PRSm30) */
  397   397                      ; line    89 : #define _0000_TAU_CKM3_fCLK_8                   (0x0000U) /* ckm
  398   398                      ;              3 - fCLK/2^8 */
  399   399                      ; line    90 : #define _1000_TAU_CKM3_fCLK_10                  (0x1000U) /* ckm
  400   400                      ;              3 - fCLK/2^10 */
  401   401                      ; line    91 : #define _2000_TAU_CKM3_fCLK_12                  (0x2000U) /* ckm
  402   402                      ;              3 - fCLK/2^12 */
  403   403                      ; line    92 : #define _3000_TAU_CKM3_fCLK_14                  (0x3000U) /* ckm
  404   404                      ;              3 - fCLK/2^14 */
  405   405                      ; line    93 : 
  406   406                      ; line    94 : /*
  407   407                      ; line    95 :     Timer Mode Register mn (TMRmn)
  408   408                      ; line    96 : */
  409   409                      ; line    97 : /* Selection of macro clock (MCK) of channel n (CKSmn1 - CKSmn0)
  410   410                      ;               */
  411   411                      ; line    98 : #define _0000_TAU_CLOCK_SELECT_CKM0             (0x0000U) /* ope
  412   412                      ;              ration clock CK0 set by PRS register */ 
  413   413                      ; line    99 : #define _8000_TAU_CLOCK_SELECT_CKM1             (0x8000U) /* ope
  414   414                      ;              ration clock CK1 set by PRS register */
  415   415                      ; line   100 : #define _4000_TAU_CLOCK_SELECT_CKM2             (0x4000U) /* ope
  416   416                      ;              ration clock CK2 set by PRS register */
  417   417                      ; line   101 : #define _C000_TAU_CLOCK_SELECT_CKM3             (0xC000U) /* ope
  418   418                      ;              ration clock CK3 set by PRS register */
  419   419                      ; line   102 : /* Selection of count clock (CCK) of channel n (CCSmn) */
  420   420                      ; line   103 : #define _0000_TAU_CLOCK_MODE_CKS                (0x0000U) /* mac
  421   421                      ;              ro clock MCK specified by CKSmn bit */  
  422   422                      ; line   104 : #define _1000_TAU_CLOCK_MODE_TIMN               (0x1000U) /* val
  423   423                      ;              id edge of input signal input from TImn pin */
  424   424                      ; line   105 : /* Selection of slave/master of channel n (MASTERmn) */
  425   425                      ; line   106 : #define _0000_TAU_COMBINATION_SLAVE             (0x0000U) /* ope
  426   426                      ;              rates as slave channel */
  427   427                      ; line   107 : #define _0800_TAU_COMBINATION_MASTER            (0x0800U) /* ope
  428   428                      ;              rates as master channel */
  429   429                      ; line   108 : /* Operation explanation of channel 1 or 3 (SPLIT) */
  430   430                      ; line   109 : #define _0000_TAU_16BITS_MODE                   (0x0000U) /* ope
  431   431                      ;              rates as 16 bits timer */  
  432   432                      ; line   110 : #define _0800_TAU_8BITS_MODE                    (0x0800U) /* ope
  433   433                      ;              rates as 8 bits timer */
  434   434                      ; line   111 : /* Setting of start trigger or capture trigger of channel n (STS
  435   435                      ;              mn2 - STSmn0) */
  436   436                      ; line   112 : #define _0000_TAU_TRIGGER_SOFTWARE              (0x0000U) /* onl
  437   437                      ;              y software trigger start is valid */
  438   438                      ; line   113 : #define _0100_TAU_TRIGGER_TIMN_VALID            (0x0100U) /* TIm
  439   439                      ;              n input edge is used as a start/capture trigger */
  440   440                      ; line   114 : #define _0200_TAU_TRIGGER_TIMN_BOTH             (0x0200U) /* TIm
  441   441                      ;              n input edges are used as a start/capture trigger */
  442   442                      ; line   115 : #define _0400_TAU_TRIGGER_MASTER_INT            (0x0400U) /* int
  443   443                      ;              errupt signal of the master channel is used */
  444   444                      ; line   116 : /* Selection of TImn pin input valid edge (CISmn1 - CISmn0) */
  445   445                      ; line   117 : #define _0000_TAU_TIMN_EDGE_FALLING             (0x0000U) /* fal
  446   446                      ;              ling edge */
  447   447                      ; line   118 : #define _0040_TAU_TIMN_EDGE_RISING              (0x0040U) /* ris
  448   448                      ;              ing edge */
  449   449                      ; line   119 : #define _0080_TAU_TIMN_EDGE_BOTH_LOW            (0x0080U) /* bot
  450   450                      ;              h edges (when low-level width is measured) */
  451   451                      ; line   120 : #define _00C0_TAU_TIMN_EDGE_BOTH_HIGH           (0x00C0U) /* bot
  452   452                      ;              h edges (when high-level width is measured) */
  453   453                      ; line   121 : /* Operation mode of channel n (MDmn3 - MDmn0) */
  454   454                      ; line   122 : #define _0000_TAU_MODE_INTERVAL_TIMER           (0x0000U) /* int
  455   455                      ;              erval timer mode */
  456   456                      ; line   123 : #define _0004_TAU_MODE_CAPTURE                  (0x0004U) /* cap
  457   457                      ;              ture mode */
  458   458                      ; line   124 : #define _0006_TAU_MODE_EVENT_COUNT              (0x0006U) /* eve
  459   459                      ;              nt counter mode */
  460   460                      ; line   125 : #define _0008_TAU_MODE_ONE_COUNT                (0x0008U) /* one
  461   461                      ;               count mode */
  462   462                      ; line   126 : #define _000C_TAU_MODE_HIGHLOW_MEASURE          (0x000CU) /* hig
  463   463                      ;              h-/low-level width measurement mode */
  464   464                      ; line   127 : #define _0001_TAU_MODE_PWM_MASTER               (0x0001U) /* PWM
  465   465                      ;               function (master channel) mode */
  466   466                      ; line   128 : #define _0009_TAU_MODE_PWM_SLAVE                (0x0009U) /* PWM
  467   467                      ;               function (slave channel) mode */
  468   468                      ; line   129 : #define _0008_TAU_MODE_ONESHOT                  (0x0008U) /* one
  469   469                      ;              -shot pulse output mode */
  470   470                      ; line   130 : /* Setting of starting counting and interrupt (MDmn0) */
  471   471                      ; line   131 : #define _0000_TAU_START_INT_UNUSED              (0x0000U) /* int
  472   472                      ;              errupt is not generated when counting is started */
  473   473                      ; line   132 : #define _0001_TAU_START_INT_USED                (0x0001U) /* int
  474   474                      ;              errupt is generated when counting is started */
  475   475                      ; line   133 : 
  476   476                      ; line   134 : /*
  477   477                      ; line   135 :     Timer Status Register mn (TSRmn)
  478   478                      ; line   136 : */
  479   479                      ; line   137 : /* Counter overflow status of channel n (OVF) */
  480   480                      ; line   138 : #define _0000_TAU_OVERFLOW_NOT_OCCURS           (0x0000U) /* ove
  481   481                      ;              rflow does not occur */
  482   482                      ; line   139 : #define _0001_TAU_OVERFLOW_OCCURS               (0x0001U) /* ove
  483   483                      ;              rflow occurs */
  484   484                      ; line   140 : 
  485   485                      ; line   141 : /*
  486   486                      ; line   142 :     Timer Channel Enable Status Register m (TEm)
  487   487                      ; line   143 : */
  488   488                      ; line   144 : /* Indication of operation enable/stop status of channel 0 (TEm0
  489   489                      ;              ) */
  490   490                      ; line   145 : #define _0000_TAU_CH0_OPERATION_STOP            (0x0000U) /* ope
  491   491                      ;              ration is stopped */
  492   492                      ; line   146 : #define _0001_TAU_CH0_OPERATION_ENABLE          (0x0001U) /* ope
  493   493                      ;              ration is enabled */
  494   494                      ; line   147 : /* Indication of operation enable/stop status of channel 1 (TEm1
  495   495                      ;              ) */
  496   496                      ; line   148 : #define _0000_TAU_CH1_OPERATION_STOP            (0x0000U) /* ope
  497   497                      ;              ration is stopped */
  498   498                      ; line   149 : #define _0002_TAU_CH1_OPERATION_ENABLE          (0x0002U) /* ope
  499   499                      ;              ration is enabled */
  500   500                      ; line   150 : /* Indication of operation enable/stop status of channel 2 (TEm2
  501   501                      ;              ) */
  502   502                      ; line   151 : #define _0000_TAU_CH2_OPERATION_STOP            (0x0000U) /* ope
  503   503                      ;              ration is stopped */
  504   504                      ; line   152 : #define _0004_TAU_CH2_OPERATION_ENABLE          (0x0004U) /* ope
  505   505                      ;              ration is enabled */
  506   506                      ; line   153 : /* Indication of operation enable/stop status of channel 3 (TEm3
  507   507                      ;              ) */
  508   508                      ; line   154 : #define _0000_TAU_CH3_OPERATION_STOP            (0x0000U) /* ope
  509   509                      ;              ration is stopped */
  510   510                      ; line   155 : #define _0008_TAU_CH3_OPERATION_ENABLE          (0x0008U) /* ope
  511   511                      ;              ration is enabled */
  512   512                      ; line   156 : /* Indication of operation enable/stop status of channel 4 (TEm4
  513   513                      ;              ) */
  514   514                      ; line   157 : #define _0000_TAU_CH4_OPERATION_STOP            (0x0000U) /* ope
  515   515                      ;              ration is stopped */
  516   516                      ; line   158 : #define _0010_TAU_CH4_OPERATION_ENABLE          (0x0010U) /* ope
  517   517                      ;              ration is enabled */
  518   518                      ; line   159 : /* Indication of operation enable/stop status of channel 5 (TEm5
  519   519                      ;              ) */
  520   520                      ; line   160 : #define _0000_TAU_CH5_OPERATION_STOP            (0x0000U) /* ope
  521   521                      ;              ration is stopped */
  522   522                      ; line   161 : #define _0020_TAU_CH5_OPERATION_ENABLE          (0x0020U) /* ope
  523   523                      ;              ration is enabled */
  524   524                      ; line   162 : /* Indication of operation enable/stop status of channel 6 (TEm6
  525   525                      ;              ) */
  526   526                      ; line   163 : #define _0000_TAU_CH6_OPERATION_STOP            (0x0000U) /* ope
  527   527                      ;              ration is stopped */
  528   528                      ; line   164 : #define _0040_TAU_CH6_OPERATION_ENABLE          (0x0040U) /* ope
  529   529                      ;              ration is enabled */
  530   530                      ; line   165 : /* Indication of operation enable/stop status of channel 7 (TEm7
  531   531                      ;              ) */
  532   532                      ; line   166 : #define _0000_TAU_CH7_OPERATION_STOP            (0x0000U) /* ope
  533   533                      ;              ration is stopped */
  534   534                      ; line   167 : #define _0080_TAU_CH7_OPERATION_ENABLE          (0x0080U) /* ope
  535   535                      ;              ration is enabled */
  536   536                      ; line   168 : /* Indication of operation enable/stop status of channel 1 highe
  537   537                      ;              r 8 bits (TEHm1) */
  538   538                      ; line   169 : #define _0000_TAU_CH1_H8_OPERATION_STOP         (0x0000U) /* ope
  539   539                      ;              ration is stopped */
  540   540                      ; line   170 : #define _0200_TAU_CH1_H8_OPERATION_ENABLE       (0x0200U) /* ope
  541   541                      ;              ration is enabled */
  542   542                      ; line   171 : /* Indication of operation enable/stop status of channel 3 highe
  543   543                      ;              r 8 bits (TEHm3) */
  544   544                      ; line   172 : #define _0000_TAU_CH3_H8_OPERATION_STOP         (0x0000U) /* ope
  545   545                      ;              ration is stopped */
  546   546                      ; line   173 : #define _0800_TAU_CH3_H8_OPERATION_ENABLE       (0x0800U) /* ope
  547   547                      ;              ration is enabled */
  548   548                      ; line   174 : 
  549   549                      ; line   175 : /*
  550   550                      ; line   176 :     Timer Channel Start Register m (TSm)
  551   551                      ; line   177 : */
  552   552                      ; line   178 : /* Operation enable (start) trigger of channel 0 (TSm0) */
  553   553                      ; line   179 : #define _0000_TAU_CH0_START_TRG_OFF             (0x0000U) /* no 
  554   554                      ;              trigger operation */
  555   555                      ; line   180 : #define _0001_TAU_CH0_START_TRG_ON              (0x0001U) /* ope
  556   556                      ;              ration is enabled (start trigger is generated) */
  557   557                      ; line   181 : /* Operation enable (start) trigger of channel 1 (TSm1) */
  558   558                      ; line   182 : #define _0000_TAU_CH1_START_TRG_OFF             (0x0000U) /* no 
  559   559                      ;              trigger operation */
  560   560                      ; line   183 : #define _0002_TAU_CH1_START_TRG_ON              (0x0002U) /* ope
  561   561                      ;              ration is enabled (start trigger is generated) */
  562   562                      ; line   184 : /* Operation enable (start) trigger of channel 2 (TSm2) */
  563   563                      ; line   185 : #define _0000_TAU_CH2_START_TRG_OFF             (0x0000U) /* no 
  564   564                      ;              trigger operation */
  565   565                      ; line   186 : #define _0004_TAU_CH2_START_TRG_ON              (0x0004U) /* ope
  566   566                      ;              ration is enabled (start trigger is generated) */
  567   567                      ; line   187 : /* Operation enable (start) trigger of channel 3 (TSm3) */
  568   568                      ; line   188 : #define _0000_TAU_CH3_START_TRG_OFF             (0x0000U) /* no 
  569   569                      ;              trigger operation */
  570   570                      ; line   189 : #define _0008_TAU_CH3_START_TRG_ON              (0x0008U) /* ope
  571   571                      ;              ration is enabled (start trigger is generated) */
  572   572                      ; line   190 : /* Operation enable (start) trigger of channel 4 (TSm4) */
  573   573                      ; line   191 : #define _0000_TAU_CH4_START_TRG_OFF             (0x0000U) /* no 
  574   574                      ;              trigger operation */
  575   575                      ; line   192 : #define _0010_TAU_CH4_START_TRG_ON              (0x0010U) /* ope
  576   576                      ;              ration is enabled (start trigger is generated) */
  577   577                      ; line   193 : /* Operation enable (start) trigger of channel 5 (TSm5) */
  578   578                      ; line   194 : #define _0000_TAU_CH5_START_TRG_OFF             (0x0000U) /* no 
  579   579                      ;              trigger operation */
  580   580                      ; line   195 : #define _0020_TAU_CH5_START_TRG_ON              (0x0020U) /* ope
  581   581                      ;              ration is enabled (start trigger is generated) */
  582   582                      ; line   196 : /* Operation enable (start) trigger of channel 6 (TSm6) */
  583   583                      ; line   197 : #define _0000_TAU_CH6_START_TRG_OFF             (0x0000U) /* no 
  584   584                      ;              trigger operation */
  585   585                      ; line   198 : #define _0040_TAU_CH6_START_TRG_ON              (0x0040U) /* ope
  586   586                      ;              ration is enabled (start trigger is generated) */
  587   587                      ; line   199 : /* Operation enable (start) trigger of channel 7 (TSm7) */
  588   588                      ; line   200 : #define _0000_TAU_CH7_START_TRG_OFF             (0x0000U) /* no 
  589   589                      ;              trigger operation */
  590   590                      ; line   201 : #define _0080_TAU_CH7_START_TRG_ON              (0x0080U) /* ope
  591   591                      ;              ration is enabled (start trigger is generated) */
  592   592                      ; line   202 : /* Operation enable (start) trigger of channel 1 higher 8 bits (
  593   593                      ;              TSHm1) */
  594   594                      ; line   203 : #define _0000_TAU_CH1_H8_START_TRG_OFF          (0x0000U) /* no 
  595   595                      ;              trigger operation */
  596   596                      ; line   204 : #define _0200_TAU_CH1_H8_START_TRG_ON           (0x0200U) /* ope
  597   597                      ;              ration is enabled (start trigger is generated) */
  598   598                      ; line   205 : /* Operation enable (start) trigger of channel 3 higher 8 bits (
  599   599                      ;              TSHm3) */
  600   600                      ; line   206 : #define _0000_TAU_CH3_H8_START_TRG_OFF          (0x0000U) /* no 
  601   601                      ;              trigger operation */
  602   602                      ; line   207 : #define _0800_TAU_CH3_H8_START_TRG_ON           (0x0800U) /* ope
  603   603                      ;              ration is enabled (start trigger is generated) */
  604   604                      ; line   208 : 
  605   605                      ; line   209 : /*
  606   606                      ; line   210 :     Timer Channel Stop Register m (TTm)
  607   607                      ; line   211 : */
  608   608                      ; line   212 : /* Operation stop trigger of channel 0 (TTm0) */
  609   609                      ; line   213 : #define _0000_TAU_CH0_STOP_TRG_OFF              (0x0000U) /* no 
  610   610                      ;              trigger operation */
  611   611                      ; line   214 : #define _0001_TAU_CH0_STOP_TRG_ON               (0x0001U) /* ope
  612   612                      ;              ration is stopped (stop trigger is generated) */
  613   613                      ; line   215 : /* Operation stop trigger of channel 1 (TTm1) */
  614   614                      ; line   216 : #define _0000_TAU_CH1_STOP_TRG_OFF              (0x0000U) /* no 
  615   615                      ;              trigger operation */
  616   616                      ; line   217 : #define _0002_TAU_CH1_STOP_TRG_ON               (0x0002U) /* ope
  617   617                      ;              ration is stopped (stop trigger is generated) */
  618   618                      ; line   218 : /* Operation stop trigger of channel 2 (TTm2) */
  619   619                      ; line   219 : #define _0000_TAU_CH2_STOP_TRG_OFF              (0x0000U) /* no 
  620   620                      ;              trigger operation */
  621   621                      ; line   220 : #define _0004_TAU_CH2_STOP_TRG_ON               (0x0004U) /* ope
  622   622                      ;              ration is stopped (stop trigger is generated) */
  623   623                      ; line   221 : /* Operation stop trigger of channel 3 (TTm3) */
  624   624                      ; line   222 : #define _0000_TAU_CH3_STOP_TRG_OFF              (0x0000U) /* no 
  625   625                      ;              trigger operation */
  626   626                      ; line   223 : #define _0008_TAU_CH3_STOP_TRG_ON               (0x0008U) /* ope
  627   627                      ;              ration is stopped (stop trigger is generated) */
  628   628                      ; line   224 : /* Operation stop trigger of channel 4 (TTm4) */
  629   629                      ; line   225 : #define _0000_TAU_CH4_STOP_TRG_OFF              (0x0000U) /* no 
  630   630                      ;              trigger operation */
  631   631                      ; line   226 : #define _0010_TAU_CH4_STOP_TRG_ON               (0x0010U) /* ope
  632   632                      ;              ration is stopped (stop trigger is generated) */
  633   633                      ; line   227 : /* Operation stop trigger of channel 5 (TTm5) */
  634   634                      ; line   228 : #define _0000_TAU_CH5_STOP_TRG_OFF              (0x0000U) /* no 
  635   635                      ;              trigger operation */
  636   636                      ; line   229 : #define _0020_TAU_CH5_STOP_TRG_ON               (0x0020U) /* ope
  637   637                      ;              ration is stopped (stop trigger is generated) */
  638   638                      ; line   230 : /* Operation stop trigger of channel 6 (TTm6) */
  639   639                      ; line   231 : #define _0000_TAU_CH6_STOP_TRG_OFF              (0x0000U) /* no 
  640   640                      ;              trigger operation */
  641   641                      ; line   232 : #define _0040_TAU_CH6_STOP_TRG_ON               (0x0040U) /* ope
  642   642                      ;              ration is stopped (stop trigger is generated) */
  643   643                      ; line   233 : /* Operation stop trigger of channel 7 (TTm7) */
  644   644                      ; line   234 : #define _0000_TAU_CH7_STOP_TRG_OFF              (0x0000U) /* no 
  645   645                      ;              trigger operation */
  646   646                      ; line   235 : #define _0080_TAU_CH7_STOP_TRG_ON               (0x0080U) /* ope
  647   647                      ;              ration is stopped (stop trigger is generated) */
  648   648                      ; line   236 : /* Operation stop trigger of channel 1 higher 8 bits (TTHm1) */
  649   649                      ; line   237 : #define _0000_TAU_CH1_H8_STOP_TRG_OFF           (0x0000U) /* no 
  650   650                      ;              trigger operation */
  651   651                      ; line   238 : #define _0200_TAU_CH1_H8_STOP_TRG_ON            (0x0200U) /* ope
  652   652                      ;              ration is stopped (stop trigger is generated) */
  653   653                      ; line   239 : /* Operation stop trigger of channel 3 higher 8 bits (TTHm3) */
  654   654                      ; line   240 : #define _0000_TAU_CH3_H8_STOP_TRG_OFF           (0x0000U) /* no 
  655   655                      ;              trigger operation */
  656   656                      ; line   241 : #define _0800_TAU_CH3_H8_STOP_TRG_ON            (0x0800U) /* ope
  657   657                      ;              ration is stopped (stop trigger is generated) */
  658   658                      ; line   242 : 
  659   659                      ; line   243 : /*
  660   660                      ; line   244 :     Timer Input Select Register m (TIS0)
  661   661                      ; line   245 : */
  662   662                      ; line   246 : /* Selection of timer input used with channel 1 (TIS02 - TIS00) 
  663   663                      ;              */
  664   664                      ; line   247 : #define _00_TAU_CH1_INPUT_TI01                  (0x00U) /* input
  665   665                      ;               signal of timer input pin (TI01) */
  666   666                      ; line   248 : #define _04_TAU_CH1_INPUT_fIL                   (0x04U) /* low-s
  667   667                      ;              peed on-chip oscillator clock (fIL) */
  668   668                      ; line   249 : #define _05_TAU_CH1_INPUT_fSUB                  (0x05U) /* subsy
  669   669                      ;              stem clock (fSUB) */
  670   670                      ; line   250 : 
  671   671                      ; line   251 : /*
  672   672                      ; line   252 :     A timer array unit and an output selection register (TOS)
  673   673                      ; line   253 : */
  674   674                      ; line   254 : /* Remote control carrier power output selection */
  675   675                      ; line   255 : #define _00_TAU_REMOTE_CONTROL_UNUSED           (0x00U) /* remot
  676   676                      ;              e control carrier power output invalidity */
  677   677                      ; line   256 : #define _01_TAU_REMOTE_CONTROL_USED             (0x01U) /* remot
  678   678                      ;              e control carrier power output effective */
  679   679                      ; line   257 : 
  680   680                      ; line   258 : /*
  681   681                      ; line   259 :     Timer Output Enable Register m (TOEm)
  682   682                      ; line   260 : */
  683   683                      ; line   261 : /* Timer output enable/disable of channel 0 (TOEm0) */
  684   684                      ; line   262 : #define _0001_TAU_CH0_OUTPUT_ENABLE             (0x0001U) /* the
  685   685                      ;               TOm0 operation enabled by count operation */
  686   686                      ; line   263 : #define _0000_TAU_CH0_OUTPUT_DISABLE            (0x0000U) /* the
  687   687                      ;               TOm0 operation stopped by count operation */
  688   688                      ; line   264 : /* Timer output enable/disable of channel 1 (TOEm1) */
  689   689                      ; line   265 : #define _0002_TAU_CH1_OUTPUT_ENABLE             (0x0002U) /* the
  690   690                      ;               TOm1 operation enabled by count operation */
  691   691                      ; line   266 : #define _0000_TAU_CH1_OUTPUT_DISABLE            (0x0000U) /* the
  692   692                      ;               TOm1 operation stopped by count operation */
  693   693                      ; line   267 : /* Timer output enable/disable of channel 2 (TOEm2) */
  694   694                      ; line   268 : #define _0004_TAU_CH2_OUTPUT_ENABLE             (0x0004U) /* the
  695   695                      ;               TOm2 operation enabled by count operation */
  696   696                      ; line   269 : #define _0000_TAU_CH2_OUTPUT_DISABLE            (0x0000U) /* the
  697   697                      ;               TOm2 operation stopped by count operation */
  698   698                      ; line   270 : /* Timer output enable/disable of channel 3 (TOEm3) */
  699   699                      ; line   271 : #define _0008_TAU_CH3_OUTPUT_ENABLE             (0x0008U) /* the
  700   700                      ;               TOm3 operation enabled by count operation */
  701   701                      ; line   272 : #define _0000_TAU_CH3_OUTPUT_DISABLE            (0x0000U) /* the
  702   702                      ;               TOm3 operation stopped by count operation */
  703   703                      ; line   273 : /* Timer output enable/disable of channel 4 (TOEm4) */
  704   704                      ; line   274 : #define _0010_TAU_CH4_OUTPUT_ENABLE             (0x0010U) /* the
  705   705                      ;               TOm4 operation enabled by count operation */
  706   706                      ; line   275 : #define _0000_TAU_CH4_OUTPUT_DISABLE            (0x0000U) /* the
  707   707                      ;               TOm4 operation stopped by count operation */
  708   708                      ; line   276 : /* Timer output enable/disable of channel 5 (TOEm5) */
  709   709                      ; line   277 : #define _0020_TAU_CH5_OUTPUT_ENABLE             (0x0020U) /* the
  710   710                      ;               TOm5 operation enabled by count operation */
  711   711                      ; line   278 : #define _0000_TAU_CH5_OUTPUT_DISABLE            (0x0000U) /* the
  712   712                      ;               TOm5 operation stopped by count operation */
  713   713                      ; line   279 : /* Timer output enable/disable of channel 6 (TOEm6) */
  714   714                      ; line   280 : #define _0040_TAU_CH6_OUTPUT_ENABLE             (0x0040U) /* the
  715   715                      ;               TOm6 operation enabled by count operation */
  716   716                      ; line   281 : #define _0000_TAU_CH6_OUTPUT_DISABLE            (0x0000U) /* the
  717   717                      ;               TOm6 operation stopped by count operation */
  718   718                      ; line   282 : /* Timer output enable/disable of channel 7 (TOEm7) */
  719   719                      ; line   283 : #define _0080_TAU_CH7_OUTPUT_ENABLE             (0x0080U) /* the
  720   720                      ;               TOm7 operation enabled by count operation */
  721   721                      ; line   284 : #define _0000_TAU_CH7_OUTPUT_DISABLE            (0x0000U) /* the
  722   722                      ;               TOm7 operation stopped by count operation */
  723   723                      ; line   285 : 
  724   724                      ; line   286 : /*
  725   725                      ; line   287 :     Timer Output Register m (TOm)
  726   726                      ; line   288 : */
  727   727                      ; line   289 : /* Timer output of channel 0 (TOm0) */
  728   728                      ; line   290 : #define _0000_TAU_CH0_OUTPUT_VALUE_0            (0x0000U) /* tim
  729   729                      ;              er output value is "0" */
  730   730                      ; line   291 : #define _0001_TAU_CH0_OUTPUT_VALUE_1            (0x0001U) /* tim
  731   731                      ;              er output value is "1" */
  732   732                      ; line   292 : /* Timer output of channel 1 (TOm1) */
  733   733                      ; line   293 : #define _0000_TAU_CH1_OUTPUT_VALUE_0            (0x0000U) /* tim
  734   734                      ;              er output value is "0" */
  735   735                      ; line   294 : #define _0002_TAU_CH1_OUTPUT_VALUE_1            (0x0002U) /* tim
  736   736                      ;              er output value is "1" */
  737   737                      ; line   295 : /* Timer output of channel 2 (TOm2) */
  738   738                      ; line   296 : #define _0000_TAU_CH2_OUTPUT_VALUE_0            (0x0000U) /* tim
  739   739                      ;              er output value is "0" */
  740   740                      ; line   297 : #define _0004_TAU_CH2_OUTPUT_VALUE_1            (0x0004U) /* tim
  741   741                      ;              er output value is "1" */
  742   742                      ; line   298 : /* Timer output of channel 3 (TOm3) */
  743   743                      ; line   299 : #define _0000_TAU_CH3_OUTPUT_VALUE_0            (0x0000U) /* tim
  744   744                      ;              er output value is "0" */
  745   745                      ; line   300 : #define _0008_TAU_CH3_OUTPUT_VALUE_1            (0x0008U) /* tim
  746   746                      ;              er output value is "1" */
  747   747                      ; line   301 : /* Timer output of channel 4 (TOm4) */
  748   748                      ; line   302 : #define _0000_TAU_CH4_OUTPUT_VALUE_0            (0x0000U) /* tim
  749   749                      ;              er output value is "0" */
  750   750                      ; line   303 : #define _0010_TAU_CH4_OUTPUT_VALUE_1            (0x0010U) /* tim
  751   751                      ;              er output value is "1" */
  752   752                      ; line   304 : /* Timer output of channel 5 (TOm5) */
  753   753                      ; line   305 : #define _0000_TAU_CH5_OUTPUT_VALUE_0            (0x0000U) /* tim
  754   754                      ;              er output value is "0" */
  755   755                      ; line   306 : #define _0020_TAU_CH5_OUTPUT_VALUE_1            (0x0020U) /* tim
  756   756                      ;              er output value is "1" */
  757   757                      ; line   307 : /* Timer output of channel 6 (TOm6) */
  758   758                      ; line   308 : #define _0000_TAU_CH6_OUTPUT_VALUE_0            (0x0000U) /* tim
  759   759                      ;              er output value is "0" */
  760   760                      ; line   309 : #define _0040_TAU_CH6_OUTPUT_VALUE_1            (0x0040U) /* tim
  761   761                      ;              er output value is "1" */
  762   762                      ; line   310 : /* Timer output of channel 7 (TOm7) */
  763   763                      ; line   311 : #define _0000_TAU_CH7_OUTPUT_VALUE_0            (0x0000U) /* tim
  764   764                      ;              er output value is "0" */
  765   765                      ; line   312 : #define _0080_TAU_CH7_OUTPUT_VALUE_1            (0x0080U) /* tim
  766   766                      ;              er output value is "1" */
  767   767                      ; line   313 : 
  768   768                      ; line   314 : /*
  769   769                      ; line   315 :     Timer Output Level Register 0 (TOLm)
  770   770                      ; line   316 : */
  771   771                      ; line   317 : /* Control of timer output level of channel 1 (TOLm1) */
  772   772                      ; line   318 : #define _0000_TAU_CH1_OUTPUT_LEVEL_H            (0x0000U) /* pos
  773   773                      ;              itive logic output (active-high) */
  774   774                      ; line   319 : #define _0002_TAU_CH1_OUTPUT_LEVEL_L            (0x0002U) /* inv
  775   775                      ;              erted output (active-low) */
  776   776                      ; line   320 : /* Control of timer output level of channel 2 (TOLm2) */
  777   777                      ; line   321 : #define _0000_TAU_CH2_OUTPUT_LEVEL_H            (0x0000U) /* pos
  778   778                      ;              itive logic output (active-high) */
  779   779                      ; line   322 : #define _0004_TAU_CH2_OUTPUT_LEVEL_L            (0x0004U) /* inv
  780   780                      ;              erted output (active-low) */
  781   781                      ; line   323 : /* Control of timer output level of channel 3 (TOLm3) */
  782   782                      ; line   324 : #define _0000_TAU_CH3_OUTPUT_LEVEL_H            (0x0000U) /* pos
  783   783                      ;              itive logic output (active-high) */
  784   784                      ; line   325 : #define _0008_TAU_CH3_OUTPUT_LEVEL_L            (0x0008U) /* inv
  785   785                      ;              erted output (active-low) */
  786   786                      ; line   326 : /* Control of timer output level of channel 4 (TOLm4) */
  787   787                      ; line   327 : #define _0000_TAU_CH4_OUTPUT_LEVEL_H            (0x0000U) /* pos
  788   788                      ;              itive logic output (active-high) */
  789   789                      ; line   328 : #define _0010_TAU_CH4_OUTPUT_LEVEL_L            (0x0010U) /* inv
  790   790                      ;              erted output (active-low) */
  791   791                      ; line   329 : /* Control of timer output level of channel 5 (TOLm5) */
  792   792                      ; line   330 : #define _0000_TAU_CH5_OUTPUT_LEVEL_H            (0x0000U) /* pos
  793   793                      ;              itive logic output (active-high) */
  794   794                      ; line   331 : #define _0020_TAU_CH5_OUTPUT_LEVEL_L            (0x0020U) /* inv
  795   795                      ;              erted output (active-low) */
  796   796                      ; line   332 : /* Control of timer output level of channel 6 (TOLm6) */
  797   797                      ; line   333 : #define _0000_TAU_CH6_OUTPUT_LEVEL_H            (0x0000U) /* pos
  798   798                      ;              itive logic output (active-high) */
  799   799                      ; line   334 : #define _0040_TAU_CH6_OUTPUT_LEVEL_L            (0x0040U) /* inv
  800   800                      ;              erted output (active-low) */
  801   801                      ; line   335 : /* Control of timer output level of channel 7 (TOLm7) */
  802   802                      ; line   336 : #define _0000_TAU_CH7_OUTPUT_LEVEL_H            (0x0000U) /* pos
  803   803                      ;              itive logic output (active-high) */
  804   804                      ; line   337 : #define _0080_TAU_CH7_OUTPUT_LEVEL_L            (0x0080U) /* inv
  805   805                      ;              erted output (active-low) */
  806   806                      ; line   338 : 
  807   807                      ; line   339 : /*
  808   808                      ; line   340 :     Timer Output Mode Register m (TOMm)
  809   809                      ; line   341 : */
  810   810                      ; line   342 : /* Control of timer output mode of channel 1 (TOMm1) */
  811   811                      ; line   343 : #define _0000_TAU_CH1_OUTPUT_TOGGLE             (0x0000U) /* tog
  812   812                      ;              gle operation mode */
  813   813                      ; line   344 : #define _0002_TAU_CH1_OUTPUT_COMBIN             (0x0002U) /* com
  814   814                      ;              bination operation mode */
  815   815                      ; line   345 : /* Control of timer output mode of channel 2 (TOMm2) */
  816   816                      ; line   346 : #define _0000_TAU_CH2_OUTPUT_TOGGLE             (0x0000U) /* tog
  817   817                      ;              gle operation mode */
  818   818                      ; line   347 : #define _0004_TAU_CH2_OUTPUT_COMBIN             (0x0004U) /* com
  819   819                      ;              bination operation mode */
  820   820                      ; line   348 : /* Control of timer output mode of channel 3 (TOMm3) */
  821   821                      ; line   349 : #define _0000_TAU_CH3_OUTPUT_TOGGLE             (0x0000U) /* tog
  822   822                      ;              gle operation mode */
  823   823                      ; line   350 : #define _0008_TAU_CH3_OUTPUT_COMBIN             (0x0008U) /* com
  824   824                      ;              bination operation mode */
  825   825                      ; line   351 : /* Control of timer output mode of channel 4 (TOMm4) */
  826   826                      ; line   352 : #define _0000_TAU_CH4_OUTPUT_TOGGLE             (0x0000U) /* tog
  827   827                      ;              gle operation mode */
  828   828                      ; line   353 : #define _0010_TAU_CH4_OUTPUT_COMBIN             (0x0010U) /* com
  829   829                      ;              bination operation mode */
  830   830                      ; line   354 : /* Control of timer output mode of channel 5 (TOMm5) */
  831   831                      ; line   355 : #define _0000_TAU_CH5_OUTPUT_TOGGLE             (0x0000U) /* tog
  832   832                      ;              gle operation mode */
  833   833                      ; line   356 : #define _0020_TAU_CH5_OUTPUT_COMBIN             (0x0020U) /* com
  834   834                      ;              bination operation mode */
  835   835                      ; line   357 : /* Control of timer output mode of channel 6 (TOMm6) */
  836   836                      ; line   358 : #define _0000_TAU_CH6_OUTPUT_TOGGLE             (0x0000U) /* tog
  837   837                      ;              gle operation mode */
  838   838                      ; line   359 : #define _0040_TAU_CH6_OUTPUT_COMBIN             (0x0040U) /* com
  839   839                      ;              bination operation mode */
  840   840                      ; line   360 : /* Control of timer output mode of channel 7 (TOMm7) */
  841   841                      ; line   361 : #define _0000_TAU_CH7_OUTPUT_TOGGLE             (0x0000U) /* tog
  842   842                      ;              gle operation mode */
  843   843                      ; line   362 : #define _0080_TAU_CH7_OUTPUT_COMBIN             (0x0080U) /* com
  844   844                      ;              bination operation mode */
  845   845                      ; line   363 : 
  846   846                      ; line   364 : /*
  847   847                      ; line   365 :     Input Switch Control Register (ISC)
  848   848                      ; line   366 : */
  849   849                      ; line   367 : /* Switching external interrupt (INTP0) input (ISC0) */
  850   850                      ; line   368 : #define _00_TAU_EXTINT_INTP0                    (0x00U) /* uses 
  851   851                      ;              the INTP0 pin as an external interrupt */
  852   852                      ; line   369 : #define _01_TAU_EXTINT_RXD0                     (0x01U) /* uses 
  853   853                      ;              RXD0 pin as an external interrupt */
  854   854                      ; line   370 : /* Switching channel 5 input of timer array unit (ISC1) */
  855   855                      ; line   371 : #define _00_TAU_CH7_TI07_INPUT                  (0x00U) /* input
  856   856                      ;               signal of the TI05 pin as a timer input */
  857   857                      ; line   372 : #define _02_TAU_CH7_RXD0_INPUT                  (0x02U) /* input
  858   858                      ;               signal of RxD0 pin is used as timer input */
  859   859                      ; line   373 : 
  860   860                      ; line   374 : /*
  861   861                      ; line   375 :     Noise Filter Enable Register 1 (NFEN1)
  862   862                      ; line   376 : */
  863   863                      ; line   377 : /* Enable/disable using noise filter of TI00 pin input signal (T
  864   864                      ;              NFEN00) */
  865   865                      ; line   378 : #define _00_TAU_CH0_NOISE_OFF                   (0x00U) /* noise
  866   866                      ;               filter OFF */
  867   867                      ; line   379 : #define _01_TAU_CH0_NOISE_ON                    (0x01U) /* noise
  868   868                      ;               filter ON */
  869   869                      ; line   380 : /* Enable/disable using noise filter of TI01 pin input signal (T
  870   870                      ;              NFEN01) */
  871   871                      ; line   381 : #define _00_TAU_CH1_NOISE_OFF                   (0x00U) /* noise
  872   872                      ;               filter OFF */
  873   873                      ; line   382 : #define _02_TAU_CH1_NOISE_ON                    (0x02U) /* noise
  874   874                      ;               filter ON */
  875   875                      ; line   383 : /* Enable/disable using noise filter of TI02 pin input signal (T
  876   876                      ;              NFEN02) */
  877   877                      ; line   384 : #define _00_TAU_CH2_NOISE_OFF                   (0x00U) /* noise
  878   878                      ;               filter OFF */
  879   879                      ; line   385 : #define _04_TAU_CH2_NOISE_ON                    (0x04U) /* noise
  880   880                      ;               filter ON */
  881   881                      ; line   386 : /* Enable/disable using noise filter of TI03 pin input signal (T
  882   882                      ;              NFEN03) */
  883   883                      ; line   387 : #define _00_TAU_CH3_NOISE_OFF                   (0x00U) /* noise
  884   884                      ;               filter OFF */
  885   885                      ; line   388 : #define _08_TAU_CH3_NOISE_ON                    (0x08U) /* noise
  886   886                      ;               filter ON */
  887   887                      ; line   389 : /* Enable/disable using noise filter of TI04 pin input signal (T
  888   888                      ;              NFEN04) */
  889   889                      ; line   390 : #define _00_TAU_CH4_NOISE_OFF                   (0x00U) /* noise
  890   890                      ;               filter OFF */
  891   891                      ; line   391 : #define _10_TAU_CH4_NOISE_ON                    (0x10U) /* noise
  892   892                      ;               filter ON */
  893   893                      ; line   392 : /* Enable/disable using noise filter of TI05 pin input signal (T
  894   894                      ;              NFEN05) */
  895   895                      ; line   393 : #define _00_TAU_CH5_NOISE_OFF                   (0x00U) /* noise
  896   896                      ;               filter OFF */
  897   897                      ; line   394 : #define _20_TAU_CH5_NOISE_ON                    (0x20U) /* noise
  898   898                      ;               filter ON */
  899   899                      ; line   395 : /* Enable/disable using noise filter of TI06 pin input signal (T
  900   900                      ;              NFEN06) */
  901   901                      ; line   396 : #define _00_TAU_CH6_NOISE_OFF                   (0x00U) /* noise
  902   902                      ;               filter OFF */
  903   903                      ; line   397 : #define _40_TAU_CH6_NOISE_ON                    (0x40U) /* noise
  904   904                      ;               filter ON */
  905   905                      ; line   398 : /* Enable/disable using noise filter of TI07 pin input signal (T
  906   906                      ;              NFEN07) */
  907   907                      ; line   399 : #define _00_TAU_CH7_NOISE_OFF                   (0x00U) /* noise
  908   908                      ;               filter OFF */
  909   909                      ; line   400 : #define _80_TAU_CH7_NOISE_ON                    (0x80U) /* noise
  910   910                      ;               filter ON */
  911   911                      ; line   401 : 
  912   912                      ; line   402 : /***************************************************************
  913   913                      ;              ********************************************************
  914   914                      ; line   403 : Macro definitions
  915   915                      ; line   404 : ****************************************************************
  916   916                      ;              *******************************************************/
  917   917                      ; line   405 : /* 16-bit timer data register 00 (TDR00) */
  918   918                      ; line   406 : #define _C34F_TAU_TDR00_VALUE                   (0xC34FU)
  919   919                      ; line   407 : /* Clock divisor for TAU0 channel 0 */
  920   920                      ; line   408 : #define TAU0_CHANNEL0_DIVISOR                   (8U)      /* fCL
  921   921                      ;              K/2^3 */
  922   922                      ; line   409 : /* 16-bit timer data register 01 (TDR01) */
  923   923                      ; line   410 : #define _F423_TAU_TDR01_VALUE                   (0xF423U)
  924   924                      ; line   411 : /* Clock divisor for TAU0 channel 1 */
  925   925                      ; line   412 : #define TAU0_CHANNEL1_DIVISOR                   (64U)     /* fCL
  926   926                      ;              K/2^6 */
  927   927                      ; line   413 : /* 16-bit timer data register 02 (TDR02) */
  928   928                      ; line   414 : #define _0138_TAU_TDR02_VALUE                   (0x0138U)
  929   929                      ; line   415 : /* Clock divisor for TAU0 channel 2 */
  930   930                      ; line   416 : #define TAU0_CHANNEL2_DIVISOR                   (8U)      /* fCL
  931   931                      ;              K/2^3 */
  932   932                      ; line   417 : /* 16-bit timer data register 03 (TDR03) */
  933   933                      ; line   418 : #define _09C3_TAU_TDR03_VALUE                   (0x09C3U)
  934   934                      ; line   419 : /* Clock divisor for TAU0 channel 3 */
  935   935                      ; line   420 : #define TAU0_CHANNEL3_DIVISOR                   (8U)      /* fCL
  936   936                      ;              K/2^3 */
  937   937                      ; line   421 : 
  938   938                      ; line   422 : /***************************************************************
  939   939                      ;              ********************************************************
  940   940                      ; line   423 : Typedef definitions
  941   941                      ; line   424 : ****************************************************************
  942   942                      ;              *******************************************************/
  943   943                      ; line   425 : 
  944   944                      ; line   426 : /***************************************************************
  945   945                      ;              ********************************************************
  946   946                      ; line   427 : Global functions
  947   947                      ; line   428 : ****************************************************************
  948   948                      ;              *******************************************************/
  949   949                      ; line   429 : void R_TAU0_Create(void);
  950   950                      ; line   430 : void R_TAU0_Channel0_Start(void);
  951   951                      ; line   431 : void R_TAU0_Channel0_Stop(void);
  952   952                      ; line   432 : void R_TAU0_Channel1_Start(void);
  953   953                      ; line   433 : void R_TAU0_Channel1_Stop(void);
  954   954                      ; line   434 : void R_TAU0_Channel2_Start(void);
  955   955                      ; line   435 : void R_TAU0_Channel2_Stop(void);
  956   956                      ; line   436 : void R_TAU0_Channel3_Start(void);
  957   957                      ; line   437 : void R_TAU0_Channel3_Stop(void);
  958   958                      ; line   438 : 
  959   959                      ; line   439 : /* Start user code for function. Do not edit comment generated h
  960   960                      ;              ere */
  961   961                      ; line   440 : void R_TAU_MsDelay(const uint16_t millisec);
  962   962                      ; line     1 : /***************************************************************
  963   963                      ;              ********************************************************
  964   964                      ; line     2 : * DISCLAIMER
  965   965                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  966   966                      ;              nd is only 
  967   967                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  968   968                      ;              orized. This 
  969   969                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  970   970                      ;              otected under 
  971   971                      ; line     6 : * all applicable laws, including copyright laws.
  972   972                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  973   973                      ;              IES REGARDING 
  974   974                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  975   975                      ;              G BUT NOT 
  976   976                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  977   977                      ;              ULAR PURPOSE 
  978   978                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  979   979                      ;              AIMED.
  980   980                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  981   981                      ;               RENESAS 
  982   982                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  983   983                      ;              ALL BE LIABLE 
  984   984                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  985   985                      ;               DAMAGES FOR 
  986   986                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  987   987                      ;              FILIATES HAVE 
  988   988                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  989   989                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  990   990                      ;               this software 
  991   991                      ; line    17 : * and to discontinue the availability of this software.  By usin
  992   992                      ;              g this software, 
  993   993                      ; line    18 : * you agree to the additional terms and conditions found by acce
  994   994                      ;              ssing the 
  995   995                      ; line    19 : * following link:
  996   996                      ; line    20 : * http://www.renesas.com/disclaimer
  997   997                      ; line    21 : *
  998   998                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  999   999                      ;               reserved.
 1000  1000                      ; line    23 : ****************************************************************
 1001  1001                      ;              *******************************************************/
 1002  1002                      ; line    24 : 
 1003  1003                      ; line    25 : /***************************************************************
 1004  1004                      ;              ********************************************************
 1005  1005                      ; line    26 : * File Name    : r_cg_tau.c
 1006  1006                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
 1007  1007                      ;              ]
 1008  1008                      ; line    28 : * Device(s)    : R5F10WMG
 1009  1009                      ; line    29 : * Tool-Chain   : CA78K0R
 1010  1010                      ; line    30 : * Description  : This file implements device driver for TAU modu
 1011  1011                      ;              le.
 1012  1012                      ; line    31 : * Creation Date: 05-Jun-21
 1013  1013                      ; line    32 : ****************************************************************
 1014  1014                      ;              *******************************************************/
 1015  1015                      ; line    33 : 
 1016  1016                      ; line    34 : /***************************************************************
 1017  1017                      ;              ********************************************************
 1018  1018                      ; line    35 : Pragma directive
 1019  1019                      ; line    36 : ****************************************************************
 1020  1020                      ;              *******************************************************/
 1021  1021                      ; line    37 : /* Start user code for pragma. Do not edit comment generated her
 1022  1022                      ;              e */
 1023  1023                      ; line    38 : /* End user code. Do not edit comment generated here */
 1024  1024                      ; line    39 : 
 1025  1025                      ; line    40 : /***************************************************************
 1026  1026                      ;              ********************************************************
 1027  1027                      ; line    41 : Includes
 1028  1028                      ; line    42 : ****************************************************************
 1029  1029                      ;              *******************************************************/
 1030  1030                      ; line    43 : #include "r_cg_macrodriver.h"
 1031  1031                      ; line    44 : #include "r_cg_tau.h"
 1032  1032                      ; line    45 : /* Start user code for include. Do not edit comment generated he
 1033  1033                      ;              re */
 1034  1034                      ; line    46 : /* End user code. Do not edit comment generated here */
 1035  1035                      ; line    47 : #include "r_cg_userdefine.h"
 1036  1036                      ; line    48 : 
 1037  1037                      ; line    49 : /***************************************************************
 1038  1038                      ;              ********************************************************
 1039  1039                      ; line    50 : Global variables and functions
 1040  1040                      ; line    51 : ****************************************************************
 1041  1041                      ;              *******************************************************/
 1042  1042                      ; line    52 : /* Start user code for global. Do not edit comment generated her
 1043  1043                      ;              e */
 1044  1044                      ; line    53 : /* End user code. Do not edit comment generated here */
 1045  1045                      ; line    54 : 
 1046  1046                      ; line    55 : /***************************************************************
 1047  1047                      ;              ********************************************************
 1048  1048                      ; line    56 : * Function Name: R_TAU0_Create
 1049  1049                      ; line    57 : * Description  : This function initializes the TAU0 module.
 1050  1050                      ; line    58 : * Arguments    : None
 1051  1051                      ; line    59 : * Return Value : None
 1052  1052                      ; line    60 : ****************************************************************
 1053  1053                      ;              *******************************************************/
 1054  1054                      ; line    61 : void R_TAU0_Create(void)
 1055  1055                      ; line    62 : {
 1056  1056                      
 1057  1057 -----                @@CODEL CSEG
 1058  1058 00000                _R_TAU0_Create:
 1059  1059                      $DGL    1,19
 1060  1060 00000                ??bf_R_TAU0_Create:
 1061  1061                      ; line    63 :     TAU0EN = 1U;    /* supplies input clock */
 1062  1062                      $DGL    0,2
 1063  1063 00000  7100F000              set1    !PER0.0                                         ;[INF] 4, 2
 1064  1064                      ; line    64 :     TPS0 = _0003_TAU_CKM0_fCLK_3 | _0060_TAU_CKM1_fCLK_6 | _0000
 1065  1065                      ;              _TAU_CKM2_fCLK_1 | _0000_TAU_CKM3_fCLK_8;
 1066  1066                      $DGL    0,3
 1067  1067 00004  306300                movw    ax,#063H        ; 99                            ;[INF] 3, 1
 1068  1068 00007  BFB601                movw    !TPS0,ax                                        ;[INF] 3, 1
 1069  1069                      ; line    65 :     /* Stop all channels */
 1070  1070                      ; line    66 :     TT0 = _0001_TAU_CH0_STOP_TRG_ON | _0002_TAU_CH1_STOP_TRG_ON 
 1071  1071                      ;              | _0004_TAU_CH2_STOP_TRG_ON | 
 1072  1072                      ; line    67 :           _0008_TAU_CH3_STOP_TRG_ON | _0010_TAU_CH4_STOP_TRG_ON 
 1073  1073                      ;              | _0020_TAU_CH5_STOP_TRG_ON | 
 1074  1074                      ; line    68 :           _0040_TAU_CH6_STOP_TRG_ON | _0080_TAU_CH7_STOP_TRG_ON 
 1075  1075                      ;              | _0200_TAU_CH1_H8_STOP_TRG_ON | 
 1076  1076                      ; line    69 :           _0800_TAU_CH3_H8_STOP_TRG_ON;
 1077  1077                      $DGL    0,8
 1078  1078 0000A  30FF0A                movw    ax,#0AFFH       ; 2815                          ;[INF] 3, 1
 1079  1079 0000D  BFB401                movw    !TT0,ax                                         ;[INF] 3, 1
 1080  1080                      ; line    70 :     /* Mask channel 0 interrupt */
 1081  1081                      ; line    71 :     TMMK00 = 1U;    /* disable INTTM00 interrupt */
 1082  1082                      $DGL    0,10
 1083  1083 00010  716AE5                set1    MK0H.6                                          ;[INF] 3, 2
 1084  1084                      ; line    72 :     TMIF00 = 0U;    /* clear INTTM00 interrupt flag */
 1085  1085                      $DGL    0,11
 1086  1086 00013  716BE1                clr1    IF0H.6                                          ;[INF] 3, 2
 1087  1087                      ; line    73 :     /* Mask channel 1 interrupt */
 1088  1088                      ; line    74 :     TMMK01 = 1U;    /* disable INTTM01 interrupt */
 1089  1089                      $DGL    0,13
 1090  1090 00016  717AE6                set1    MK1L.7                                          ;[INF] 3, 2
 1091  1091                      ; line    75 :     TMIF01 = 0U;    /* clear INTTM01 interrupt flag */
 1092  1092                      $DGL    0,14
 1093  1093 00019  717BE2                clr1    IF1L.7                                          ;[INF] 3, 2
 1094  1094                      ; line    76 :     /* Mask channel 1 higher 8 bits interrupt */
 1095  1095                      ; line    77 :     TMMK01H = 1U;    /* disable INTTM01H interrupt */
 1096  1096                      $DGL    0,16
 1097  1097 0001C  710AE6                set1    MK1L.0                                          ;[INF] 3, 2
 1098  1098                      ; line    78 :     TMIF01H = 0U;    /* clear INTTM01H interrupt flag */
 1099  1099                      $DGL    0,17
 1100  1100 0001F  710BE2                clr1    IF1L.0                                          ;[INF] 3, 2
 1101  1101                      ; line    79 :     /* Mask channel 2 interrupt */
 1102  1102                      ; line    80 :     TMMK02 = 1U;    /* disable INTTM02 interrupt */
 1103  1103                      $DGL    0,19
 1104  1104 00022  710AE7                set1    MK1H.0                                          ;[INF] 3, 2
 1105  1105                      ; line    81 :     TMIF02 = 0U;    /* clear INTTM02 interrupt flag */
 1106  1106                      $DGL    0,20
 1107  1107 00025  710BE3                clr1    IF1H.0                                          ;[INF] 3, 2
 1108  1108                      ; line    82 :     /* Mask channel 3 interrupt */
 1109  1109                      ; line    83 :     TMMK03 = 1U;    /* disable INTTM03 interrupt */
 1110  1110                      $DGL    0,22
 1111  1111 00028  711AE7                set1    MK1H.1                                          ;[INF] 3, 2
 1112  1112                      ; line    84 :     TMIF03 = 0U;    /* clear INTTM03 interrupt flag */
 1113  1113                      $DGL    0,23
 1114  1114 0002B  711BE3                clr1    IF1H.1                                          ;[INF] 3, 2
 1115  1115                      ; line    85 :     /* Mask channel 3 higher 8 bits interrupt */
 1116  1116                      ; line    86 :     TMMK03H = 1U;    /* disable INTTM03H interrupt */
 1117  1117                      $DGL    0,25
 1118  1118 0002E  713AE6                set1    MK1L.3                                          ;[INF] 3, 2
 1119  1119                      ; line    87 :     TMIF03H = 0U;    /* clear INTTM03H interrupt flag */
 1120  1120                      $DGL    0,26
 1121  1121 00031  713BE2                clr1    IF1L.3                                          ;[INF] 3, 2
 1122  1122                      ; line    88 :     /* Mask channel 4 interrupt */
 1123  1123                      ; line    89 :     TMMK04 = 1U;    /* disable INTTM04 interrupt */
 1124  1124                      $DGL    0,28
 1125  1125 00034  711AD4                set1    MK2L.1                                          ;[INF] 3, 2
 1126  1126                      ; line    90 :     TMIF04 = 0U;    /* clear INTTM04 interrupt flag */
 1127  1127                      $DGL    0,29
 1128  1128 00037  711BD0                clr1    IF2L.1                                          ;[INF] 3, 2
 1129  1129                      ; line    91 :     /* Mask channel 5 interrupt */
 1130  1130                      ; line    92 :     TMMK05 = 1U;    /* disable INTTM05 interrupt */
 1131  1131                      $DGL    0,31
 1132  1132 0003A  712AD4                set1    MK2L.2                                          ;[INF] 3, 2
 1133  1133                      ; line    93 :     TMIF05 = 0U;    /* clear INTTM05 interrupt flag */
 1134  1134                      $DGL    0,32
 1135  1135 0003D  712BD0                clr1    IF2L.2                                          ;[INF] 3, 2
 1136  1136                      ; line    94 :     /* Mask channel 6 interrupt */
 1137  1137                      ; line    95 :     TMMK06 = 1U;    /* disable INTTM06 interrupt */
 1138  1138                      $DGL    0,34
 1139  1139 00040  710AD5                set1    MK2H.0                                          ;[INF] 3, 2
 1140  1140                      ; line    96 :     TMIF06 = 0U;    /* clear INTTM06 interrupt flag */
 1141  1141                      $DGL    0,35
 1142  1142 00043  710BD1                clr1    IF2H.0                                          ;[INF] 3, 2
 1143  1143                      ; line    97 :     /* Mask channel 7 interrupt */
 1144  1144                      ; line    98 :     TMMK07 = 1U;    /* disable INTTM07 interrupt */
 1145  1145                      $DGL    0,37
 1146  1146 00046  711AD5                set1    MK2H.1                                          ;[INF] 3, 2
 1147  1147                      ; line    99 :     TMIF07 = 0U;    /* clear INTTM07 interrupt flag */
 1148  1148                      $DGL    0,38
 1149  1149 00049  711BD1                clr1    IF2H.1                                          ;[INF] 3, 2
 1150  1150                      ; line   100 :     /* Set INTTM00 level 1 priority */
 1151  1151                      ; line   101 :     TMPR100 = 0U;
 1152  1152                      $DGL    0,40
 1153  1153 0004C  716BED                clr1    PR10H.6                                         ;[INF] 3, 2
 1154  1154                      ; line   102 :     TMPR000 = 1U;
 1155  1155                      $DGL    0,41
 1156  1156 0004F  716AE9                set1    PR00H.6                                         ;[INF] 3, 2
 1157  1157                      ; line   103 :     /* Set INTTM01 level 1 priority */
 1158  1158                      ; line   104 :     TMPR101 = 0U;
 1159  1159                      $DGL    0,43
 1160  1160 00052  717BEE                clr1    PR11L.7                                         ;[INF] 3, 2
 1161  1161                      ; line   105 :     TMPR001 = 1U;
 1162  1162                      $DGL    0,44
 1163  1163 00055  717AEA                set1    PR01L.7                                         ;[INF] 3, 2
 1164  1164                      ; line   106 :     /* Set INTTM02 low priority */
 1165  1165                      ; line   107 :     TMPR102 = 1U;
 1166  1166                      $DGL    0,46
 1167  1167 00058  710AEF                set1    PR11H.0                                         ;[INF] 3, 2
 1168  1168                      ; line   108 :     TMPR002 = 1U;
 1169  1169                      $DGL    0,47
 1170  1170 0005B  710AEB                set1    PR01H.0                                         ;[INF] 3, 2
 1171  1171                      ; line   109 :     /* Set INTTM03 low priority */
 1172  1172                      ; line   110 :     TMPR103 = 1U;
 1173  1173                      $DGL    0,49
 1174  1174 0005E  711AEF                set1    PR11H.1                                         ;[INF] 3, 2
 1175  1175                      ; line   111 :     TMPR003 = 1U;
 1176  1176                      $DGL    0,50
 1177  1177 00061  711AEB                set1    PR01H.1                                         ;[INF] 3, 2
 1178  1178                      ; line   112 :     /* Channel 0 used as interval timer */
 1179  1179                      ; line   113 :     TMR00 = _0000_TAU_CLOCK_SELECT_CKM0 | _0000_TAU_CLOCK_MODE_C
 1180  1180                      ;              KS | _0000_TAU_COMBINATION_SLAVE | 
 1181  1181                      ; line   114 :             _0000_TAU_TRIGGER_SOFTWARE | _0000_TAU_MODE_INTERVAL
 1182  1182                      ;              _TIMER | _0000_TAU_START_INT_UNUSED;
 1183  1183                      $DGL    0,53
 1184  1184 00064  F6                    clrw    ax                                              ;[INF] 1, 1
 1185  1185 00065  BF9001                movw    !TMR00,ax                                       ;[INF] 3, 1
 1186  1186                      ; line   115 :     TDR00 = _C34F_TAU_TDR00_VALUE;
 1187  1187                      $DGL    0,54
 1188  1188 00068  C9184FC3              movw    TDR00,#0C34FH   ; -15537                        ;[INF] 4, 1
 1189  1189                      ; line   116 :     TO0 &= ~_0001_TAU_CH0_OUTPUT_VALUE_1;
 1190  1190                      $DGL    0,55
 1191  1191 0006C  AFB801                movw    ax,!TO0                                         ;[INF] 3, 1
 1192  1192 0006F  08                    xch     a,x                                             ;[INF] 1, 1
 1193  1193 00070  5CFE                  and     a,#0FEH ; 254                                   ;[INF] 2, 1
 1194  1194 00072  08                    xch     a,x                                             ;[INF] 1, 1
 1195  1195 00073  BFB801                movw    !TO0,ax                                         ;[INF] 3, 1
 1196  1196                      ; line   117 :     TOE0 &= ~_0001_TAU_CH0_OUTPUT_ENABLE;
 1197  1197                      $DGL    0,56
 1198  1198 00076  AFBA01                movw    ax,!TOE0                                        ;[INF] 3, 1
 1199  1199 00079  08                    xch     a,x                                             ;[INF] 1, 1
 1200  1200 0007A  5CFE                  and     a,#0FEH ; 254                                   ;[INF] 2, 1
 1201  1201 0007C  08                    xch     a,x                                             ;[INF] 1, 1
 1202  1202 0007D  BFBA01                movw    !TOE0,ax                                        ;[INF] 3, 1
 1203  1203                      ; line   118 :     /* Channel 1 used as interval timer */
 1204  1204                      ; line   119 :     TMR01 = _8000_TAU_CLOCK_SELECT_CKM1 | _0000_TAU_CLOCK_MODE_C
 1205  1205                      ;              KS | _0000_TAU_16BITS_MODE | 
 1206  1206                      ; line   120 :             _0000_TAU_TRIGGER_SOFTWARE | _0000_TAU_MODE_INTERVAL
 1207  1207                      ;              _TIMER | _0000_TAU_START_INT_UNUSED;
 1208  1208                      $DGL    0,59
 1209  1209 00080  300080                movw    ax,#08000H      ; -32768                        ;[INF] 3, 1
 1210  1210 00083  BF9201                movw    !TMR01,ax                                       ;[INF] 3, 1
 1211  1211                      ; line   121 :     TDR01 = _F423_TAU_TDR01_VALUE;
 1212  1212                      $DGL    0,60
 1213  1213 00086  C91A23F4              movw    TDR01,#0F423H   ; -3037                         ;[INF] 4, 1
 1214  1214                      ; line   122 :     TOM0 &= ~_0002_TAU_CH1_OUTPUT_COMBIN;
 1215  1215                      $DGL    0,61
 1216  1216 0008A  AFBE01                movw    ax,!TOM0                                        ;[INF] 3, 1
 1217  1217 0008D  08                    xch     a,x                                             ;[INF] 1, 1
 1218  1218 0008E  5CFD                  and     a,#0FDH ; 253                                   ;[INF] 2, 1
 1219  1219 00090  08                    xch     a,x                                             ;[INF] 1, 1
 1220  1220 00091  BFBE01                movw    !TOM0,ax                                        ;[INF] 3, 1
 1221  1221                      ; line   123 :     TOL0 &= ~_0002_TAU_CH1_OUTPUT_LEVEL_L;
 1222  1222                      $DGL    0,62
 1223  1223 00094  AFBC01                movw    ax,!TOL0                                        ;[INF] 3, 1
 1224  1224 00097  08                    xch     a,x                                             ;[INF] 1, 1
 1225  1225 00098  5CFD                  and     a,#0FDH ; 253                                   ;[INF] 2, 1
 1226  1226 0009A  08                    xch     a,x                                             ;[INF] 1, 1
 1227  1227 0009B  BFBC01                movw    !TOL0,ax                                        ;[INF] 3, 1
 1228  1228                      ; line   124 :     TO0 &= ~_0002_TAU_CH1_OUTPUT_VALUE_1;
 1229  1229                      $DGL    0,63
 1230  1230 0009E  AFB801                movw    ax,!TO0                                         ;[INF] 3, 1
 1231  1231 000A1  08                    xch     a,x                                             ;[INF] 1, 1
 1232  1232 000A2  5CFD                  and     a,#0FDH ; 253                                   ;[INF] 2, 1
 1233  1233 000A4  08                    xch     a,x                                             ;[INF] 1, 1
 1234  1234 000A5  BFB801                movw    !TO0,ax                                         ;[INF] 3, 1
 1235  1235                      ; line   125 :     TOE0 &= ~_0002_TAU_CH1_OUTPUT_ENABLE;
 1236  1236                      $DGL    0,64
 1237  1237 000A8  AFBA01                movw    ax,!TOE0                                        ;[INF] 3, 1
 1238  1238 000AB  08                    xch     a,x                                             ;[INF] 1, 1
 1239  1239 000AC  5CFD                  and     a,#0FDH ; 253                                   ;[INF] 2, 1
 1240  1240 000AE  08                    xch     a,x                                             ;[INF] 1, 1
 1241  1241 000AF  BFBA01                movw    !TOE0,ax                                        ;[INF] 3, 1
 1242  1242                      ; line   126 :     /* Channel 2 used as interval timer */
 1243  1243                      ; line   127 :     TMR02 = _0000_TAU_CLOCK_SELECT_CKM0 | _0000_TAU_CLOCK_MODE_C
 1244  1244                      ;              KS | _0000_TAU_COMBINATION_SLAVE | 
 1245  1245                      ; line   128 :             _0000_TAU_TRIGGER_SOFTWARE | _0000_TAU_MODE_INTERVAL
 1246  1246                      ;              _TIMER | _0000_TAU_START_INT_UNUSED;
 1247  1247                      $DGL    0,67
 1248  1248 000B2  F6                    clrw    ax                                              ;[INF] 1, 1
 1249  1249 000B3  BF9401                movw    !TMR02,ax                                       ;[INF] 3, 1
 1250  1250                      ; line   129 :     TDR02 = _0138_TAU_TDR02_VALUE;
 1251  1251                      $DGL    0,68
 1252  1252 000B6  CB643801              movw    TDR02,#0138H    ; 312                           ;[INF] 4, 1
 1253  1253                      ; line   130 :     TOM0 &= ~_0004_TAU_CH2_OUTPUT_COMBIN;
 1254  1254                      $DGL    0,69
 1255  1255 000BA  AFBE01                movw    ax,!TOM0                                        ;[INF] 3, 1
 1256  1256 000BD  08                    xch     a,x                                             ;[INF] 1, 1
 1257  1257 000BE  5CFB                  and     a,#0FBH ; 251                                   ;[INF] 2, 1
 1258  1258 000C0  08                    xch     a,x                                             ;[INF] 1, 1
 1259  1259 000C1  BFBE01                movw    !TOM0,ax                                        ;[INF] 3, 1
 1260  1260                      ; line   131 :     TOL0 &= ~_0004_TAU_CH2_OUTPUT_LEVEL_L;
 1261  1261                      $DGL    0,70
 1262  1262 000C4  AFBC01                movw    ax,!TOL0                                        ;[INF] 3, 1
 1263  1263 000C7  08                    xch     a,x                                             ;[INF] 1, 1
 1264  1264 000C8  5CFB                  and     a,#0FBH ; 251                                   ;[INF] 2, 1
 1265  1265 000CA  08                    xch     a,x                                             ;[INF] 1, 1
 1266  1266 000CB  BFBC01                movw    !TOL0,ax                                        ;[INF] 3, 1
 1267  1267                      ; line   132 :     TO0 &= ~_0004_TAU_CH2_OUTPUT_VALUE_1;
 1268  1268                      $DGL    0,71
 1269  1269 000CE  AFB801                movw    ax,!TO0                                         ;[INF] 3, 1
 1270  1270 000D1  08                    xch     a,x                                             ;[INF] 1, 1
 1271  1271 000D2  5CFB                  and     a,#0FBH ; 251                                   ;[INF] 2, 1
 1272  1272 000D4  08                    xch     a,x                                             ;[INF] 1, 1
 1273  1273 000D5  BFB801                movw    !TO0,ax                                         ;[INF] 3, 1
 1274  1274                      ; line   133 :     TOE0 &= ~_0004_TAU_CH2_OUTPUT_ENABLE;
 1275  1275                      $DGL    0,72
 1276  1276 000D8  AFBA01                movw    ax,!TOE0                                        ;[INF] 3, 1
 1277  1277 000DB  08                    xch     a,x                                             ;[INF] 1, 1
 1278  1278 000DC  5CFB                  and     a,#0FBH ; 251                                   ;[INF] 2, 1
 1279  1279 000DE  08                    xch     a,x                                             ;[INF] 1, 1
 1280  1280 000DF  BFBA01                movw    !TOE0,ax                                        ;[INF] 3, 1
 1281  1281                      ; line   134 :     /* Channel 3 used as interval timer */
 1282  1282                      ; line   135 :     TMR03 = _0000_TAU_CLOCK_SELECT_CKM0 | _0000_TAU_CLOCK_MODE_C
 1283  1283                      ;              KS | _0000_TAU_16BITS_MODE | 
 1284  1284                      ; line   136 :             _0000_TAU_TRIGGER_SOFTWARE | _0000_TAU_MODE_INTERVAL
 1285  1285                      ;              _TIMER | _0000_TAU_START_INT_UNUSED;
 1286  1286                      $DGL    0,75
 1287  1287 000E2  F6                    clrw    ax                                              ;[INF] 1, 1
 1288  1288 000E3  BF9601                movw    !TMR03,ax                                       ;[INF] 3, 1
 1289  1289                      ; line   137 :     TDR03 = _09C3_TAU_TDR03_VALUE;
 1290  1290                      $DGL    0,76
 1291  1291 000E6  CB66C309              movw    TDR03,#09C3H    ; 2499                          ;[INF] 4, 1
 1292  1292                      ; line   138 :     TOM0 &= ~_0008_TAU_CH3_OUTPUT_COMBIN;
 1293  1293                      $DGL    0,77
 1294  1294 000EA  AFBE01                movw    ax,!TOM0                                        ;[INF] 3, 1
 1295  1295 000ED  08                    xch     a,x                                             ;[INF] 1, 1
 1296  1296 000EE  5CF7                  and     a,#0F7H ; 247                                   ;[INF] 2, 1
 1297  1297 000F0  08                    xch     a,x                                             ;[INF] 1, 1
 1298  1298 000F1  BFBE01                movw    !TOM0,ax                                        ;[INF] 3, 1
 1299  1299                      ; line   139 :     TOL0 &= ~_0008_TAU_CH3_OUTPUT_LEVEL_L;
 1300  1300                      $DGL    0,78
 1301  1301 000F4  AFBC01                movw    ax,!TOL0                                        ;[INF] 3, 1
 1302  1302 000F7  08                    xch     a,x                                             ;[INF] 1, 1
 1303  1303 000F8  5CF7                  and     a,#0F7H ; 247                                   ;[INF] 2, 1
 1304  1304 000FA  08                    xch     a,x                                             ;[INF] 1, 1
 1305  1305 000FB  BFBC01                movw    !TOL0,ax                                        ;[INF] 3, 1
 1306  1306                      ; line   140 :     TO0 &= ~_0008_TAU_CH3_OUTPUT_VALUE_1;
 1307  1307                      $DGL    0,79
 1308  1308 000FE  AFB801                movw    ax,!TO0                                         ;[INF] 3, 1
 1309  1309 00101  08                    xch     a,x                                             ;[INF] 1, 1
 1310  1310 00102  5CF7                  and     a,#0F7H ; 247                                   ;[INF] 2, 1
 1311  1311 00104  08                    xch     a,x                                             ;[INF] 1, 1
 1312  1312 00105  BFB801                movw    !TO0,ax                                         ;[INF] 3, 1
 1313  1313                      ; line   141 :     TOE0 &= ~_0008_TAU_CH3_OUTPUT_ENABLE;
 1314  1314                      $DGL    0,80
 1315  1315 00108  AFBA01                movw    ax,!TOE0                                        ;[INF] 3, 1
 1316  1316 0010B  08                    xch     a,x                                             ;[INF] 1, 1
 1317  1317 0010C  5CF7                  and     a,#0F7H ; 247                                   ;[INF] 2, 1
 1318  1318 0010E  08                    xch     a,x                                             ;[INF] 1, 1
 1319  1319 0010F  BFBA01                movw    !TOE0,ax                                        ;[INF] 3, 1
 1320  1320                      ; line   142 : }
 1321  1321                      $DGL    0,81
 1322  1322 00112                ??ef_R_TAU0_Create:
 1323  1323 00112  D7                    ret                                                     ;[INF] 1, 6
 1324  1324 00113                ??ee_R_TAU0_Create:
 1325  1325                      ; line   143 : /***************************************************************
 1326  1326                      ;              ********************************************************
 1327  1327                      ; line   144 : * Function Name: R_TAU0_Channel0_Start
 1328  1328                      ; line   145 : * Description  : This function starts TAU0 channel 0 counter.
 1329  1329                      ; line   146 : * Arguments    : None
 1330  1330                      ; line   147 : * Return Value : None
 1331  1331                      ; line   148 : ****************************************************************
 1332  1332                      ;              *******************************************************/
 1333  1333                      ; line   149 : void R_TAU0_Channel0_Start(void)
 1334  1334                      ; line   150 : {
 1335  1335 00113                _R_TAU0_Channel0_Start:
 1336  1336                      $DGL    1,25
 1337  1337 00113                ??bf_R_TAU0_Channel0_Start:
 1338  1338                      ; line   151 :     TMIF00 = 0U;    /* clear INTTM00 interrupt flag */
 1339  1339                      $DGL    0,2
 1340  1340 00113  716BE1                clr1    IF0H.6                                          ;[INF] 3, 2
 1341  1341                      ; line   152 :     TMMK00 = 0U;    /* enable INTTM00 interrupt */
 1342  1342                      $DGL    0,3
 1343  1343 00116  716BE5                clr1    MK0H.6                                          ;[INF] 3, 2
 1344  1344                      ; line   153 :     TS0 |= _0001_TAU_CH0_START_TRG_ON;
 1345  1345                      $DGL    0,4
 1346  1346 00119  AFB201                movw    ax,!TS0                                         ;[INF] 3, 1
 1347  1347 0011C  08                    xch     a,x                                             ;[INF] 1, 1
 1348  1348 0011D  6C01                  or      a,#01H  ; 1                                     ;[INF] 2, 1
 1349  1349 0011F  08                    xch     a,x                                             ;[INF] 1, 1
 1350  1350 00120  BFB201                movw    !TS0,ax                                         ;[INF] 3, 1
 1351  1351                      ; line   154 : }
 1352  1352                      $DGL    0,5
 1353  1353 00123                ??ef_R_TAU0_Channel0_Start:
 1354  1354 00123  D7                    ret                                                     ;[INF] 1, 6
 1355  1355 00124                ??ee_R_TAU0_Channel0_Start:
 1356  1356                      ; line   155 : /***************************************************************
 1357  1357                      ;              ********************************************************
 1358  1358                      ; line   156 : * Function Name: R_TAU0_Channel0_Stop
 1359  1359                      ; line   157 : * Description  : This function stops TAU0 channel 0 counter.
 1360  1360                      ; line   158 : * Arguments    : None
 1361  1361                      ; line   159 : * Return Value : None
 1362  1362                      ; line   160 : ****************************************************************
 1363  1363                      ;              *******************************************************/
 1364  1364                      ; line   161 : void R_TAU0_Channel0_Stop(void)
 1365  1365                      ; line   162 : {
 1366  1366 00124                _R_TAU0_Channel0_Stop:
 1367  1367                      $DGL    1,31
 1368  1368 00124                ??bf_R_TAU0_Channel0_Stop:
 1369  1369                      ; line   163 :     TT0 |= _0001_TAU_CH0_STOP_TRG_ON;
 1370  1370                      $DGL    0,2
 1371  1371 00124  AFB401                movw    ax,!TT0                                         ;[INF] 3, 1
 1372  1372 00127  08                    xch     a,x                                             ;[INF] 1, 1
 1373  1373 00128  6C01                  or      a,#01H  ; 1                                     ;[INF] 2, 1
 1374  1374 0012A  08                    xch     a,x                                             ;[INF] 1, 1
 1375  1375 0012B  BFB401                movw    !TT0,ax                                         ;[INF] 3, 1
 1376  1376                      ; line   164 :     /* Mask channel 0 interrupt */
 1377  1377                      ; line   165 :     TMMK00 = 1U;    /* disable INTTM00 interrupt */
 1378  1378                      $DGL    0,4
 1379  1379 0012E  716AE5                set1    MK0H.6                                          ;[INF] 3, 2
 1380  1380                      ; line   166 :     TMIF00 = 0U;    /* clear INTTM00 interrupt flag */
 1381  1381                      $DGL    0,5
 1382  1382 00131  716BE1                clr1    IF0H.6                                          ;[INF] 3, 2
 1383  1383                      ; line   167 : }
 1384  1384                      $DGL    0,6
 1385  1385 00134                ??ef_R_TAU0_Channel0_Stop:
 1386  1386 00134  D7                    ret                                                     ;[INF] 1, 6
 1387  1387 00135                ??ee_R_TAU0_Channel0_Stop:
 1388  1388                      ; line   168 : /***************************************************************
 1389  1389                      ;              ********************************************************
 1390  1390                      ; line   169 : * Function Name: R_TAU0_Channel1_Start
 1391  1391                      ; line   170 : * Description  : This function starts TAU0 channel 1 counter.
 1392  1392                      ; line   171 : * Arguments    : None
 1393  1393                      ; line   172 : * Return Value : None
 1394  1394                      ; line   173 : ****************************************************************
 1395  1395                      ;              *******************************************************/
 1396  1396                      ; line   174 : void R_TAU0_Channel1_Start(void)
 1397  1397                      ; line   175 : {
 1398  1398 00135                _R_TAU0_Channel1_Start:
 1399  1399                      $DGL    1,37
 1400  1400 00135                ??bf_R_TAU0_Channel1_Start:
 1401  1401                      ; line   176 :     TMIF01 = 0U;    /* clear INTTM01 interrupt flag */
 1402  1402                      $DGL    0,2
 1403  1403 00135  717BE2                clr1    IF1L.7                                          ;[INF] 3, 2
 1404  1404                      ; line   177 :     TMMK01 = 0U;    /* enable INTTM01 interrupt */
 1405  1405                      $DGL    0,3
 1406  1406 00138  717BE6                clr1    MK1L.7                                          ;[INF] 3, 2
 1407  1407                      ; line   178 :     TS0 |= _0002_TAU_CH1_START_TRG_ON;
 1408  1408                      $DGL    0,4
 1409  1409 0013B  AFB201                movw    ax,!TS0                                         ;[INF] 3, 1
 1410  1410 0013E  08                    xch     a,x                                             ;[INF] 1, 1
 1411  1411 0013F  6C02                  or      a,#02H  ; 2                                     ;[INF] 2, 1
 1412  1412 00141  08                    xch     a,x                                             ;[INF] 1, 1
 1413  1413 00142  BFB201                movw    !TS0,ax                                         ;[INF] 3, 1
 1414  1414                      ; line   179 : }
 1415  1415                      $DGL    0,5
 1416  1416 00145                ??ef_R_TAU0_Channel1_Start:
 1417  1417 00145  D7                    ret                                                     ;[INF] 1, 6
 1418  1418 00146                ??ee_R_TAU0_Channel1_Start:
 1419  1419                      ; line   180 : /***************************************************************
 1420  1420                      ;              ********************************************************
 1421  1421                      ; line   181 : * Function Name: R_TAU0_Channel1_Stop
 1422  1422                      ; line   182 : * Description  : This function stops TAU0 channel 1 counter.
 1423  1423                      ; line   183 : * Arguments    : None
 1424  1424                      ; line   184 : * Return Value : None
 1425  1425                      ; line   185 : ****************************************************************
 1426  1426                      ;              *******************************************************/
 1427  1427                      ; line   186 : void R_TAU0_Channel1_Stop(void)
 1428  1428                      ; line   187 : {
 1429  1429 00146                _R_TAU0_Channel1_Stop:
 1430  1430                      $DGL    1,43
 1431  1431 00146                ??bf_R_TAU0_Channel1_Stop:
 1432  1432                      ; line   188 :     TT0 |= _0002_TAU_CH1_STOP_TRG_ON;
 1433  1433                      $DGL    0,2
 1434  1434 00146  AFB401                movw    ax,!TT0                                         ;[INF] 3, 1
 1435  1435 00149  08                    xch     a,x                                             ;[INF] 1, 1
 1436  1436 0014A  6C02                  or      a,#02H  ; 2                                     ;[INF] 2, 1
 1437  1437 0014C  08                    xch     a,x                                             ;[INF] 1, 1
 1438  1438 0014D  BFB401                movw    !TT0,ax                                         ;[INF] 3, 1
 1439  1439                      ; line   189 :     /* Mask channel 1 interrupt */
 1440  1440                      ; line   190 :     TMMK01 = 1U;    /* disable INTTM01 interrupt */
 1441  1441                      $DGL    0,4
 1442  1442 00150  717AE6                set1    MK1L.7                                          ;[INF] 3, 2
 1443  1443                      ; line   191 :     TMIF01 = 0U;    /* clear INTTM01 interrupt flag */
 1444  1444                      $DGL    0,5
 1445  1445 00153  717BE2                clr1    IF1L.7                                          ;[INF] 3, 2
 1446  1446                      ; line   192 : }
 1447  1447                      $DGL    0,6
 1448  1448 00156                ??ef_R_TAU0_Channel1_Stop:
 1449  1449 00156  D7                    ret                                                     ;[INF] 1, 6
 1450  1450 00157                ??ee_R_TAU0_Channel1_Stop:
 1451  1451                      ; line   193 : /***************************************************************
 1452  1452                      ;              ********************************************************
 1453  1453                      ; line   194 : * Function Name: R_TAU0_Channel2_Start
 1454  1454                      ; line   195 : * Description  : This function starts TAU0 channel 2 counter.
 1455  1455                      ; line   196 : * Arguments    : None
 1456  1456                      ; line   197 : * Return Value : None
 1457  1457                      ; line   198 : ****************************************************************
 1458  1458                      ;              *******************************************************/
 1459  1459                      ; line   199 : void R_TAU0_Channel2_Start(void)
 1460  1460                      ; line   200 : {
 1461  1461 00157                _R_TAU0_Channel2_Start:
 1462  1462                      $DGL    1,49
 1463  1463 00157                ??bf_R_TAU0_Channel2_Start:
 1464  1464                      ; line   201 :     TMIF02 = 0U;    /* clear INTTM02 interrupt flag */
 1465  1465                      $DGL    0,2
 1466  1466 00157  710BE3                clr1    IF1H.0                                          ;[INF] 3, 2
 1467  1467                      ; line   202 :     TMMK02 = 0U;    /* enable INTTM02 interrupt */
 1468  1468                      $DGL    0,3
 1469  1469 0015A  710BE7                clr1    MK1H.0                                          ;[INF] 3, 2
 1470  1470                      ; line   203 :     TS0 |= _0004_TAU_CH2_START_TRG_ON;
 1471  1471                      $DGL    0,4
 1472  1472 0015D  AFB201                movw    ax,!TS0                                         ;[INF] 3, 1
 1473  1473 00160  08                    xch     a,x                                             ;[INF] 1, 1
 1474  1474 00161  6C04                  or      a,#04H  ; 4                                     ;[INF] 2, 1
 1475  1475 00163  08                    xch     a,x                                             ;[INF] 1, 1
 1476  1476 00164  BFB201                movw    !TS0,ax                                         ;[INF] 3, 1
 1477  1477                      ; line   204 : }
 1478  1478                      $DGL    0,5
 1479  1479 00167                ??ef_R_TAU0_Channel2_Start:
 1480  1480 00167  D7                    ret                                                     ;[INF] 1, 6
 1481  1481 00168                ??ee_R_TAU0_Channel2_Start:
 1482  1482                      ; line   205 : /***************************************************************
 1483  1483                      ;              ********************************************************
 1484  1484                      ; line   206 : * Function Name: R_TAU0_Channel2_Stop
 1485  1485                      ; line   207 : * Description  : This function stops TAU0 channel 2 counter.
 1486  1486                      ; line   208 : * Arguments    : None
 1487  1487                      ; line   209 : * Return Value : None
 1488  1488                      ; line   210 : ****************************************************************
 1489  1489                      ;              *******************************************************/
 1490  1490                      ; line   211 : void R_TAU0_Channel2_Stop(void)
 1491  1491                      ; line   212 : {
 1492  1492 00168                _R_TAU0_Channel2_Stop:
 1493  1493                      $DGL    1,55
 1494  1494 00168                ??bf_R_TAU0_Channel2_Stop:
 1495  1495                      ; line   213 :     TT0 |= _0004_TAU_CH2_STOP_TRG_ON;
 1496  1496                      $DGL    0,2
 1497  1497 00168  AFB401                movw    ax,!TT0                                         ;[INF] 3, 1
 1498  1498 0016B  08                    xch     a,x                                             ;[INF] 1, 1
 1499  1499 0016C  6C04                  or      a,#04H  ; 4                                     ;[INF] 2, 1
 1500  1500 0016E  08                    xch     a,x                                             ;[INF] 1, 1
 1501  1501 0016F  BFB401                movw    !TT0,ax                                         ;[INF] 3, 1
 1502  1502                      ; line   214 :     /* Mask channel 2 interrupt */
 1503  1503                      ; line   215 :     TMMK02 = 1U;    /* disable INTTM02 interrupt */
 1504  1504                      $DGL    0,4
 1505  1505 00172  710AE7                set1    MK1H.0                                          ;[INF] 3, 2
 1506  1506                      ; line   216 :     TMIF02 = 0U;    /* clear INTTM02 interrupt flag */
 1507  1507                      $DGL    0,5
 1508  1508 00175  710BE3                clr1    IF1H.0                                          ;[INF] 3, 2
 1509  1509                      ; line   217 : }
 1510  1510                      $DGL    0,6
 1511  1511 00178                ??ef_R_TAU0_Channel2_Stop:
 1512  1512 00178  D7                    ret                                                     ;[INF] 1, 6
 1513  1513 00179                ??ee_R_TAU0_Channel2_Stop:
 1514  1514                      ; line   218 : /***************************************************************
 1515  1515                      ;              ********************************************************
 1516  1516                      ; line   219 : * Function Name: R_TAU0_Channel3_Start
 1517  1517                      ; line   220 : * Description  : This function starts TAU0 channel 3 counter.
 1518  1518                      ; line   221 : * Arguments    : None
 1519  1519                      ; line   222 : * Return Value : None
 1520  1520                      ; line   223 : ****************************************************************
 1521  1521                      ;              *******************************************************/
 1522  1522                      ; line   224 : void R_TAU0_Channel3_Start(void)
 1523  1523                      ; line   225 : {
 1524  1524 00179                _R_TAU0_Channel3_Start:
 1525  1525                      $DGL    1,61
 1526  1526 00179                ??bf_R_TAU0_Channel3_Start:
 1527  1527                      ; line   226 :     TMIF03 = 0U;    /* clear INTTM03 interrupt flag */
 1528  1528                      $DGL    0,2
 1529  1529 00179  711BE3                clr1    IF1H.1                                          ;[INF] 3, 2
 1530  1530                      ; line   227 :     TMMK03 = 0U;    /* enable INTTM03 interrupt */
 1531  1531                      $DGL    0,3
 1532  1532 0017C  711BE7                clr1    MK1H.1                                          ;[INF] 3, 2
 1533  1533                      ; line   228 :     TS0 |= _0008_TAU_CH3_START_TRG_ON;
 1534  1534                      $DGL    0,4
 1535  1535 0017F  AFB201                movw    ax,!TS0                                         ;[INF] 3, 1
 1536  1536 00182  08                    xch     a,x                                             ;[INF] 1, 1
 1537  1537 00183  6C08                  or      a,#08H  ; 8                                     ;[INF] 2, 1
 1538  1538 00185  08                    xch     a,x                                             ;[INF] 1, 1
 1539  1539 00186  BFB201                movw    !TS0,ax                                         ;[INF] 3, 1
 1540  1540                      ; line   229 : }
 1541  1541                      $DGL    0,5
 1542  1542 00189                ??ef_R_TAU0_Channel3_Start:
 1543  1543 00189  D7                    ret                                                     ;[INF] 1, 6
 1544  1544 0018A                ??ee_R_TAU0_Channel3_Start:
 1545  1545                      ; line   230 : /***************************************************************
 1546  1546                      ;              ********************************************************
 1547  1547                      ; line   231 : * Function Name: R_TAU0_Channel3_Stop
 1548  1548                      ; line   232 : * Description  : This function stops TAU0 channel 3 counter.
 1549  1549                      ; line   233 : * Arguments    : None
 1550  1550                      ; line   234 : * Return Value : None
 1551  1551                      ; line   235 : ****************************************************************
 1552  1552                      ;              *******************************************************/
 1553  1553                      ; line   236 : void R_TAU0_Channel3_Stop(void)
 1554  1554                      ; line   237 : {
 1555  1555 0018A                _R_TAU0_Channel3_Stop:
 1556  1556                      $DGL    1,67
 1557  1557 0018A                ??bf_R_TAU0_Channel3_Stop:
 1558  1558                      ; line   238 :     TT0 |= _0008_TAU_CH3_STOP_TRG_ON;
 1559  1559                      $DGL    0,2
 1560  1560 0018A  AFB401                movw    ax,!TT0                                         ;[INF] 3, 1
 1561  1561 0018D  08                    xch     a,x                                             ;[INF] 1, 1
 1562  1562 0018E  6C08                  or      a,#08H  ; 8                                     ;[INF] 2, 1
 1563  1563 00190  08                    xch     a,x                                             ;[INF] 1, 1
 1564  1564 00191  BFB401                movw    !TT0,ax                                         ;[INF] 3, 1
 1565  1565                      ; line   239 :     /* Mask channel 3 interrupt */
 1566  1566                      ; line   240 :     TMMK03 = 1U;    /* disable INTTM03 interrupt */
 1567  1567                      $DGL    0,4
 1568  1568 00194  711AE7                set1    MK1H.1                                          ;[INF] 3, 2
 1569  1569                      ; line   241 :     TMIF03 = 0U;    /* clear INTTM03 interrupt flag */
 1570  1570                      $DGL    0,5
 1571  1571 00197  711BE3                clr1    IF1H.1                                          ;[INF] 3, 2
 1572  1572                      ; line   242 : }
 1573  1573                      $DGL    0,6
 1574  1574 0019A                ??ef_R_TAU0_Channel3_Stop:
 1575  1575 0019A  D7                    ret                                                     ;[INF] 1, 6
 1576  1576 0019B                ??ee_R_TAU0_Channel3_Stop:
 1577  1577                      
 1578  1578 -----                @@CODE  CSEG    BASE
 1579  1579                      
 1580  1580 -----                @@BASE  CSEG    BASE
 1581  1581                              END
 1582  1582                      
 1583  1583                      
 1584  1584                      ; *** Code Information ***
 1585  1585                      ;
 1586  1586                      ; $FILE C:\Users\nguye\Downloads\dtmf_reader_rl78\RSK_Module_test\RSKRL78L13\AD
 1587  1587                      ;       C_Repeat\cg_src\r_cg_tau.c
 1588  1588                      ;
 1589  1589                      ; $FUNC R_TAU0_Create(62)
 1590  1590                      ;       void=(void)
 1591  1591                      ;       CODE SIZE= 275 bytes, CLOCK_SIZE= 150 clocks, STACK_SIZE= 0 bytes
 1592  1592                      ;
 1593  1593                      ; $FUNC R_TAU0_Channel0_Start(150)
 1594  1594                      ;       void=(void)
 1595  1595                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1596  1596                      ;
 1597  1597                      ; $FUNC R_TAU0_Channel0_Stop(162)
 1598  1598                      ;       void=(void)
 1599  1599                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1600  1600                      ;
 1601  1601                      ; $FUNC R_TAU0_Channel1_Start(175)
 1602  1602                      ;       void=(void)
 1603  1603                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1604  1604                      ;
 1605  1605                      ; $FUNC R_TAU0_Channel1_Stop(187)
 1606  1606                      ;       void=(void)
 1607  1607                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1608  1608                      ;
 1609  1609                      ; $FUNC R_TAU0_Channel2_Start(200)
 1610  1610                      ;       void=(void)
 1611  1611                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1612  1612                      ;
 1613  1613                      ; $FUNC R_TAU0_Channel2_Stop(212)
 1614  1614                      ;       void=(void)
 1615  1615                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1616  1616                      ;
 1617  1617                      ; $FUNC R_TAU0_Channel3_Start(225)
 1618  1618                      ;       void=(void)
 1619  1619                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1620  1620                      ;
 1621  1621                      ; $FUNC R_TAU0_Channel3_Stop(237)
 1622  1622                      ;       void=(void)
 1623  1623                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 15 clocks, STACK_SIZE= 0 bytes
 1624  1624                      
 1625  1625                      ; Target chip : R5F10WMG
 1626  1626                      ; Device file : V1.00 

Segment informations:

ADRS  LEN      NAME

00000 00000H.0 @@BITS
00000 00000H   @@CNST
00000 00000H   @@R_INIT
00000 00000H   @@INIT
00000 00000H   @@DATA
00000 00000H   @@R_INIS
00000 00000H   @@INIS
00000 00000H   @@DATS
00000 00000H   @@CNSTL
00000 00000H   @@RLINIT
00000 00000H   @@INITL
00000 00000H   @@DATAL
00000 00000H   @@CALT
00000 0019BH   @@CODEL
00000 00000H   @@CODE
00000 00000H   @@BASE

 Target chip : R5F10WMG
 Device file : V1.00
Assembly complete,     0 error(s) and     0 warning(s) found. (    0)
