


78K0R Assembler V1.80                                                                                    Date: 5 Jun 2021 Page:   1



Command:  -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\Device\RL78\Devicefile Debug\r_cg_tau_user.asm -_msgoff -
          pDebug -oDebug -zs
Para-file:
In-file:  Debug\r_cg_tau_user.asm
Obj-file: Debug\r_cg_tau_user.rel
Prn-file: Debug\r_cg_tau_user.prn

      Assemble list

 ALNO  STNO ADRS   OBJECT   M I  SOURCE STATEMENT

    1     1                      ; 78K0R C Compiler V2.60 Assembler Source        Date: 5 Jun 2021 Time:10:46:09
    2     2                      
    3     3                      ; Command   : -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\
    4     4                      ;             Device\RL78\Devicefile ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_tau_u
    5     5                      ;             ser.c -oDebug -_msgoff -nq -i..\RSKRL78L13\ADC_Repeat\cg_src -v -
    6     6                      ;             w2 -zps -mm -mi0 -saDebug -li -no -g2
    7     7                      ; In-file   : ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_tau_user.c
    8     8                      ; Asm-file  : Debug\r_cg_tau_user.asm
    9     9                      ; Para-file : 
   10    10                      
   11    11                      $PROCESSOR(F10WMG)
   12    12                      $DEBUG
   13    13                      $NODEBUGA
   14    14                      $KANJICODE SJIS
   15    15                      $TOL_INF        03FH, 0260H, 02H, 04000H, 00H, 00H, 00H
   16    16                      
   17    17                      $DGS    FIL_NAM, .file,         042H,   0FFFEH, 03FH,   067H,   01H,    00H
   18    18                      $DGS    AUX_FIL, r_cg_tau_user.c
   19    19                      $DGS    MOD_NAM, r_cg_tau_user, 00H,    0FFFEH, 00H,    077H,   00H,    00H
   20    20                      $DGS    SEC_NAM, @@BITS,        U,      U,      00H,    078H,   00H,    00H
   21    21                      $DGS    SEC_NAM, @@CNST,        U,      U,      00H,    078H,   00H,    00H
   22    22                      $DGS    SEC_NAM, @@R_INIT,      U,      U,      00H,    078H,   00H,    00H
   23    23                      $DGS    SEC_NAM, @@INIT,        U,      U,      00H,    078H,   00H,    00H
   24    24                      $DGS    SEC_NAM, @@DATA,        U,      U,      00H,    078H,   00H,    00H
   25    25                      $DGS    SEC_NAM, @@R_INIS,      U,      U,      00H,    078H,   00H,    00H
   26    26                      $DGS    SEC_NAM, @@INIS,        U,      U,      00H,    078H,   00H,    00H
   27    27                      $DGS    SEC_NAM, @@DATS,        U,      U,      00H,    078H,   00H,    00H
   28    28                      $DGS    SEC_NAM, @@CNSTL,       U,      U,      00H,    078H,   00H,    00H
   29    29                      $DGS    SEC_NAM, @@RLINIT,      U,      U,      00H,    078H,   00H,    00H
   30    30                      $DGS    SEC_NAM, @@INITL,       U,      U,      00H,    078H,   00H,    00H
   31    31                      $DGS    SEC_NAM, @@DATAL,       U,      U,      00H,    078H,   00H,    00H
   32    32                      $DGS    SEC_NAM, @@CALT,        U,      U,      00H,    078H,   00H,    00H
   33    33                      $DGS    SEC_NAM, @@CODE,        U,      U,      00H,    078H,   00H,    00H
   34    34                      $DGS    SEC_NAM, @@CODEL,       U,      U,      00H,    078H,   00H,    00H
   35    35                      $DGS    SEC_NAM, @@BASE,        U,      U,      00H,    078H,   00H,    00H
   36    36                      $DGS    SEC_NAM, @@VECT20,      U,      U,      00H,    078H,   00H,    00H
   37    37                      $DGS    SEC_NAM, @@VECT32,      U,      U,      00H,    078H,   00H,    00H
   38    38                      $DGS    STA_SYM, _one_ms_delay_complete,        U,      U,      0100CH, 03H,    00H,    00H
   39    39                      $DGS    STA_SYM, _r_tau0_channel0_interrupt,    U,      U,      0E001H, 03H,    01H,    02H
   40    40                      $DGS    AUX_FUN, 00H,           U,      U,      01CH,   00H,    00H
   41    41                      $DGS    BEG_FUN, ??bf_r_tau0_channel0_interrupt,        U,      U,      00H,    065H,   01H,    00H
   42    42                      $DGS    AUX_BEG, 051H,          016H,   01CH
   43    43                      $DGS    END_FUN, ??ef_r_tau0_channel0_interrupt,        U,      U,      00H,    065H,   01H,    00H
   44    44                      $DGS    AUX_END, 0BH
   45    45                      $DGS    STA_SYM, _r_tau0_channel1_interrupt,    U,      U,      0E001H, 03H,    01H,    02H
   46    46                      $DGS    AUX_FUN, 00H,           U,      U,      022H,   00H,    00H
   47    47                      $DGS    BEG_FUN, ??bf_r_tau0_channel1_interrupt,        U,      U,      00H,    065H,   01H,    00H
   48    48                      $DGS    AUX_BEG, 063H,          016H,   022H
   49    49                      $DGS    END_FUN, ??ef_r_tau0_channel1_interrupt,        U,      U,      00H,    065H,   01H,    00H
   50    50                      $DGS    AUX_END, 0BH
   51    51                      $DGS    STA_SYM, _r_tau0_channel2_interrupt,    U,      U,      0E001H, 03H,    01H,    02H
   52    52                      $DGS    AUX_FUN, 00H,           U,      U,      02BH,   00H,    00H
   53    53                      $DGS    BEG_FUN, ??bf_r_tau0_channel2_interrupt,        U,      U,      00H,    065H,   01H,    00H
   54    54                      $DGS    AUX_BEG, 076H,          0CH,    02BH
   55    55                      $DGS    AUT_VAR, _a,            05H,    0FFFFH, 0CH,    01H,    00H,    00H
   56    56                      $DGS    AUT_VAR, _lcd_buffer,   01H,    0FFFFH, 02H,    01H,    01H,    03H
   57    57                      $DGS    AUX_STR, 00H,           00H,    04H,    04H,    00H,    00H,    00H,    00H
   58    58                      $DGS    END_FUN, ??ef_r_tau0_channel2_interrupt,        U,      U,      00H,    065H,   01H,    00H
   59    59                      $DGS    AUX_END, 0DH
   60    60                      $DGS    STA_SYM, _r_tau0_channel3_interrupt,    U,      U,      0E001H, 03H,    01H,    02H
   61    61                      $DGS    AUX_FUN, 00H,           U,      U,      031H,   00H,    00H
   62    62                      $DGS    BEG_FUN, ??bf_r_tau0_channel3_interrupt,        U,      U,      00H,    065H,   01H,    00H
   63    63                      $DGS    AUX_BEG, 08AH,          00H,    031H
   64    64                      $DGS    END_FUN, ??ef_r_tau0_channel3_interrupt,        U,      U,      00H,    065H,   01H,    00H
   65    65                      $DGS    AUX_END, 05H
   66    66                      $DGS    GLV_SYM, _R_TAU_MsDelay,        U,      U,      01H,    026H,   01H,    02H
   67    67                      $DGS    AUX_FUN, 00H,           U,      U,      041H,   01H,    00H
   68    68                      $DGS    BEG_FUN, ??bf_R_TAU_MsDelay,    U,      U,      00H,    065H,   01H,    00H
   69    69                      $DGS    AUX_BEG, 098H,          04H,    037H
   70    70                      $DGS    FUN_ARG, _millisec,     02H,    0FFFFH, 0500DH, 09H,    00H,    00H
   71    71                      $DGS    AUT_VAR, _ms_count,     00H,    0FFFFH, 0DH,    01H,    00H,    00H
   72    72                      $DGS    BEG_BLK, ??bb00_R_TAU_MsDelay,  U,      U,      00H,    064H,   01H,    00H
   73    73                      $DGS    AUX_BEG, 05H,           00H,    039H
   74    74                      $DGS    BEG_BLK, ??bb01_R_TAU_MsDelay,  U,      U,      00H,    064H,   01H,    00H
   75    75                      $DGS    AUX_BEG, 08H,           00H,    00H
   76    76                      $DGS    END_BLK, ??eb01_R_TAU_MsDelay,  U,      U,      00H,    064H,   01H,    00H
   77    77                      $DGS    AUX_END, 0AH
   78    78                      $DGS    END_BLK, ??eb00_R_TAU_MsDelay,  U,      U,      00H,    064H,   01H,    00H
   79    79                      $DGS    AUX_END, 0EH
   80    80                      $DGS    END_FUN, ??ef_R_TAU_MsDelay,    U,      U,      00H,    065H,   01H,    00H
   81    81                      $DGS    AUX_END, 011H
   82    82                      $DGS    STA_SYM, L0007,         ?L0007, U,      05002H, 03H,    00H,    03H
   83    83                      $DGS    GLV_SYM, _@vect20,      U,      U,      00H,    026H,   00H,    00H
   84    84                      $DGS    GLV_SYM, _@vect32,      U,      U,      00H,    026H,   00H,    00H
   85    85                      $DGS    GLV_SYM, _@vect34,      U,      U,      00H,    026H,   00H,    00H
   86    86                      $DGS    GLV_SYM, _@vect36,      U,      U,      00H,    026H,   00H,    00H
   87    87                      $DGS    GLV_SYM, _cnt_tm2_int,  U,      U,      0FH,    026H,   00H,    00H
   88    88                      $DGS    GLV_SYM, _R_TAU0_Channel3_Start,        U,      U,      01H,    02H,    01H,    02H
   89    89                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   90    90                      $DGS    GLV_SYM, _R_TAU0_Channel3_Stop, U,      U,      01H,    02H,    01H,    02H
   91    91                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   92    92                      $DGS    GLV_SYM, _@RTARG6,      U,      U,      00H,    02H,    00H,    00H
   93    93                      $DGS    GLV_SYM, _@RTARG4,      U,      U,      00H,    02H,    00H,    00H
   94    94                      $DGS    GLV_SYM, _@RTARG2,      U,      U,      00H,    02H,    00H,    00H
   95    95                      $DGS    GLV_SYM, _@RTARG0,      U,      U,      00H,    02H,    00H,    00H
   96    96                      $DGS    GLV_SYM, _@SEGDE,       U,      U,      00H,    02H,    00H,    00H
   97    97                      $DGS    GLV_SYM, _@SEGAX,       U,      U,      00H,    02H,    00H,    00H
   98    98                      $DGS    GLV_SYM, _R_TAU0_Channel0_Stop, U,      U,      01H,    02H,    01H,    02H
   99    99                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
  100   100                      $DGS    GLV_SYM, _SwitchDebounceIsrCallback,    U,      U,      01H,    02H,    01H,    02H
  101   101                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
  102   102                      $DGS    GLV_SYM, _R_TAU0_Channel1_Stop, U,      U,      01H,    02H,    01H,    02H
  103   103                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
  104   104                      
  105   105                              EXTRN   _@RTARG6
  106   106                              EXTRN   _@RTARG4
  107   107                              EXTRN   _@RTARG2
  108   108                              EXTRN   _@RTARG0
  109   109                              EXTRN   _@SEGDE
  110   110                              EXTRN   _@SEGAX
  111   111                              EXTRN   _R_TAU0_Channel0_Stop
  112   112                              EXTRN   _SwitchDebounceIsrCallback
  113   113                              EXTRN   _R_TAU0_Channel1_Stop
  114   114                              EXTRN   _R_TAU0_Channel3_Start
  115   115                              EXTRN   _R_TAU0_Channel3_Stop
  116   116                              PUBLIC  _cnt_tm2_int
  117   117                              PUBLIC  _R_TAU_MsDelay
  118   118                              PUBLIC  _@vect20
  119   119                              PUBLIC  _@vect32
  120   120                              PUBLIC  _@vect34
  121   121                              PUBLIC  _@vect36
  122   122                      
  123   123 -----                @@BITS  BSEG
  124   124                      
  125   125 -----                @@CNST  CSEG    MIRRORP
  126   126 00000                ?L0007:
  127   127 00000  303030                DB      '000'
  128   128 00003  00                    DB      00H
  129   129                      
  130   130 -----                @@R_INIT        CSEG    UNIT64KP
  131   131 00000  00                    DB      00H     ; 0
  132   132 00001  00                    DB      (1)
  133   133                      
  134   134 -----                @@INIT  DSEG    BASEP
  135   135 00000                _one_ms_delay_complete: DS      (1)
  136   136 00001                        DS      (1)
  137   137                      
  138   138 -----                @@DATA  DSEG    BASEP
  139   139 00000                _cnt_tm2_int:   DS      (4)
  140   140                      
  141   141 -----                @@R_INIS        CSEG    UNIT64KP
  142   142                      
  143   143 -----                @@INIS  DSEG    SADDRP
  144   144                      
  145   145 -----                @@DATS  DSEG    SADDRP
  146   146                      
  147   147 -----                @@CNSTL CSEG    PAGE64KP
  148   148                      
  149   149 -----                @@RLINIT        CSEG    UNIT64KP
  150   150                      
  151   151 -----                @@INITL DSEG    UNIT64KP
  152   152                      
  153   153 -----                @@DATAL DSEG    UNIT64KP
  154   154                      
  155   155 -----                @@CALT  CSEG    CALLT0
  156   156                      
  157   157                      ; line     1 : /***************************************************************
  158   158                      ;              ********************************************************
  159   159                      ; line     2 : * DISCLAIMER
  160   160                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  161   161                      ;              nd is only 
  162   162                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  163   163                      ;              orized. This 
  164   164                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  165   165                      ;              otected under 
  166   166                      ; line     6 : * all applicable laws, including copyright laws.
  167   167                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  168   168                      ;              IES REGARDING 
  169   169                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  170   170                      ;              G BUT NOT 
  171   171                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  172   172                      ;              ULAR PURPOSE 
  173   173                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  174   174                      ;              AIMED.
  175   175                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  176   176                      ;               RENESAS 
  177   177                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  178   178                      ;              ALL BE LIABLE 
  179   179                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  180   180                      ;               DAMAGES FOR 
  181   181                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  182   182                      ;              FILIATES HAVE 
  183   183                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  184   184                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  185   185                      ;               this software 
  186   186                      ; line    17 : * and to discontinue the availability of this software.  By usin
  187   187                      ;              g this software, 
  188   188                      ; line    18 : * you agree to the additional terms and conditions found by acce
  189   189                      ;              ssing the 
  190   190                      ; line    19 : * following link:
  191   191                      ; line    20 : * http://www.renesas.com/disclaimer
  192   192                      ; line    21 : *
  193   193                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  194   194                      ;               reserved.
  195   195                      ; line    23 : ****************************************************************
  196   196                      ;              *******************************************************/
  197   197                      ; line    24 : 
  198   198                      ; line    25 : /***************************************************************
  199   199                      ;              ********************************************************
  200   200                      ; line    26 : * File Name    : r_cg_macrodriver.h
  201   201                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  202   202                      ;              ]
  203   203                      ; line    28 : * Device(s)    : R5F10WMG
  204   204                      ; line    29 : * Tool-Chain   : CA78K0R
  205   205                      ; line    30 : * Description  : This file implements general head file.
  206   206                      ; line    31 : * Creation Date: 05-Jun-21
  207   207                      ; line    32 : ****************************************************************
  208   208                      ;              *******************************************************/
  209   209                      ; line    33 : #ifndef MODULEID_H
  210   210                      ; line    34 : #define MODULEID_H
  211   211                      ; line    35 : /***************************************************************
  212   212                      ;              ********************************************************
  213   213                      ; line    36 : Includes
  214   214                      ; line    37 : ****************************************************************
  215   215                      ;              *******************************************************/
  216   216                      ; line    38 : #pragma sfr
  217   217                      ; line    39 : #pragma DI
  218   218                      ; line    40 : #pragma EI
  219   219                      ; line    41 : #pragma NOP
  220   220                      ; line    42 : #pragma HALT
  221   221                      ; line    43 : #pragma STOP
  222   222                      ; line    44 : 
  223   223                      ; line    45 : /***************************************************************
  224   224                      ;              ********************************************************
  225   225                      ; line    46 : Macro definitions (Register bit)
  226   226                      ; line    47 : ****************************************************************
  227   227                      ;              *******************************************************/
  228   228                      ; line    48 : 
  229   229                      ; line    49 : /***************************************************************
  230   230                      ;              ********************************************************
  231   231                      ; line    50 : Macro definitions
  232   232                      ; line    51 : ****************************************************************
  233   233                      ;              *******************************************************/
  234   234                      ; line    52 : #ifndef __TYPEDEF__
  235   235                      ; line    53 : /* Status list definition */
  236   236                      ; line    54 : #define MD_STATUSBASE        (0x00U)
  237   237                      ; line    55 : #define MD_OK                (MD_STATUSBASE + 0x00U) /* register
  238   238                      ;               setting OK */
  239   239                      ; line    56 : #define MD_SPT               (MD_STATUSBASE + 0x01U) /* IIC stop
  240   240                      ;               */
  241   241                      ; line    57 : #define MD_NACK              (MD_STATUSBASE + 0x02U) /* IIC no A
  242   242                      ;              CK */
  243   243                      ; line    58 : #define MD_BUSY1             (MD_STATUSBASE + 0x03U) /* busy 1 *
  244   244                      ;              /
  245   245                      ; line    59 : #define MD_BUSY2             (MD_STATUSBASE + 0x04U) /* busy 2 *
  246   246                      ;              /
  247   247                      ; line    60 : 
  248   248                      ; line    61 : /* Error list definition */
  249   249                      ; line    62 : #define MD_ERRORBASE         (0x80U)
  250   250                      ; line    63 : #define MD_ERROR             (MD_ERRORBASE + 0x00U)  /* error */
  251   251                      ; line    64 : #define MD_ARGERROR          (MD_ERRORBASE + 0x01U)  /* error ag
  252   252                      ;              rument input error */
  253   253                      ; line    65 : #define MD_ERROR1            (MD_ERRORBASE + 0x02U)  /* error 1 
  254   254                      ;              */
  255   255                      ; line    66 : #define MD_ERROR2            (MD_ERRORBASE + 0x03U)  /* error 2 
  256   256                      ;              */
  257   257                      ; line    67 : #define MD_ERROR3            (MD_ERRORBASE + 0x04U)  /* error 3 
  258   258                      ;              */
  259   259                      ; line    68 : #define MD_ERROR4            (MD_ERRORBASE + 0x05U)  /* error 4 
  260   260                      ;              */
  261   261                      ; line    69 : #define MD_ERROR5            (MD_ERRORBASE + 0x06U)  /* error 5 
  262   262                      ;              */
  263   263                      ; line    70 : #endif
  264   264                      ; line    71 : 
  265   265                      ; line    72 : /***************************************************************
  266   266                      ;              ********************************************************
  267   267                      ; line    73 : Typedef definitions
  268   268                      ; line    74 : ****************************************************************
  269   269                      ;              *******************************************************/
  270   270                      ; line    75 : #ifndef __TYPEDEF__
  271   271                      ; line    76 : typedef signed char         int8_t;
  272   272                      ; line    77 : typedef unsigned char       uint8_t;
  273   273                      ; line    78 : typedef signed short        int16_t;
  274   274                      ; line    79 : typedef unsigned short      uint16_t;
  275   275                      ; line    80 : typedef signed long         int32_t;
  276   276                      ; line    81 : typedef unsigned long       uint32_t;
  277   277                      ; line    82 : typedef unsigned short      MD_STATUS;
  278   278                      ; line     1 : /***************************************************************
  279   279                      ;              ********************************************************
  280   280                      ; line     2 : * DISCLAIMER
  281   281                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  282   282                      ;              nd is only 
  283   283                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  284   284                      ;              orized. This 
  285   285                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  286   286                      ;              otected under 
  287   287                      ; line     6 : * all applicable laws, including copyright laws.
  288   288                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  289   289                      ;              IES REGARDING 
  290   290                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  291   291                      ;              G BUT NOT 
  292   292                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  293   293                      ;              ULAR PURPOSE 
  294   294                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  295   295                      ;              AIMED.
  296   296                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  297   297                      ;               RENESAS 
  298   298                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  299   299                      ;              ALL BE LIABLE 
  300   300                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  301   301                      ;               DAMAGES FOR 
  302   302                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  303   303                      ;              FILIATES HAVE 
  304   304                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  305   305                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  306   306                      ;               this software 
  307   307                      ; line    17 : * and to discontinue the availability of this software.  By usin
  308   308                      ;              g this software, 
  309   309                      ; line    18 : * you agree to the additional terms and conditions found by acce
  310   310                      ;              ssing the 
  311   311                      ; line    19 : * following link:
  312   312                      ; line    20 : * http://www.renesas.com/disclaimer
  313   313                      ; line    21 : *
  314   314                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  315   315                      ;               reserved.
  316   316                      ; line    23 : ****************************************************************
  317   317                      ;              *******************************************************/
  318   318                      ; line    24 : 
  319   319                      ; line    25 : /***************************************************************
  320   320                      ;              ********************************************************
  321   321                      ; line    26 : * File Name    : r_cg_tau.h
  322   322                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  323   323                      ;              ]
  324   324                      ; line    28 : * Device(s)    : R5F10WMG
  325   325                      ; line    29 : * Tool-Chain   : CA78K0R
  326   326                      ; line    30 : * Description  : This file implements device driver for TAU modu
  327   327                      ;              le.
  328   328                      ; line    31 : * Creation Date: 05-Jun-21
  329   329                      ; line    32 : ****************************************************************
  330   330                      ;              *******************************************************/
  331   331                      ; line    33 : #ifndef TAU_H
  332   332                      ; line    34 : #define TAU_H
  333   333                      ; line    35 : 
  334   334                      ; line    36 : /***************************************************************
  335   335                      ;              ********************************************************
  336   336                      ; line    37 : Macro definitions (Register bit)
  337   337                      ; line    38 : ****************************************************************
  338   338                      ;              *******************************************************/
  339   339                      ; line    39 : /*
  340   340                      ; line    40 :     Peripheral Enable Register 0 (PER0)
  341   341                      ; line    41 : */
  342   342                      ; line    42 : /* Control of timer array unit 0 input clock (TAU0EN) */
  343   343                      ; line    43 : #define _00_TAU0_CLOCK_STOP                     (0x00U) /* stops
  344   344                      ;               supply of input clock */
  345   345                      ; line    44 : #define _01_TAU0_CLOCK_SUPPLY                   (0x01U) /* suppl
  346   346                      ;              ies input clock */
  347   347                      ; line    45 : 
  348   348                      ; line    46 : /*
  349   349                      ; line    47 :     Timer Clock Select Register m (TPSm)
  350   350                      ; line    48 : */
  351   351                      ; line    49 : /* Operating mode and clear mode selection (PRSm03 - PRSm00) */
  352   352                      ; line    50 : #define _0000_TAU_CKM0_fCLK_0                   (0x0000U) /* ckm
  353   353                      ;              0 - fCLK */
  354   354                      ; line    51 : #define _0001_TAU_CKM0_fCLK_1                   (0x0001U) /* ckm
  355   355                      ;              0 - fCLK/2^1 */
  356   356                      ; line    52 : #define _0002_TAU_CKM0_fCLK_2                   (0x0002U) /* ckm
  357   357                      ;              0 - fCLK/2^2 */
  358   358                      ; line    53 : #define _0003_TAU_CKM0_fCLK_3                   (0x0003U) /* ckm
  359   359                      ;              0 - fCLK/2^3 */
  360   360                      ; line    54 : #define _0004_TAU_CKM0_fCLK_4                   (0x0004U) /* ckm
  361   361                      ;              0 - fCLK/2^4 */
  362   362                      ; line    55 : #define _0005_TAU_CKM0_fCLK_5                   (0x0005U) /* ckm
  363   363                      ;              0 - fCLK/2^5 */
  364   364                      ; line    56 : #define _0006_TAU_CKM0_fCLK_6                   (0x0006U) /* ckm
  365   365                      ;              0 - fCLK/2^6 */
  366   366                      ; line    57 : #define _0007_TAU_CKM0_fCLK_7                   (0x0007U) /* ckm
  367   367                      ;              0 - fCLK/2^7 */
  368   368                      ; line    58 : #define _0008_TAU_CKM0_fCLK_8                   (0x0008U) /* ckm
  369   369                      ;              0 - fCLK/2^8 */
  370   370                      ; line    59 : #define _0009_TAU_CKM0_fCLK_9                   (0x0009U) /* ckm
  371   371                      ;              0 - fCLK/2^9 */
  372   372                      ; line    60 : #define _000A_TAU_CKM0_fCLK_10                  (0x000AU) /* ckm
  373   373                      ;              0 - fCLK/2^10 */
  374   374                      ; line    61 : #define _000B_TAU_CKM0_fCLK_11                  (0x000BU) /* ckm
  375   375                      ;              0 - fCLK/2^11 */
  376   376                      ; line    62 : #define _000C_TAU_CKM0_fCLK_12                  (0x000CU) /* ckm
  377   377                      ;              0 - fCLK/2^12 */
  378   378                      ; line    63 : #define _000D_TAU_CKM0_fCLK_13                  (0x000DU) /* ckm
  379   379                      ;              0 - fCLK/2^13 */
  380   380                      ; line    64 : #define _000E_TAU_CKM0_fCLK_14                  (0x000EU) /* ckm
  381   381                      ;              0 - fCLK/2^14 */
  382   382                      ; line    65 : #define _000F_TAU_CKM0_fCLK_15                  (0x000FU) /* ckm
  383   383                      ;              0 - fCLK/2^15 */
  384   384                      ; line    66 : /* Operating mode and clear mode selection (PRSm13 - PRSm10) */
  385   385                      ; line    67 : #define _0000_TAU_CKM1_fCLK_0                   (0x0000U) /* ckm
  386   386                      ;              1 - fCLK */
  387   387                      ; line    68 : #define _0010_TAU_CKM1_fCLK_1                   (0x0010U) /* ckm
  388   388                      ;              1 - fCLK/2^1 */
  389   389                      ; line    69 : #define _0020_TAU_CKM1_fCLK_2                   (0x0020U) /* ckm
  390   390                      ;              1 - fCLK/2^2 */
  391   391                      ; line    70 : #define _0030_TAU_CKM1_fCLK_3                   (0x0030U) /* ckm
  392   392                      ;              1 - fCLK/2^3 */
  393   393                      ; line    71 : #define _0040_TAU_CKM1_fCLK_4                   (0x0040U) /* ckm
  394   394                      ;              1 - fCLK/2^4 */
  395   395                      ; line    72 : #define _0050_TAU_CKM1_fCLK_5                   (0x0050U) /* ckm
  396   396                      ;              1 - fCLK/2^5 */
  397   397                      ; line    73 : #define _0060_TAU_CKM1_fCLK_6                   (0x0060U) /* ckm
  398   398                      ;              1 - fCLK/2^6 */
  399   399                      ; line    74 : #define _0070_TAU_CKM1_fCLK_7                   (0x0070U) /* ckm
  400   400                      ;              1 - fCLK/2^7 */
  401   401                      ; line    75 : #define _0080_TAU_CKM1_fCLK_8                   (0x0080U) /* ckm
  402   402                      ;              1 - fCLK/2^8 */
  403   403                      ; line    76 : #define _0090_TAU_CKM1_fCLK_9                   (0x0090U) /* ckm
  404   404                      ;              1 - fCLK/2^9 */
  405   405                      ; line    77 : #define _00A0_TAU_CKM1_fCLK_10                  (0x00A0U) /* ckm
  406   406                      ;              1 - fCLK/2^10 */
  407   407                      ; line    78 : #define _00B0_TAU_CKM1_fCLK_11                  (0x00B0U) /* ckm
  408   408                      ;              1 - fCLK/2^11 */
  409   409                      ; line    79 : #define _00C0_TAU_CKM1_fCLK_12                  (0x00C0U) /* ckm
  410   410                      ;              1 - fCLK/2^12 */
  411   411                      ; line    80 : #define _00D0_TAU_CKM1_fCLK_13                  (0x00D0U) /* ckm
  412   412                      ;              1 - fCLK/2^13 */
  413   413                      ; line    81 : #define _00E0_TAU_CKM1_fCLK_14                  (0x00E0U) /* ckm
  414   414                      ;              1 - fCLK/2^14 */
  415   415                      ; line    82 : #define _00F0_TAU_CKM1_fCLK_15                  (0x00F0U) /* ckm
  416   416                      ;              1 - fCLK/2^15 */
  417   417                      ; line    83 : /* Operating mode and clear mode selection (PRSm21 - PRSm20) */
  418   418                      ; line    84 : #define _0000_TAU_CKM2_fCLK_1                   (0x0000U) /* ckm
  419   419                      ;              2 - fCLK/2^1 */
  420   420                      ; line    85 : #define _0100_TAU_CKM2_fCLK_2                   (0x0100U) /* ckm
  421   421                      ;              2 - fCLK/2^2 */
  422   422                      ; line    86 : #define _0200_TAU_CKM2_fCLK_4                   (0x0200U) /* ckm
  423   423                      ;              2 - fCLK/2^4 */
  424   424                      ; line    87 : #define _0300_TAU_CKM2_fCLK_6                   (0x0300U) /* ckm
  425   425                      ;              2 - fCLK/2^6 */
  426   426                      ; line    88 : /* Operating mode and clear mode selection (PRSm31 - PRSm30) */
  427   427                      ; line    89 : #define _0000_TAU_CKM3_fCLK_8                   (0x0000U) /* ckm
  428   428                      ;              3 - fCLK/2^8 */
  429   429                      ; line    90 : #define _1000_TAU_CKM3_fCLK_10                  (0x1000U) /* ckm
  430   430                      ;              3 - fCLK/2^10 */
  431   431                      ; line    91 : #define _2000_TAU_CKM3_fCLK_12                  (0x2000U) /* ckm
  432   432                      ;              3 - fCLK/2^12 */
  433   433                      ; line    92 : #define _3000_TAU_CKM3_fCLK_14                  (0x3000U) /* ckm
  434   434                      ;              3 - fCLK/2^14 */
  435   435                      ; line    93 : 
  436   436                      ; line    94 : /*
  437   437                      ; line    95 :     Timer Mode Register mn (TMRmn)
  438   438                      ; line    96 : */
  439   439                      ; line    97 : /* Selection of macro clock (MCK) of channel n (CKSmn1 - CKSmn0)
  440   440                      ;               */
  441   441                      ; line    98 : #define _0000_TAU_CLOCK_SELECT_CKM0             (0x0000U) /* ope
  442   442                      ;              ration clock CK0 set by PRS register */ 
  443   443                      ; line    99 : #define _8000_TAU_CLOCK_SELECT_CKM1             (0x8000U) /* ope
  444   444                      ;              ration clock CK1 set by PRS register */
  445   445                      ; line   100 : #define _4000_TAU_CLOCK_SELECT_CKM2             (0x4000U) /* ope
  446   446                      ;              ration clock CK2 set by PRS register */
  447   447                      ; line   101 : #define _C000_TAU_CLOCK_SELECT_CKM3             (0xC000U) /* ope
  448   448                      ;              ration clock CK3 set by PRS register */
  449   449                      ; line   102 : /* Selection of count clock (CCK) of channel n (CCSmn) */
  450   450                      ; line   103 : #define _0000_TAU_CLOCK_MODE_CKS                (0x0000U) /* mac
  451   451                      ;              ro clock MCK specified by CKSmn bit */  
  452   452                      ; line   104 : #define _1000_TAU_CLOCK_MODE_TIMN               (0x1000U) /* val
  453   453                      ;              id edge of input signal input from TImn pin */
  454   454                      ; line   105 : /* Selection of slave/master of channel n (MASTERmn) */
  455   455                      ; line   106 : #define _0000_TAU_COMBINATION_SLAVE             (0x0000U) /* ope
  456   456                      ;              rates as slave channel */
  457   457                      ; line   107 : #define _0800_TAU_COMBINATION_MASTER            (0x0800U) /* ope
  458   458                      ;              rates as master channel */
  459   459                      ; line   108 : /* Operation explanation of channel 1 or 3 (SPLIT) */
  460   460                      ; line   109 : #define _0000_TAU_16BITS_MODE                   (0x0000U) /* ope
  461   461                      ;              rates as 16 bits timer */  
  462   462                      ; line   110 : #define _0800_TAU_8BITS_MODE                    (0x0800U) /* ope
  463   463                      ;              rates as 8 bits timer */
  464   464                      ; line   111 : /* Setting of start trigger or capture trigger of channel n (STS
  465   465                      ;              mn2 - STSmn0) */
  466   466                      ; line   112 : #define _0000_TAU_TRIGGER_SOFTWARE              (0x0000U) /* onl
  467   467                      ;              y software trigger start is valid */
  468   468                      ; line   113 : #define _0100_TAU_TRIGGER_TIMN_VALID            (0x0100U) /* TIm
  469   469                      ;              n input edge is used as a start/capture trigger */
  470   470                      ; line   114 : #define _0200_TAU_TRIGGER_TIMN_BOTH             (0x0200U) /* TIm
  471   471                      ;              n input edges are used as a start/capture trigger */
  472   472                      ; line   115 : #define _0400_TAU_TRIGGER_MASTER_INT            (0x0400U) /* int
  473   473                      ;              errupt signal of the master channel is used */
  474   474                      ; line   116 : /* Selection of TImn pin input valid edge (CISmn1 - CISmn0) */
  475   475                      ; line   117 : #define _0000_TAU_TIMN_EDGE_FALLING             (0x0000U) /* fal
  476   476                      ;              ling edge */
  477   477                      ; line   118 : #define _0040_TAU_TIMN_EDGE_RISING              (0x0040U) /* ris
  478   478                      ;              ing edge */
  479   479                      ; line   119 : #define _0080_TAU_TIMN_EDGE_BOTH_LOW            (0x0080U) /* bot
  480   480                      ;              h edges (when low-level width is measured) */
  481   481                      ; line   120 : #define _00C0_TAU_TIMN_EDGE_BOTH_HIGH           (0x00C0U) /* bot
  482   482                      ;              h edges (when high-level width is measured) */
  483   483                      ; line   121 : /* Operation mode of channel n (MDmn3 - MDmn0) */
  484   484                      ; line   122 : #define _0000_TAU_MODE_INTERVAL_TIMER           (0x0000U) /* int
  485   485                      ;              erval timer mode */
  486   486                      ; line   123 : #define _0004_TAU_MODE_CAPTURE                  (0x0004U) /* cap
  487   487                      ;              ture mode */
  488   488                      ; line   124 : #define _0006_TAU_MODE_EVENT_COUNT              (0x0006U) /* eve
  489   489                      ;              nt counter mode */
  490   490                      ; line   125 : #define _0008_TAU_MODE_ONE_COUNT                (0x0008U) /* one
  491   491                      ;               count mode */
  492   492                      ; line   126 : #define _000C_TAU_MODE_HIGHLOW_MEASURE          (0x000CU) /* hig
  493   493                      ;              h-/low-level width measurement mode */
  494   494                      ; line   127 : #define _0001_TAU_MODE_PWM_MASTER               (0x0001U) /* PWM
  495   495                      ;               function (master channel) mode */
  496   496                      ; line   128 : #define _0009_TAU_MODE_PWM_SLAVE                (0x0009U) /* PWM
  497   497                      ;               function (slave channel) mode */
  498   498                      ; line   129 : #define _0008_TAU_MODE_ONESHOT                  (0x0008U) /* one
  499   499                      ;              -shot pulse output mode */
  500   500                      ; line   130 : /* Setting of starting counting and interrupt (MDmn0) */
  501   501                      ; line   131 : #define _0000_TAU_START_INT_UNUSED              (0x0000U) /* int
  502   502                      ;              errupt is not generated when counting is started */
  503   503                      ; line   132 : #define _0001_TAU_START_INT_USED                (0x0001U) /* int
  504   504                      ;              errupt is generated when counting is started */
  505   505                      ; line   133 : 
  506   506                      ; line   134 : /*
  507   507                      ; line   135 :     Timer Status Register mn (TSRmn)
  508   508                      ; line   136 : */
  509   509                      ; line   137 : /* Counter overflow status of channel n (OVF) */
  510   510                      ; line   138 : #define _0000_TAU_OVERFLOW_NOT_OCCURS           (0x0000U) /* ove
  511   511                      ;              rflow does not occur */
  512   512                      ; line   139 : #define _0001_TAU_OVERFLOW_OCCURS               (0x0001U) /* ove
  513   513                      ;              rflow occurs */
  514   514                      ; line   140 : 
  515   515                      ; line   141 : /*
  516   516                      ; line   142 :     Timer Channel Enable Status Register m (TEm)
  517   517                      ; line   143 : */
  518   518                      ; line   144 : /* Indication of operation enable/stop status of channel 0 (TEm0
  519   519                      ;              ) */
  520   520                      ; line   145 : #define _0000_TAU_CH0_OPERATION_STOP            (0x0000U) /* ope
  521   521                      ;              ration is stopped */
  522   522                      ; line   146 : #define _0001_TAU_CH0_OPERATION_ENABLE          (0x0001U) /* ope
  523   523                      ;              ration is enabled */
  524   524                      ; line   147 : /* Indication of operation enable/stop status of channel 1 (TEm1
  525   525                      ;              ) */
  526   526                      ; line   148 : #define _0000_TAU_CH1_OPERATION_STOP            (0x0000U) /* ope
  527   527                      ;              ration is stopped */
  528   528                      ; line   149 : #define _0002_TAU_CH1_OPERATION_ENABLE          (0x0002U) /* ope
  529   529                      ;              ration is enabled */
  530   530                      ; line   150 : /* Indication of operation enable/stop status of channel 2 (TEm2
  531   531                      ;              ) */
  532   532                      ; line   151 : #define _0000_TAU_CH2_OPERATION_STOP            (0x0000U) /* ope
  533   533                      ;              ration is stopped */
  534   534                      ; line   152 : #define _0004_TAU_CH2_OPERATION_ENABLE          (0x0004U) /* ope
  535   535                      ;              ration is enabled */
  536   536                      ; line   153 : /* Indication of operation enable/stop status of channel 3 (TEm3
  537   537                      ;              ) */
  538   538                      ; line   154 : #define _0000_TAU_CH3_OPERATION_STOP            (0x0000U) /* ope
  539   539                      ;              ration is stopped */
  540   540                      ; line   155 : #define _0008_TAU_CH3_OPERATION_ENABLE          (0x0008U) /* ope
  541   541                      ;              ration is enabled */
  542   542                      ; line   156 : /* Indication of operation enable/stop status of channel 4 (TEm4
  543   543                      ;              ) */
  544   544                      ; line   157 : #define _0000_TAU_CH4_OPERATION_STOP            (0x0000U) /* ope
  545   545                      ;              ration is stopped */
  546   546                      ; line   158 : #define _0010_TAU_CH4_OPERATION_ENABLE          (0x0010U) /* ope
  547   547                      ;              ration is enabled */
  548   548                      ; line   159 : /* Indication of operation enable/stop status of channel 5 (TEm5
  549   549                      ;              ) */
  550   550                      ; line   160 : #define _0000_TAU_CH5_OPERATION_STOP            (0x0000U) /* ope
  551   551                      ;              ration is stopped */
  552   552                      ; line   161 : #define _0020_TAU_CH5_OPERATION_ENABLE          (0x0020U) /* ope
  553   553                      ;              ration is enabled */
  554   554                      ; line   162 : /* Indication of operation enable/stop status of channel 6 (TEm6
  555   555                      ;              ) */
  556   556                      ; line   163 : #define _0000_TAU_CH6_OPERATION_STOP            (0x0000U) /* ope
  557   557                      ;              ration is stopped */
  558   558                      ; line   164 : #define _0040_TAU_CH6_OPERATION_ENABLE          (0x0040U) /* ope
  559   559                      ;              ration is enabled */
  560   560                      ; line   165 : /* Indication of operation enable/stop status of channel 7 (TEm7
  561   561                      ;              ) */
  562   562                      ; line   166 : #define _0000_TAU_CH7_OPERATION_STOP            (0x0000U) /* ope
  563   563                      ;              ration is stopped */
  564   564                      ; line   167 : #define _0080_TAU_CH7_OPERATION_ENABLE          (0x0080U) /* ope
  565   565                      ;              ration is enabled */
  566   566                      ; line   168 : /* Indication of operation enable/stop status of channel 1 highe
  567   567                      ;              r 8 bits (TEHm1) */
  568   568                      ; line   169 : #define _0000_TAU_CH1_H8_OPERATION_STOP         (0x0000U) /* ope
  569   569                      ;              ration is stopped */
  570   570                      ; line   170 : #define _0200_TAU_CH1_H8_OPERATION_ENABLE       (0x0200U) /* ope
  571   571                      ;              ration is enabled */
  572   572                      ; line   171 : /* Indication of operation enable/stop status of channel 3 highe
  573   573                      ;              r 8 bits (TEHm3) */
  574   574                      ; line   172 : #define _0000_TAU_CH3_H8_OPERATION_STOP         (0x0000U) /* ope
  575   575                      ;              ration is stopped */
  576   576                      ; line   173 : #define _0800_TAU_CH3_H8_OPERATION_ENABLE       (0x0800U) /* ope
  577   577                      ;              ration is enabled */
  578   578                      ; line   174 : 
  579   579                      ; line   175 : /*
  580   580                      ; line   176 :     Timer Channel Start Register m (TSm)
  581   581                      ; line   177 : */
  582   582                      ; line   178 : /* Operation enable (start) trigger of channel 0 (TSm0) */
  583   583                      ; line   179 : #define _0000_TAU_CH0_START_TRG_OFF             (0x0000U) /* no 
  584   584                      ;              trigger operation */
  585   585                      ; line   180 : #define _0001_TAU_CH0_START_TRG_ON              (0x0001U) /* ope
  586   586                      ;              ration is enabled (start trigger is generated) */
  587   587                      ; line   181 : /* Operation enable (start) trigger of channel 1 (TSm1) */
  588   588                      ; line   182 : #define _0000_TAU_CH1_START_TRG_OFF             (0x0000U) /* no 
  589   589                      ;              trigger operation */
  590   590                      ; line   183 : #define _0002_TAU_CH1_START_TRG_ON              (0x0002U) /* ope
  591   591                      ;              ration is enabled (start trigger is generated) */
  592   592                      ; line   184 : /* Operation enable (start) trigger of channel 2 (TSm2) */
  593   593                      ; line   185 : #define _0000_TAU_CH2_START_TRG_OFF             (0x0000U) /* no 
  594   594                      ;              trigger operation */
  595   595                      ; line   186 : #define _0004_TAU_CH2_START_TRG_ON              (0x0004U) /* ope
  596   596                      ;              ration is enabled (start trigger is generated) */
  597   597                      ; line   187 : /* Operation enable (start) trigger of channel 3 (TSm3) */
  598   598                      ; line   188 : #define _0000_TAU_CH3_START_TRG_OFF             (0x0000U) /* no 
  599   599                      ;              trigger operation */
  600   600                      ; line   189 : #define _0008_TAU_CH3_START_TRG_ON              (0x0008U) /* ope
  601   601                      ;              ration is enabled (start trigger is generated) */
  602   602                      ; line   190 : /* Operation enable (start) trigger of channel 4 (TSm4) */
  603   603                      ; line   191 : #define _0000_TAU_CH4_START_TRG_OFF             (0x0000U) /* no 
  604   604                      ;              trigger operation */
  605   605                      ; line   192 : #define _0010_TAU_CH4_START_TRG_ON              (0x0010U) /* ope
  606   606                      ;              ration is enabled (start trigger is generated) */
  607   607                      ; line   193 : /* Operation enable (start) trigger of channel 5 (TSm5) */
  608   608                      ; line   194 : #define _0000_TAU_CH5_START_TRG_OFF             (0x0000U) /* no 
  609   609                      ;              trigger operation */
  610   610                      ; line   195 : #define _0020_TAU_CH5_START_TRG_ON              (0x0020U) /* ope
  611   611                      ;              ration is enabled (start trigger is generated) */
  612   612                      ; line   196 : /* Operation enable (start) trigger of channel 6 (TSm6) */
  613   613                      ; line   197 : #define _0000_TAU_CH6_START_TRG_OFF             (0x0000U) /* no 
  614   614                      ;              trigger operation */
  615   615                      ; line   198 : #define _0040_TAU_CH6_START_TRG_ON              (0x0040U) /* ope
  616   616                      ;              ration is enabled (start trigger is generated) */
  617   617                      ; line   199 : /* Operation enable (start) trigger of channel 7 (TSm7) */
  618   618                      ; line   200 : #define _0000_TAU_CH7_START_TRG_OFF             (0x0000U) /* no 
  619   619                      ;              trigger operation */
  620   620                      ; line   201 : #define _0080_TAU_CH7_START_TRG_ON              (0x0080U) /* ope
  621   621                      ;              ration is enabled (start trigger is generated) */
  622   622                      ; line   202 : /* Operation enable (start) trigger of channel 1 higher 8 bits (
  623   623                      ;              TSHm1) */
  624   624                      ; line   203 : #define _0000_TAU_CH1_H8_START_TRG_OFF          (0x0000U) /* no 
  625   625                      ;              trigger operation */
  626   626                      ; line   204 : #define _0200_TAU_CH1_H8_START_TRG_ON           (0x0200U) /* ope
  627   627                      ;              ration is enabled (start trigger is generated) */
  628   628                      ; line   205 : /* Operation enable (start) trigger of channel 3 higher 8 bits (
  629   629                      ;              TSHm3) */
  630   630                      ; line   206 : #define _0000_TAU_CH3_H8_START_TRG_OFF          (0x0000U) /* no 
  631   631                      ;              trigger operation */
  632   632                      ; line   207 : #define _0800_TAU_CH3_H8_START_TRG_ON           (0x0800U) /* ope
  633   633                      ;              ration is enabled (start trigger is generated) */
  634   634                      ; line   208 : 
  635   635                      ; line   209 : /*
  636   636                      ; line   210 :     Timer Channel Stop Register m (TTm)
  637   637                      ; line   211 : */
  638   638                      ; line   212 : /* Operation stop trigger of channel 0 (TTm0) */
  639   639                      ; line   213 : #define _0000_TAU_CH0_STOP_TRG_OFF              (0x0000U) /* no 
  640   640                      ;              trigger operation */
  641   641                      ; line   214 : #define _0001_TAU_CH0_STOP_TRG_ON               (0x0001U) /* ope
  642   642                      ;              ration is stopped (stop trigger is generated) */
  643   643                      ; line   215 : /* Operation stop trigger of channel 1 (TTm1) */
  644   644                      ; line   216 : #define _0000_TAU_CH1_STOP_TRG_OFF              (0x0000U) /* no 
  645   645                      ;              trigger operation */
  646   646                      ; line   217 : #define _0002_TAU_CH1_STOP_TRG_ON               (0x0002U) /* ope
  647   647                      ;              ration is stopped (stop trigger is generated) */
  648   648                      ; line   218 : /* Operation stop trigger of channel 2 (TTm2) */
  649   649                      ; line   219 : #define _0000_TAU_CH2_STOP_TRG_OFF              (0x0000U) /* no 
  650   650                      ;              trigger operation */
  651   651                      ; line   220 : #define _0004_TAU_CH2_STOP_TRG_ON               (0x0004U) /* ope
  652   652                      ;              ration is stopped (stop trigger is generated) */
  653   653                      ; line   221 : /* Operation stop trigger of channel 3 (TTm3) */
  654   654                      ; line   222 : #define _0000_TAU_CH3_STOP_TRG_OFF              (0x0000U) /* no 
  655   655                      ;              trigger operation */
  656   656                      ; line   223 : #define _0008_TAU_CH3_STOP_TRG_ON               (0x0008U) /* ope
  657   657                      ;              ration is stopped (stop trigger is generated) */
  658   658                      ; line   224 : /* Operation stop trigger of channel 4 (TTm4) */
  659   659                      ; line   225 : #define _0000_TAU_CH4_STOP_TRG_OFF              (0x0000U) /* no 
  660   660                      ;              trigger operation */
  661   661                      ; line   226 : #define _0010_TAU_CH4_STOP_TRG_ON               (0x0010U) /* ope
  662   662                      ;              ration is stopped (stop trigger is generated) */
  663   663                      ; line   227 : /* Operation stop trigger of channel 5 (TTm5) */
  664   664                      ; line   228 : #define _0000_TAU_CH5_STOP_TRG_OFF              (0x0000U) /* no 
  665   665                      ;              trigger operation */
  666   666                      ; line   229 : #define _0020_TAU_CH5_STOP_TRG_ON               (0x0020U) /* ope
  667   667                      ;              ration is stopped (stop trigger is generated) */
  668   668                      ; line   230 : /* Operation stop trigger of channel 6 (TTm6) */
  669   669                      ; line   231 : #define _0000_TAU_CH6_STOP_TRG_OFF              (0x0000U) /* no 
  670   670                      ;              trigger operation */
  671   671                      ; line   232 : #define _0040_TAU_CH6_STOP_TRG_ON               (0x0040U) /* ope
  672   672                      ;              ration is stopped (stop trigger is generated) */
  673   673                      ; line   233 : /* Operation stop trigger of channel 7 (TTm7) */
  674   674                      ; line   234 : #define _0000_TAU_CH7_STOP_TRG_OFF              (0x0000U) /* no 
  675   675                      ;              trigger operation */
  676   676                      ; line   235 : #define _0080_TAU_CH7_STOP_TRG_ON               (0x0080U) /* ope
  677   677                      ;              ration is stopped (stop trigger is generated) */
  678   678                      ; line   236 : /* Operation stop trigger of channel 1 higher 8 bits (TTHm1) */
  679   679                      ; line   237 : #define _0000_TAU_CH1_H8_STOP_TRG_OFF           (0x0000U) /* no 
  680   680                      ;              trigger operation */
  681   681                      ; line   238 : #define _0200_TAU_CH1_H8_STOP_TRG_ON            (0x0200U) /* ope
  682   682                      ;              ration is stopped (stop trigger is generated) */
  683   683                      ; line   239 : /* Operation stop trigger of channel 3 higher 8 bits (TTHm3) */
  684   684                      ; line   240 : #define _0000_TAU_CH3_H8_STOP_TRG_OFF           (0x0000U) /* no 
  685   685                      ;              trigger operation */
  686   686                      ; line   241 : #define _0800_TAU_CH3_H8_STOP_TRG_ON            (0x0800U) /* ope
  687   687                      ;              ration is stopped (stop trigger is generated) */
  688   688                      ; line   242 : 
  689   689                      ; line   243 : /*
  690   690                      ; line   244 :     Timer Input Select Register m (TIS0)
  691   691                      ; line   245 : */
  692   692                      ; line   246 : /* Selection of timer input used with channel 1 (TIS02 - TIS00) 
  693   693                      ;              */
  694   694                      ; line   247 : #define _00_TAU_CH1_INPUT_TI01                  (0x00U) /* input
  695   695                      ;               signal of timer input pin (TI01) */
  696   696                      ; line   248 : #define _04_TAU_CH1_INPUT_fIL                   (0x04U) /* low-s
  697   697                      ;              peed on-chip oscillator clock (fIL) */
  698   698                      ; line   249 : #define _05_TAU_CH1_INPUT_fSUB                  (0x05U) /* subsy
  699   699                      ;              stem clock (fSUB) */
  700   700                      ; line   250 : 
  701   701                      ; line   251 : /*
  702   702                      ; line   252 :     A timer array unit and an output selection register (TOS)
  703   703                      ; line   253 : */
  704   704                      ; line   254 : /* Remote control carrier power output selection */
  705   705                      ; line   255 : #define _00_TAU_REMOTE_CONTROL_UNUSED           (0x00U) /* remot
  706   706                      ;              e control carrier power output invalidity */
  707   707                      ; line   256 : #define _01_TAU_REMOTE_CONTROL_USED             (0x01U) /* remot
  708   708                      ;              e control carrier power output effective */
  709   709                      ; line   257 : 
  710   710                      ; line   258 : /*
  711   711                      ; line   259 :     Timer Output Enable Register m (TOEm)
  712   712                      ; line   260 : */
  713   713                      ; line   261 : /* Timer output enable/disable of channel 0 (TOEm0) */
  714   714                      ; line   262 : #define _0001_TAU_CH0_OUTPUT_ENABLE             (0x0001U) /* the
  715   715                      ;               TOm0 operation enabled by count operation */
  716   716                      ; line   263 : #define _0000_TAU_CH0_OUTPUT_DISABLE            (0x0000U) /* the
  717   717                      ;               TOm0 operation stopped by count operation */
  718   718                      ; line   264 : /* Timer output enable/disable of channel 1 (TOEm1) */
  719   719                      ; line   265 : #define _0002_TAU_CH1_OUTPUT_ENABLE             (0x0002U) /* the
  720   720                      ;               TOm1 operation enabled by count operation */
  721   721                      ; line   266 : #define _0000_TAU_CH1_OUTPUT_DISABLE            (0x0000U) /* the
  722   722                      ;               TOm1 operation stopped by count operation */
  723   723                      ; line   267 : /* Timer output enable/disable of channel 2 (TOEm2) */
  724   724                      ; line   268 : #define _0004_TAU_CH2_OUTPUT_ENABLE             (0x0004U) /* the
  725   725                      ;               TOm2 operation enabled by count operation */
  726   726                      ; line   269 : #define _0000_TAU_CH2_OUTPUT_DISABLE            (0x0000U) /* the
  727   727                      ;               TOm2 operation stopped by count operation */
  728   728                      ; line   270 : /* Timer output enable/disable of channel 3 (TOEm3) */
  729   729                      ; line   271 : #define _0008_TAU_CH3_OUTPUT_ENABLE             (0x0008U) /* the
  730   730                      ;               TOm3 operation enabled by count operation */
  731   731                      ; line   272 : #define _0000_TAU_CH3_OUTPUT_DISABLE            (0x0000U) /* the
  732   732                      ;               TOm3 operation stopped by count operation */
  733   733                      ; line   273 : /* Timer output enable/disable of channel 4 (TOEm4) */
  734   734                      ; line   274 : #define _0010_TAU_CH4_OUTPUT_ENABLE             (0x0010U) /* the
  735   735                      ;               TOm4 operation enabled by count operation */
  736   736                      ; line   275 : #define _0000_TAU_CH4_OUTPUT_DISABLE            (0x0000U) /* the
  737   737                      ;               TOm4 operation stopped by count operation */
  738   738                      ; line   276 : /* Timer output enable/disable of channel 5 (TOEm5) */
  739   739                      ; line   277 : #define _0020_TAU_CH5_OUTPUT_ENABLE             (0x0020U) /* the
  740   740                      ;               TOm5 operation enabled by count operation */
  741   741                      ; line   278 : #define _0000_TAU_CH5_OUTPUT_DISABLE            (0x0000U) /* the
  742   742                      ;               TOm5 operation stopped by count operation */
  743   743                      ; line   279 : /* Timer output enable/disable of channel 6 (TOEm6) */
  744   744                      ; line   280 : #define _0040_TAU_CH6_OUTPUT_ENABLE             (0x0040U) /* the
  745   745                      ;               TOm6 operation enabled by count operation */
  746   746                      ; line   281 : #define _0000_TAU_CH6_OUTPUT_DISABLE            (0x0000U) /* the
  747   747                      ;               TOm6 operation stopped by count operation */
  748   748                      ; line   282 : /* Timer output enable/disable of channel 7 (TOEm7) */
  749   749                      ; line   283 : #define _0080_TAU_CH7_OUTPUT_ENABLE             (0x0080U) /* the
  750   750                      ;               TOm7 operation enabled by count operation */
  751   751                      ; line   284 : #define _0000_TAU_CH7_OUTPUT_DISABLE            (0x0000U) /* the
  752   752                      ;               TOm7 operation stopped by count operation */
  753   753                      ; line   285 : 
  754   754                      ; line   286 : /*
  755   755                      ; line   287 :     Timer Output Register m (TOm)
  756   756                      ; line   288 : */
  757   757                      ; line   289 : /* Timer output of channel 0 (TOm0) */
  758   758                      ; line   290 : #define _0000_TAU_CH0_OUTPUT_VALUE_0            (0x0000U) /* tim
  759   759                      ;              er output value is "0" */
  760   760                      ; line   291 : #define _0001_TAU_CH0_OUTPUT_VALUE_1            (0x0001U) /* tim
  761   761                      ;              er output value is "1" */
  762   762                      ; line   292 : /* Timer output of channel 1 (TOm1) */
  763   763                      ; line   293 : #define _0000_TAU_CH1_OUTPUT_VALUE_0            (0x0000U) /* tim
  764   764                      ;              er output value is "0" */
  765   765                      ; line   294 : #define _0002_TAU_CH1_OUTPUT_VALUE_1            (0x0002U) /* tim
  766   766                      ;              er output value is "1" */
  767   767                      ; line   295 : /* Timer output of channel 2 (TOm2) */
  768   768                      ; line   296 : #define _0000_TAU_CH2_OUTPUT_VALUE_0            (0x0000U) /* tim
  769   769                      ;              er output value is "0" */
  770   770                      ; line   297 : #define _0004_TAU_CH2_OUTPUT_VALUE_1            (0x0004U) /* tim
  771   771                      ;              er output value is "1" */
  772   772                      ; line   298 : /* Timer output of channel 3 (TOm3) */
  773   773                      ; line   299 : #define _0000_TAU_CH3_OUTPUT_VALUE_0            (0x0000U) /* tim
  774   774                      ;              er output value is "0" */
  775   775                      ; line   300 : #define _0008_TAU_CH3_OUTPUT_VALUE_1            (0x0008U) /* tim
  776   776                      ;              er output value is "1" */
  777   777                      ; line   301 : /* Timer output of channel 4 (TOm4) */
  778   778                      ; line   302 : #define _0000_TAU_CH4_OUTPUT_VALUE_0            (0x0000U) /* tim
  779   779                      ;              er output value is "0" */
  780   780                      ; line   303 : #define _0010_TAU_CH4_OUTPUT_VALUE_1            (0x0010U) /* tim
  781   781                      ;              er output value is "1" */
  782   782                      ; line   304 : /* Timer output of channel 5 (TOm5) */
  783   783                      ; line   305 : #define _0000_TAU_CH5_OUTPUT_VALUE_0            (0x0000U) /* tim
  784   784                      ;              er output value is "0" */
  785   785                      ; line   306 : #define _0020_TAU_CH5_OUTPUT_VALUE_1            (0x0020U) /* tim
  786   786                      ;              er output value is "1" */
  787   787                      ; line   307 : /* Timer output of channel 6 (TOm6) */
  788   788                      ; line   308 : #define _0000_TAU_CH6_OUTPUT_VALUE_0            (0x0000U) /* tim
  789   789                      ;              er output value is "0" */
  790   790                      ; line   309 : #define _0040_TAU_CH6_OUTPUT_VALUE_1            (0x0040U) /* tim
  791   791                      ;              er output value is "1" */
  792   792                      ; line   310 : /* Timer output of channel 7 (TOm7) */
  793   793                      ; line   311 : #define _0000_TAU_CH7_OUTPUT_VALUE_0            (0x0000U) /* tim
  794   794                      ;              er output value is "0" */
  795   795                      ; line   312 : #define _0080_TAU_CH7_OUTPUT_VALUE_1            (0x0080U) /* tim
  796   796                      ;              er output value is "1" */
  797   797                      ; line   313 : 
  798   798                      ; line   314 : /*
  799   799                      ; line   315 :     Timer Output Level Register 0 (TOLm)
  800   800                      ; line   316 : */
  801   801                      ; line   317 : /* Control of timer output level of channel 1 (TOLm1) */
  802   802                      ; line   318 : #define _0000_TAU_CH1_OUTPUT_LEVEL_H            (0x0000U) /* pos
  803   803                      ;              itive logic output (active-high) */
  804   804                      ; line   319 : #define _0002_TAU_CH1_OUTPUT_LEVEL_L            (0x0002U) /* inv
  805   805                      ;              erted output (active-low) */
  806   806                      ; line   320 : /* Control of timer output level of channel 2 (TOLm2) */
  807   807                      ; line   321 : #define _0000_TAU_CH2_OUTPUT_LEVEL_H            (0x0000U) /* pos
  808   808                      ;              itive logic output (active-high) */
  809   809                      ; line   322 : #define _0004_TAU_CH2_OUTPUT_LEVEL_L            (0x0004U) /* inv
  810   810                      ;              erted output (active-low) */
  811   811                      ; line   323 : /* Control of timer output level of channel 3 (TOLm3) */
  812   812                      ; line   324 : #define _0000_TAU_CH3_OUTPUT_LEVEL_H            (0x0000U) /* pos
  813   813                      ;              itive logic output (active-high) */
  814   814                      ; line   325 : #define _0008_TAU_CH3_OUTPUT_LEVEL_L            (0x0008U) /* inv
  815   815                      ;              erted output (active-low) */
  816   816                      ; line   326 : /* Control of timer output level of channel 4 (TOLm4) */
  817   817                      ; line   327 : #define _0000_TAU_CH4_OUTPUT_LEVEL_H            (0x0000U) /* pos
  818   818                      ;              itive logic output (active-high) */
  819   819                      ; line   328 : #define _0010_TAU_CH4_OUTPUT_LEVEL_L            (0x0010U) /* inv
  820   820                      ;              erted output (active-low) */
  821   821                      ; line   329 : /* Control of timer output level of channel 5 (TOLm5) */
  822   822                      ; line   330 : #define _0000_TAU_CH5_OUTPUT_LEVEL_H            (0x0000U) /* pos
  823   823                      ;              itive logic output (active-high) */
  824   824                      ; line   331 : #define _0020_TAU_CH5_OUTPUT_LEVEL_L            (0x0020U) /* inv
  825   825                      ;              erted output (active-low) */
  826   826                      ; line   332 : /* Control of timer output level of channel 6 (TOLm6) */
  827   827                      ; line   333 : #define _0000_TAU_CH6_OUTPUT_LEVEL_H            (0x0000U) /* pos
  828   828                      ;              itive logic output (active-high) */
  829   829                      ; line   334 : #define _0040_TAU_CH6_OUTPUT_LEVEL_L            (0x0040U) /* inv
  830   830                      ;              erted output (active-low) */
  831   831                      ; line   335 : /* Control of timer output level of channel 7 (TOLm7) */
  832   832                      ; line   336 : #define _0000_TAU_CH7_OUTPUT_LEVEL_H            (0x0000U) /* pos
  833   833                      ;              itive logic output (active-high) */
  834   834                      ; line   337 : #define _0080_TAU_CH7_OUTPUT_LEVEL_L            (0x0080U) /* inv
  835   835                      ;              erted output (active-low) */
  836   836                      ; line   338 : 
  837   837                      ; line   339 : /*
  838   838                      ; line   340 :     Timer Output Mode Register m (TOMm)
  839   839                      ; line   341 : */
  840   840                      ; line   342 : /* Control of timer output mode of channel 1 (TOMm1) */
  841   841                      ; line   343 : #define _0000_TAU_CH1_OUTPUT_TOGGLE             (0x0000U) /* tog
  842   842                      ;              gle operation mode */
  843   843                      ; line   344 : #define _0002_TAU_CH1_OUTPUT_COMBIN             (0x0002U) /* com
  844   844                      ;              bination operation mode */
  845   845                      ; line   345 : /* Control of timer output mode of channel 2 (TOMm2) */
  846   846                      ; line   346 : #define _0000_TAU_CH2_OUTPUT_TOGGLE             (0x0000U) /* tog
  847   847                      ;              gle operation mode */
  848   848                      ; line   347 : #define _0004_TAU_CH2_OUTPUT_COMBIN             (0x0004U) /* com
  849   849                      ;              bination operation mode */
  850   850                      ; line   348 : /* Control of timer output mode of channel 3 (TOMm3) */
  851   851                      ; line   349 : #define _0000_TAU_CH3_OUTPUT_TOGGLE             (0x0000U) /* tog
  852   852                      ;              gle operation mode */
  853   853                      ; line   350 : #define _0008_TAU_CH3_OUTPUT_COMBIN             (0x0008U) /* com
  854   854                      ;              bination operation mode */
  855   855                      ; line   351 : /* Control of timer output mode of channel 4 (TOMm4) */
  856   856                      ; line   352 : #define _0000_TAU_CH4_OUTPUT_TOGGLE             (0x0000U) /* tog
  857   857                      ;              gle operation mode */
  858   858                      ; line   353 : #define _0010_TAU_CH4_OUTPUT_COMBIN             (0x0010U) /* com
  859   859                      ;              bination operation mode */
  860   860                      ; line   354 : /* Control of timer output mode of channel 5 (TOMm5) */
  861   861                      ; line   355 : #define _0000_TAU_CH5_OUTPUT_TOGGLE             (0x0000U) /* tog
  862   862                      ;              gle operation mode */
  863   863                      ; line   356 : #define _0020_TAU_CH5_OUTPUT_COMBIN             (0x0020U) /* com
  864   864                      ;              bination operation mode */
  865   865                      ; line   357 : /* Control of timer output mode of channel 6 (TOMm6) */
  866   866                      ; line   358 : #define _0000_TAU_CH6_OUTPUT_TOGGLE             (0x0000U) /* tog
  867   867                      ;              gle operation mode */
  868   868                      ; line   359 : #define _0040_TAU_CH6_OUTPUT_COMBIN             (0x0040U) /* com
  869   869                      ;              bination operation mode */
  870   870                      ; line   360 : /* Control of timer output mode of channel 7 (TOMm7) */
  871   871                      ; line   361 : #define _0000_TAU_CH7_OUTPUT_TOGGLE             (0x0000U) /* tog
  872   872                      ;              gle operation mode */
  873   873                      ; line   362 : #define _0080_TAU_CH7_OUTPUT_COMBIN             (0x0080U) /* com
  874   874                      ;              bination operation mode */
  875   875                      ; line   363 : 
  876   876                      ; line   364 : /*
  877   877                      ; line   365 :     Input Switch Control Register (ISC)
  878   878                      ; line   366 : */
  879   879                      ; line   367 : /* Switching external interrupt (INTP0) input (ISC0) */
  880   880                      ; line   368 : #define _00_TAU_EXTINT_INTP0                    (0x00U) /* uses 
  881   881                      ;              the INTP0 pin as an external interrupt */
  882   882                      ; line   369 : #define _01_TAU_EXTINT_RXD0                     (0x01U) /* uses 
  883   883                      ;              RXD0 pin as an external interrupt */
  884   884                      ; line   370 : /* Switching channel 5 input of timer array unit (ISC1) */
  885   885                      ; line   371 : #define _00_TAU_CH7_TI07_INPUT                  (0x00U) /* input
  886   886                      ;               signal of the TI05 pin as a timer input */
  887   887                      ; line   372 : #define _02_TAU_CH7_RXD0_INPUT                  (0x02U) /* input
  888   888                      ;               signal of RxD0 pin is used as timer input */
  889   889                      ; line   373 : 
  890   890                      ; line   374 : /*
  891   891                      ; line   375 :     Noise Filter Enable Register 1 (NFEN1)
  892   892                      ; line   376 : */
  893   893                      ; line   377 : /* Enable/disable using noise filter of TI00 pin input signal (T
  894   894                      ;              NFEN00) */
  895   895                      ; line   378 : #define _00_TAU_CH0_NOISE_OFF                   (0x00U) /* noise
  896   896                      ;               filter OFF */
  897   897                      ; line   379 : #define _01_TAU_CH0_NOISE_ON                    (0x01U) /* noise
  898   898                      ;               filter ON */
  899   899                      ; line   380 : /* Enable/disable using noise filter of TI01 pin input signal (T
  900   900                      ;              NFEN01) */
  901   901                      ; line   381 : #define _00_TAU_CH1_NOISE_OFF                   (0x00U) /* noise
  902   902                      ;               filter OFF */
  903   903                      ; line   382 : #define _02_TAU_CH1_NOISE_ON                    (0x02U) /* noise
  904   904                      ;               filter ON */
  905   905                      ; line   383 : /* Enable/disable using noise filter of TI02 pin input signal (T
  906   906                      ;              NFEN02) */
  907   907                      ; line   384 : #define _00_TAU_CH2_NOISE_OFF                   (0x00U) /* noise
  908   908                      ;               filter OFF */
  909   909                      ; line   385 : #define _04_TAU_CH2_NOISE_ON                    (0x04U) /* noise
  910   910                      ;               filter ON */
  911   911                      ; line   386 : /* Enable/disable using noise filter of TI03 pin input signal (T
  912   912                      ;              NFEN03) */
  913   913                      ; line   387 : #define _00_TAU_CH3_NOISE_OFF                   (0x00U) /* noise
  914   914                      ;               filter OFF */
  915   915                      ; line   388 : #define _08_TAU_CH3_NOISE_ON                    (0x08U) /* noise
  916   916                      ;               filter ON */
  917   917                      ; line   389 : /* Enable/disable using noise filter of TI04 pin input signal (T
  918   918                      ;              NFEN04) */
  919   919                      ; line   390 : #define _00_TAU_CH4_NOISE_OFF                   (0x00U) /* noise
  920   920                      ;               filter OFF */
  921   921                      ; line   391 : #define _10_TAU_CH4_NOISE_ON                    (0x10U) /* noise
  922   922                      ;               filter ON */
  923   923                      ; line   392 : /* Enable/disable using noise filter of TI05 pin input signal (T
  924   924                      ;              NFEN05) */
  925   925                      ; line   393 : #define _00_TAU_CH5_NOISE_OFF                   (0x00U) /* noise
  926   926                      ;               filter OFF */
  927   927                      ; line   394 : #define _20_TAU_CH5_NOISE_ON                    (0x20U) /* noise
  928   928                      ;               filter ON */
  929   929                      ; line   395 : /* Enable/disable using noise filter of TI06 pin input signal (T
  930   930                      ;              NFEN06) */
  931   931                      ; line   396 : #define _00_TAU_CH6_NOISE_OFF                   (0x00U) /* noise
  932   932                      ;               filter OFF */
  933   933                      ; line   397 : #define _40_TAU_CH6_NOISE_ON                    (0x40U) /* noise
  934   934                      ;               filter ON */
  935   935                      ; line   398 : /* Enable/disable using noise filter of TI07 pin input signal (T
  936   936                      ;              NFEN07) */
  937   937                      ; line   399 : #define _00_TAU_CH7_NOISE_OFF                   (0x00U) /* noise
  938   938                      ;               filter OFF */
  939   939                      ; line   400 : #define _80_TAU_CH7_NOISE_ON                    (0x80U) /* noise
  940   940                      ;               filter ON */
  941   941                      ; line   401 : 
  942   942                      ; line   402 : /***************************************************************
  943   943                      ;              ********************************************************
  944   944                      ; line   403 : Macro definitions
  945   945                      ; line   404 : ****************************************************************
  946   946                      ;              *******************************************************/
  947   947                      ; line   405 : /* 16-bit timer data register 00 (TDR00) */
  948   948                      ; line   406 : #define _C34F_TAU_TDR00_VALUE                   (0xC34FU)
  949   949                      ; line   407 : /* Clock divisor for TAU0 channel 0 */
  950   950                      ; line   408 : #define TAU0_CHANNEL0_DIVISOR                   (8U)      /* fCL
  951   951                      ;              K/2^3 */
  952   952                      ; line   409 : /* 16-bit timer data register 01 (TDR01) */
  953   953                      ; line   410 : #define _F423_TAU_TDR01_VALUE                   (0xF423U)
  954   954                      ; line   411 : /* Clock divisor for TAU0 channel 1 */
  955   955                      ; line   412 : #define TAU0_CHANNEL1_DIVISOR                   (64U)     /* fCL
  956   956                      ;              K/2^6 */
  957   957                      ; line   413 : /* 16-bit timer data register 02 (TDR02) */
  958   958                      ; line   414 : #define _0138_TAU_TDR02_VALUE                   (0x0138U)
  959   959                      ; line   415 : /* Clock divisor for TAU0 channel 2 */
  960   960                      ; line   416 : #define TAU0_CHANNEL2_DIVISOR                   (8U)      /* fCL
  961   961                      ;              K/2^3 */
  962   962                      ; line   417 : /* 16-bit timer data register 03 (TDR03) */
  963   963                      ; line   418 : #define _09C3_TAU_TDR03_VALUE                   (0x09C3U)
  964   964                      ; line   419 : /* Clock divisor for TAU0 channel 3 */
  965   965                      ; line   420 : #define TAU0_CHANNEL3_DIVISOR                   (8U)      /* fCL
  966   966                      ;              K/2^3 */
  967   967                      ; line   421 : 
  968   968                      ; line   422 : /***************************************************************
  969   969                      ;              ********************************************************
  970   970                      ; line   423 : Typedef definitions
  971   971                      ; line   424 : ****************************************************************
  972   972                      ;              *******************************************************/
  973   973                      ; line   425 : 
  974   974                      ; line   426 : /***************************************************************
  975   975                      ;              ********************************************************
  976   976                      ; line   427 : Global functions
  977   977                      ; line   428 : ****************************************************************
  978   978                      ;              *******************************************************/
  979   979                      ; line   429 : void R_TAU0_Create(void);
  980   980                      ; line   430 : void R_TAU0_Channel0_Start(void);
  981   981                      ; line   431 : void R_TAU0_Channel0_Stop(void);
  982   982                      ; line   432 : void R_TAU0_Channel1_Start(void);
  983   983                      ; line   433 : void R_TAU0_Channel1_Stop(void);
  984   984                      ; line   434 : void R_TAU0_Channel2_Start(void);
  985   985                      ; line   435 : void R_TAU0_Channel2_Stop(void);
  986   986                      ; line   436 : void R_TAU0_Channel3_Start(void);
  987   987                      ; line   437 : void R_TAU0_Channel3_Stop(void);
  988   988                      ; line     1 : /***************************************************************
  989   989                      ;              ****************
  990   990                      ; line     2 : * DISCLAIMER
  991   991                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  992   992                      ;              nd is only
  993   993                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  994   994                      ;              orized. This
  995   995                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  996   996                      ;              otected under
  997   997                      ; line     6 : * all applicable laws, including copyright laws.
  998   998                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  999   999                      ;              IES REGARDING
 1000  1000                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 1001  1001                      ;              G BUT NOT
 1002  1002                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 1003  1003                      ;              ULAR PURPOSE
 1004  1004                      ; line    10 : * AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLA
 1005  1005                      ;              IMED.
 1006  1006                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 1007  1007                      ;               RENESAS
 1008  1008                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 1009  1009                      ;              ALL BE LIABLE
 1010  1010                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 1011  1011                      ;               DAMAGES FOR
 1012  1012                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 1013  1013                      ;              FILIATES HAVE
 1014  1014                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 1015  1015                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 1016  1016                      ;               this software
 1017  1017                      ; line    17 : * and to discontinue the availability of this software. By using
 1018  1018                      ;               this software,
 1019  1019                      ; line    18 : * you agree to the additional terms and conditions found by acce
 1020  1020                      ;              ssing the
 1021  1021                      ; line    19 : * following link:
 1022  1022                      ; line    20 : * http://www.renesas.com/disclaimer
 1023  1023                      ; line    21 : ****************************************************************
 1024  1024                      ;              ***************/
 1025  1025                      ; line    22 : /* Copyright (C) 2013 Renesas Electronics Corporation. All right
 1026  1026                      ;              s reserved.   */
 1027  1027                      ; line    23 : /***************************************************************
 1028  1028                      ;              ****************
 1029  1029                      ; line    24 : * File Name     : switch.h
 1030  1030                      ; line    25 : * Version       : 1.00
 1031  1031                      ; line    26 : * Device(s)     : R5F10WMG
 1032  1032                      ; line    27 : * Tool-Chain    : CA78K0R
 1033  1033                      ; line    28 : * H/W Platform  : RSKRL78L13
 1034  1034                      ; line    29 : * Description   : Provides declarations of functions defined in 
 1035  1035                      ;              switch.c
 1036  1036                      ; line    30 : ****************************************************************
 1037  1037                      ;              ***************/
 1038  1038                      ; line    31 : /***************************************************************
 1039  1039                      ;              ****************
 1040  1040                      ; line    32 : * History       : 08/10/2013  Ver. 1.00 First Release
 1041  1041                      ; line    33 : ****************************************************************
 1042  1042                      ;              ***************/
 1043  1043                      ; line    34 : /* Multiple inclusion prevention macro */
 1044  1044                      ; line    35 : #ifndef SWITCH_H
 1045  1045                      ; line    36 : #define SWITCH_H
 1046  1046                      ; line    37 : 
 1047  1047                      ; line    38 : /***************************************************************
 1048  1048                      ;              ****************
 1049  1049                      ; line    39 : * Project Includes
 1050  1050                      ; line    40 : ****************************************************************
 1051  1051                      ;              ***************/
 1052  1052                      ; line    41 : #include "r_cg_macrodriver.h"
 1053  1053                      ; line    42 : /***************************************************************
 1054  1054                      ;              ****************
 1055  1055                      ; line    43 : * Macro Definitions
 1056  1056                      ; line    44 : ****************************************************************
 1057  1057                      ;              ***************/
 1058  1058                      ; line    45 : 
 1059  1059                      ; line    46 : /* Switch 1 pressed flag mask */
 1060  1060                      ; line    47 : #define SWITCHPRESS_1       0x80u
 1061  1061                      ; line    48 : 
 1062  1062                      ; line    49 : /* Switch 1 held down flag mask */
 1063  1063                      ; line    50 : #define SWITCHHOLD_1        0x08u
 1064  1064                      ; line    51 : 
 1065  1065                      ; line    52 : /* Switch 2 pressed flag mask */
 1066  1066                      ; line    53 : #define SWITCHPRESS_2       0x40u
 1067  1067                      ; line    54 : 
 1068  1068                      ; line    55 : /* Switch 2 held down flag mask */
 1069  1069                      ; line    56 : #define SWITCHHOLD_2        0x04u
 1070  1070                      ; line    57 : 
 1071  1071                      ; line    58 : /* Switch 3 pressed flag mask */
 1072  1072                      ; line    59 : #define SWITCHPRESS_3       0x20u
 1073  1073                      ; line    60 : 
 1074  1074                      ; line    61 : /* Switch 3 held down flag mask */
 1075  1075                      ; line    62 : #define SWITCHHOLD_3        0x02u
 1076  1076                      ; line    63 : 
 1077  1077                      ; line    64 : /* Any switch pressed flag mask */
 1078  1078                      ; line    65 : #define SWITCHPRESS_ALL     0xE0u
 1079  1079                      ; line    66 : 
 1080  1080                      ; line    67 : /* Any switch held down flag mask */
 1081  1081                      ; line    68 : #define SWITCHHOLD_ALL      0x0Eu
 1082  1082                      ; line    69 : 
 1083  1083                      ; line    70 : /***************************************************************
 1084  1084                      ;              ****************
 1085  1085                      ; line    71 : * Global Variables
 1086  1086                      ; line    72 : ****************************************************************
 1087  1087                      ;              ***************/
 1088  1088                      ; line    73 : 
 1089  1089                      ; line    74 : /* Switch flag global variable. Switch status bits:
 1090  1090                      ; line    75 :         b7 : Switch 1 press complete flag*
 1091  1091                      ; line    76 :         b6 : Switch 2 press complete flag*
 1092  1092                      ; line    77 :         b5 : Switch 3 press complete flag*
 1093  1093                      ; line    78 :         b4 : Unused
 1094  1094                      ; line    79 :         b3 : Switch 1 held-down status flag
 1095  1095                      ; line    80 :         b2 : Switch 2 held-down status flag
 1096  1096                      ; line    81 :         b1 : Switch 3 held-down status flag
 1097  1097                      ; line    82 :         b0 : Unused 
 1098  1098                      ; line    83 :          * Switch press complete flags must be cleared manually 
 1099  1099                      ;              */
 1100  1100                      ; line    84 : extern volatile uint8_t g_switch_flag;
 1101  1101                      ; line    85 : 
 1102  1102                      ; line    86 : /***************************************************************
 1103  1103                      ;              ****************
 1104  1104                      ; line    87 : * Global Function Prototypes
 1105  1105                      ; line    88 : ****************************************************************
 1106  1106                      ;              ***************/
 1107  1107                      ; line    89 : /* Switch initialisation function */
 1108  1108                      ; line    90 : void Switch_Init(void);
 1109  1109                      ; line    91 : 
 1110  1110                      ; line    92 : /* Switch 1 interrupt callback function */
 1111  1111                      ; line    93 : void Switch1IsrCallback(void);
 1112  1112                      ; line    94 : 
 1113  1113                      ; line    95 : /* Switch 2 interrupt callback function */
 1114  1114                      ; line    96 : void Switch2IsrCallback(void);
 1115  1115                      ; line    97 : 
 1116  1116                      ; line    98 : /* Switch 3 interrupt callback function */
 1117  1117                      ; line    99 : void Switch3IsrCallback(void);
 1118  1118                      ; line   100 : 
 1119  1119                      ; line   101 : /* All switch debounce interrupt callback function */
 1120  1120                      ; line   102 : void SwitchDebounceIsrCallback(void);
 1121  1121                      ; line   103 : 
 1122  1122                      ; line   104 : /* Switch callback function initialisation function prototype */
 1123  1123                      ; line   105 : void SetSwitchPressCallback(void( *const callback)(void) );
 1124  1124                      ; line   106 : 
 1125  1125                      ; line   107 : /* Switch callback function initialisation function prototype */
 1126  1126                      ; line   108 : void SetSwitchReleaseCallback(void( *const callback)(void) );
 1127  1127                      ; line   109 : 
 1128  1128                      ; line   110 : /* Turns switch interrupts on/off */
 1129  1129                      ; line   111 : void ControlSwitchInterrupts (const uint8_t control);
 1130  1130                      ; line   112 : 
 1131  1131                      ; line   113 : /* Polling function for SW2 */
 1132  1132                      ; line   114 : uint8_t Switch2_Poll(const uint8_t switch_flag);
 1133  1133                      ; line     1 : /***************************************************************
 1134  1134                      ;              ********************************************************
 1135  1135                      ; line     2 : * DISCLAIMER
 1136  1136                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
 1137  1137                      ;              nd is only 
 1138  1138                      ; line     4 : * intended for use with Renesas products. No other uses are auth
 1139  1139                      ;              orized. This 
 1140  1140                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
 1141  1141                      ;              otected under 
 1142  1142                      ; line     6 : * all applicable laws, including copyright laws.
 1143  1143                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
 1144  1144                      ;              IES REGARDING 
 1145  1145                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 1146  1146                      ;              G BUT NOT 
 1147  1147                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 1148  1148                      ;              ULAR PURPOSE 
 1149  1149                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
 1150  1150                      ;              AIMED.
 1151  1151                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 1152  1152                      ;               RENESAS 
 1153  1153                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 1154  1154                      ;              ALL BE LIABLE 
 1155  1155                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 1156  1156                      ;               DAMAGES FOR 
 1157  1157                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 1158  1158                      ;              FILIATES HAVE 
 1159  1159                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 1160  1160                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 1161  1161                      ;               this software 
 1162  1162                      ; line    17 : * and to discontinue the availability of this software.  By usin
 1163  1163                      ;              g this software, 
 1164  1164                      ; line    18 : * you agree to the additional terms and conditions found by acce
 1165  1165                      ;              ssing the 
 1166  1166                      ; line    19 : * following link:
 1167  1167                      ; line    20 : * http://www.renesas.com/disclaimer
 1168  1168                      ; line    21 : *
 1169  1169                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
 1170  1170                      ;               reserved.
 1171  1171                      ; line    23 : ****************************************************************
 1172  1172                      ;              *******************************************************/
 1173  1173                      ; line    24 : 
 1174  1174                      ; line    25 : /***************************************************************
 1175  1175                      ;              ********************************************************
 1176  1176                      ; line    26 : * File Name    : r_cg_adc.h
 1177  1177                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
 1178  1178                      ;              ]
 1179  1179                      ; line    28 : * Device(s)    : R5F10WMG
 1180  1180                      ; line    29 : * Tool-Chain   : CA78K0R
 1181  1181                      ; line    30 : * Description  : This file implements device driver for ADC modu
 1182  1182                      ;              le.
 1183  1183                      ; line    31 : * Creation Date: 05-Jun-21
 1184  1184                      ; line    32 : ****************************************************************
 1185  1185                      ;              *******************************************************/
 1186  1186                      ; line    33 : #ifndef ADC_H
 1187  1187                      ; line    34 : #define ADC_H
 1188  1188                      ; line    35 : 
 1189  1189                      ; line    36 : /***************************************************************
 1190  1190                      ;              ********************************************************
 1191  1191                      ; line    37 : Macro definitions (Register bit)
 1192  1192                      ; line    38 : ****************************************************************
 1193  1193                      ;              *******************************************************/
 1194  1194                      ; line    39 : /*
 1195  1195                      ; line    40 :     Peripheral enable register 0 (PER0)
 1196  1196                      ; line    41 : */
 1197  1197                      ; line    42 : /* Control of AD converter input clock (ADCEN) */
 1198  1198                      ; line    43 : #define _00_AD_CLOCK_STOP               (0x00U) /* stop supply o
 1199  1199                      ;              f input clock */
 1200  1200                      ; line    44 : #define _20_AD_CLOCK_SUPPLY             (0x20U) /* supply input 
 1201  1201                      ;              clock */
 1202  1202                      ; line    45 : 
 1203  1203                      ; line    46 : /*
 1204  1204                      ; line    47 :     AD converter mode register 0 (ADM0)
 1205  1205                      ; line    48 : */
 1206  1206                      ; line    49 : #define _00_AD_ADM0_INITIALVALUE        (0x00U)
 1207  1207                      ; line    50 : /* AD conversion operation control (ADCS) */
 1208  1208                      ; line    51 : #define _80_AD_CONVERSION_ENABLE        (0x80U) /* enable AD con
 1209  1209                      ;              version operation control */
 1210  1210                      ; line    52 : #define _00_AD_CONVERSION_DISABLE       (0x00U) /* disable AD co
 1211  1211                      ;              nversion operation control */
 1212  1212                      ; line    53 : /* AD conversion clock selection (FR2 - FR0) */
 1213  1213                      ; line    54 : #define _00_AD_CONVERSION_CLOCK_64      (0x00U) /* fCLK/64 */
 1214  1214                      ; line    55 : #define _08_AD_CONVERSION_CLOCK_32      (0x08U) /* fCLK/32 */
 1215  1215                      ; line    56 : #define _10_AD_CONVERSION_CLOCK_16      (0x10U) /* fCLK/16 */
 1216  1216                      ; line    57 : #define _18_AD_CONVERSION_CLOCK_8       (0x18U) /* fCLK/8 */
 1217  1217                      ; line    58 : #define _20_AD_CONVERSION_CLOCK_6       (0x20U) /* fCLK/6 */
 1218  1218                      ; line    59 : #define _28_AD_CONVERSION_CLOCK_5       (0x28U) /* fCLK/5 */
 1219  1219                      ; line    60 : #define _30_AD_CONVERSION_CLOCK_4       (0x30U) /* fCLK/4 */
 1220  1220                      ; line    61 : #define _38_AD_CONVERSION_CLOCK_2       (0x38U) /* fCLK/2 */
 1221  1221                      ; line    62 : /* Specification AD conversion time mode (LV1, LV0) */
 1222  1222                      ; line    63 : #define _00_AD_TIME_MODE_NORMAL_1       (0x00U) /* normal 1 mode
 1223  1223                      ;               */
 1224  1224                      ; line    64 : #define _02_AD_TIME_MODE_NORMAL_2       (0x02U) /* normal 2 mode
 1225  1225                      ;               */
 1226  1226                      ; line    65 : #define _04_AD_TIME_MODE_LOWVOLTAGE_1   (0x04U) /* low-voltage 1
 1227  1227                      ;               mode */
 1228  1228                      ; line    66 : #define _06_AD_TIME_MODE_LOWVOLTAGE_2   (0x06U) /* low-voltage 2
 1229  1229                      ;               mode */
 1230  1230                      ; line    67 : /* AD comparator operation control (ADCE) */
 1231  1231                      ; line    68 : #define _01_AD_COMPARATOR_ENABLE        (0x01U) /* enable compar
 1232  1232                      ;              ator operation control */
 1233  1233                      ; line    69 : #define _00_AD_COMPARATOR_DISABLE       (0x00U) /* disable compa
 1234  1234                      ;              rator operation control */
 1235  1235                      ; line    70 : 
 1236  1236                      ; line    71 : /*
 1237  1237                      ; line    72 :     Analog input channel specification register (ADS)
 1238  1238                      ; line    73 : */
 1239  1239                      ; line    74 : /* Specification of analog input channel (ADISS, ADS4 - ADS0) */
 1240  1240                      ; line    75 : /* Select mode */
 1241  1241                      ; line    76 : #define _00_AD_INPUT_CHANNEL_0          (0x00U) /* ANI0 */
 1242  1242                      ; line    77 : #define _01_AD_INPUT_CHANNEL_1          (0x01U) /* ANI1 */
 1243  1243                      ; line    78 : #define _10_AD_INPUT_CHANNEL_16         (0x10U) /* ANI16 */
 1244  1244                      ; line    79 : #define _11_AD_INPUT_CHANNEL_17         (0x11U) /* ANI17 */
 1245  1245                      ; line    80 : #define _12_AD_INPUT_CHANNEL_18         (0x12U) /* ANI18 */
 1246  1246                      ; line    81 : #define _13_AD_INPUT_CHANNEL_19         (0x13U) /* ANI19 */
 1247  1247                      ; line    82 : #define _14_AD_INPUT_CHANNEL_20         (0x14U) /* ANI20 */
 1248  1248                      ; line    83 : #define _15_AD_INPUT_CHANNEL_21         (0x15U) /* ANI21 */
 1249  1249                      ; line    84 : #define _16_AD_INPUT_CHANNEL_22         (0x16U) /* ANI22 */
 1250  1250                      ; line    85 : #define _17_AD_INPUT_CHANNEL_23         (0x17U) /* ANI23 */
 1251  1251                      ; line    86 : #define _18_AD_INPUT_CHANNEL_24         (0x18U) /* ANI24 */
 1252  1252                      ; line    87 : #define _19_AD_INPUT_CHANNEL_25         (0x19U) /* ANI25 */
 1253  1253                      ; line    88 : #define _80_AD_INPUT_TEMPERSENSOR       (0x80U) /* temperature s
 1254  1254                      ;              ensor output is used to be the input channel */
 1255  1255                      ; line    89 : #define _81_AD_INPUT_INTERREFVOLT       (0x81U) /* internal refe
 1256  1256                      ;              rence voltage output is used to be the input channel */
 1257  1257                      ; line    90 : 
 1258  1258                      ; line    91 : /*
 1259  1259                      ; line    92 :     AD converter mode register 1 (ADM1)
 1260  1260                      ; line    93 : */
 1261  1261                      ; line    94 : /* AD trigger mode selection (ADTMD1, ADTMD0) */
 1262  1262                      ; line    95 : #define _00_AD_TRIGGER_SOFTWARE         (0x00U) /* software trig
 1263  1263                      ;              ger mode */
 1264  1264                      ; line    96 : #define _80_AD_TRIGGER_HARDWARE_NOWAIT  (0x80U) /* hardware trig
 1265  1265                      ;              ger mode (no wait) */
 1266  1266                      ; line    97 : #define _C0_AD_TRIGGER_HARDWARE_WAIT    (0xC0U) /* hardware trig
 1267  1267                      ;              ger mode (wait) */
 1268  1268                      ; line    98 : /* AD convertion mode selection (ADSCM) */
 1269  1269                      ; line    99 : #define _00_AD_CONVMODE_CONSELECT       (0x00U) /* continuous co
 1270  1270                      ;              nvertion mode */
 1271  1271                      ; line   100 : #define _20_AD_CONVMODE_ONESELECT       (0x20U) /* oneshot conve
 1272  1272                      ;              rtion mode */
 1273  1273                      ; line   101 : /* Trigger signal selection (ADTRS1, ADTRS0) */
 1274  1274                      ; line   102 : #define _00_AD_TRIGGER_INTTM01          (0x00U) /* INTTM01 */
 1275  1275                      ; line   103 : #define _02_AD_TRIGGER_INTRTC           (0x02U) /* INTRTC */
 1276  1276                      ; line   104 : #define _03_AD_TRIGGER_INTIT            (0x03U) /* INTIT */
 1277  1277                      ; line   105 : 
 1278  1278                      ; line   106 : /*
 1279  1279                      ; line   107 :     AD converter mode register 2 (ADM2)
 1280  1280                      ; line   108 : */
 1281  1281                      ; line   109 : /* AD VREF(+) selection (ADREFP1, ADREFP0) */
 1282  1282                      ; line   110 : #define _00_AD_POSITIVE_VDD             (0x00U) /* use VDD as VR
 1283  1283                      ;              EF(+) */
 1284  1284                      ; line   111 : #define _40_AD_POSITIVE_AVREFP          (0x40U) /* use AVREFP as
 1285  1285                      ;               VREF(+) */
 1286  1286                      ; line   112 : #define _80_AD_POSITIVE_INTERVOLT       (0x80U) /* use internal 
 1287  1287                      ;              voltage as VREF(+) */
 1288  1288                      ; line   113 : /* AD VREF(-) selection (ADREFM) */
 1289  1289                      ; line   114 : #define _00_AD_NEGATIVE_VSS             (0x00U) /* use VSS as VR
 1290  1290                      ;              EF(-) */
 1291  1291                      ; line   115 : #define _20_AD_NEGATIVE_AVREFM          (0x20U) /* use AVREFM as
 1292  1292                      ;               VREF(-) */
 1293  1293                      ; line   116 : /* AD conversion result upper/lower bound value selection (ADRCK
 1294  1294                      ;              ) */
 1295  1295                      ; line   117 : #define _00_AD_AREA_MODE_1              (0x00U) /* generates INT
 1296  1296                      ;              AD when ADLL <= ADCRH <= ADUL */
 1297  1297                      ; line   118 : #define _08_AD_AREA_MODE_2_3            (0x08U) /* generates INT
 1298  1298                      ;              AD when ADUL < ADCRH or ADLL > ADCRH */
 1299  1299                      ; line   119 : /* AD wakeup function selection (AWC) */
 1300  1300                      ; line   120 : #define _00_AD_SNOOZE_OFF               (0x00U) /* stop SNOOZE f
 1301  1301                      ;              unction */
 1302  1302                      ; line   121 : #define _04_AD_SNOOZE_ON                (0x04U) /* use SNOOZE fu
 1303  1303                      ;              nction */
 1304  1304                      ; line   122 : /* AD resolution selection (ADTYP) */
 1305  1305                      ; line   123 : #define _00_AD_RESOLUTION_10BIT         (0x00U) /* 10 bits */
 1306  1306                      ; line   124 : #define _01_AD_RESOLUTION_8BIT          (0x01U) /* 8 bits */
 1307  1307                      ; line   125 : 
 1308  1308                      ; line   126 : /*
 1309  1309                      ; line   127 :     AD test function register (ADTES)
 1310  1310                      ; line   128 : */
 1311  1311                      ; line   129 : /* AD test mode signal (ADTES2 - ADTES0) */
 1312  1312                      ; line   130 : #define _00_AD_NORMAL_INPUT             (0x00U) /* normal mode *
 1313  1313                      ;              /
 1314  1314                      ; line   131 : #define _02_AD_TEST_AVREFM              (0x02U) /* use AVREFM as
 1315  1315                      ;               test signal */
 1316  1316                      ; line   132 : #define _03_AD_TEST_AVREFP              (0x03U) /* use AVREFP as
 1317  1317                      ;               test signal */
 1318  1318                      ; line   133 : 
 1319  1319                      ; line   134 : /*
 1320  1320                      ; line   135 :     AD port configuration register (ADPC)
 1321  1321                      ; line   136 : */
 1322  1322                      ; line   137 : /* Analog input/digital input switching (ADPC1, ADPC0) */
 1323  1323                      ; line   138 : #define _00_AD_ADPC_2ANALOG             (0x00U) /* ANI0 - ANI1 *
 1324  1324                      ;              /
 1325  1325                      ; line   139 : #define _01_AD_ADPC_0ANALOG             (0x01U) /* all digital *
 1326  1326                      ;              /
 1327  1327                      ; line   140 : #define _02_AD_ADPC_1ANALOG             (0x02U) /* ANI0 */
 1328  1328                      ; line   141 : 
 1329  1329                      ; line   142 : /***************************************************************
 1330  1330                      ;              ********************************************************
 1331  1331                      ; line   143 : Macro definitions
 1332  1332                      ; line   144 : ****************************************************************
 1333  1333                      ;              *******************************************************/
 1334  1334                      ; line   145 : /* Upper bound (ADUL) value */
 1335  1335                      ; line   146 : #define _FF_AD_ADUL_VALUE               (0xFFU)
 1336  1336                      ; line   147 : /* Lower bound (ADLL) value */
 1337  1337                      ; line   148 : #define _00_AD_ADLL_VALUE               (0x00U)
 1338  1338                      ; line   149 : 
 1339  1339                      ; line   150 : /***************************************************************
 1340  1340                      ;              ********************************************************
 1341  1341                      ; line   151 : Typedef definitions
 1342  1342                      ; line   152 : ****************************************************************
 1343  1343                      ;              *******************************************************/
 1344  1344                      ; line   153 : typedef enum
 1345  1345                      ; line   154 : {
 1346  1346                      ; line   155 :     ADCHANNEL0,
 1347  1347                      ; line   156 :     ADCHANNEL1,
 1348  1348                      ; line   157 :     ADCHANNEL16 = 16U,
 1349  1349                      ; line   158 :     ADCHANNEL17,
 1350  1350                      ; line   159 :     ADCHANNEL18,
 1351  1351                      ; line   160 :     ADCHANNEL19,
 1352  1352                      ; line   161 :     ADCHANNEL20,
 1353  1353                      ; line   162 :     ADCHANNEL21,
 1354  1354                      ; line   163 :     ADCHANNEL22,
 1355  1355                      ; line   164 :     ADCHANNEL23,
 1356  1356                      ; line   165 :     ADCHANNEL24,
 1357  1357                      ; line   166 :     ADCHANNEL25,
 1358  1358                      ; line   167 :     ADTEMPERSENSOR0 = 128U,
 1359  1359                      ; line   168 :     ADINTERREFVOLT
 1360  1360                      ; line   169 : } ad_channel_t;
 1361  1361                      ; line   170 : 
 1362  1362                      ; line   171 : typedef enum
 1363  1363                      ; line   172 : {
 1364  1364                      ; line   173 :     ADNORMALINPUT,
 1365  1365                      ; line   174 :     ADAVREFM = 2U,
 1366  1366                      ; line   175 :     ADAVREFP
 1367  1367                      ; line   176 : } test_channel_t;
 1368  1368                      ; line   177 : 
 1369  1369                      ; line   178 : /***************************************************************
 1370  1370                      ;              ********************************************************
 1371  1371                      ; line   179 : Global functions
 1372  1372                      ; line   180 : ****************************************************************
 1373  1373                      ;              *******************************************************/
 1374  1374                      ; line   181 : void R_ADC_Create(void);
 1375  1375                      ; line   182 : void R_ADC_Start(void);
 1376  1376                      ; line   183 : void R_ADC_Stop(void);
 1377  1377                      ; line   184 : void R_ADC_Set_OperationOn(void);
 1378  1378                      ; line   185 : void R_ADC_Set_OperationOff(void);
 1379  1379                      ; line   186 : void R_ADC_Get_Result(uint16_t * const buffer);
 1380  1380                      ; line   187 : 
 1381  1381                      ; line   188 : /* Start user code for function. Do not edit comment generated h
 1382  1382                      ;              ere */
 1383  1383                      ; line   189 : 
 1384  1384                      ; line   190 : /* Variable for storing the ADC value */
 1385  1385                      ; line   191 : extern volatile uint16_t g_adc_result;
 1386  1386                      ; line     1 : /***************************************************************
 1387  1387                      ;              ********************************************************
 1388  1388                      ; line     2 : * DISCLAIMER
 1389  1389                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
 1390  1390                      ;              nd is only 
 1391  1391                      ; line     4 : * intended for use with Renesas products. No other uses are auth
 1392  1392                      ;              orized. This 
 1393  1393                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
 1394  1394                      ;              otected under 
 1395  1395                      ; line     6 : * all applicable laws, including copyright laws.
 1396  1396                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
 1397  1397                      ;              IES REGARDING 
 1398  1398                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 1399  1399                      ;              G BUT NOT 
 1400  1400                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 1401  1401                      ;              ULAR PURPOSE 
 1402  1402                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
 1403  1403                      ;              AIMED.
 1404  1404                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 1405  1405                      ;               RENESAS 
 1406  1406                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 1407  1407                      ;              ALL BE LIABLE 
 1408  1408                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 1409  1409                      ;               DAMAGES FOR 
 1410  1410                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 1411  1411                      ;              FILIATES HAVE 
 1412  1412                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 1413  1413                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 1414  1414                      ;               this software 
 1415  1415                      ; line    17 : * and to discontinue the availability of this software.  By usin
 1416  1416                      ;              g this software, 
 1417  1417                      ; line    18 : * you agree to the additional terms and conditions found by acce
 1418  1418                      ;              ssing the 
 1419  1419                      ; line    19 : * following link:
 1420  1420                      ; line    20 : * http://www.renesas.com/disclaimer
 1421  1421                      ; line    21 : *
 1422  1422                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
 1423  1423                      ;               reserved.
 1424  1424                      ; line    23 : ****************************************************************
 1425  1425                      ;              *******************************************************/
 1426  1426                      ; line    24 : 
 1427  1427                      ; line    25 : /***************************************************************
 1428  1428                      ;              ********************************************************
 1429  1429                      ; line    26 : * File Name    : lcd_panel.h
 1430  1430                      ; line    27 : * Version      : 1.00
 1431  1431                      ; line    28 : * Device(s)    : R5F10WMG
 1432  1432                      ; line    29 : * Tool-Chain   : CA78K0R
 1433  1433                      ; line    30 : * Description  : This file contains functions and definitions us
 1434  1434                      ;              ed in the lcd_panel.c file.
 1435  1435                      ; line    31 : * Creation Date: 08/10/2013
 1436  1436                      ; line    32 : ****************************************************************
 1437  1437                      ;              *******************************************************/
 1438  1438                      ; line    33 : 
 1439  1439                      ; line    34 : #ifndef LCD_PANEL_H
 1440  1440                      ; line    35 : #define LCD_PANEL_H
 1441  1441                      ; line    36 : 
 1442  1442                      ; line    37 : /***************************************************************
 1443  1443                      ;              ********************************************************
 1444  1444                      ; line    38 : Includes <System Includes> , �Project Includes
 1445  1445                      ; line    39 : ****************************************************************
 1446  1446                      ;              *******************************************************/
 1447  1447                      ; line    40 : 
 1448  1448                      ; line    41 : /***************************************************************
 1449  1449                      ;              ********************************************************
 1450  1450                      ; line    42 : Macro Definitions
 1451  1451                      ; line    43 : ****************************************************************
 1452  1452                      ;              *******************************************************/
 1453  1453                      ; line    44 : /* Set to ensure base delay */
 1454  1454                      ; line    45 : #define PANEL_DELAY_TIMING     0x05
 1455  1455                      ; line    46 : 
 1456  1456                      ; line    47 : /*  */
 1457  1457                      ; line    48 : #define ENABLE_SW2_SW3         0u
 1458  1458                      ; line    49 : #define DISABLE_SW2_SW3        1u
 1459  1459                      ; line    50 : #define DISABLE_UART           (0u)
 1460  1460                      ; line    51 : #define ENABLE_UART            (1u)
 1461  1461                      ; line    52 : #define JUMPER_SET_SEG         0x60u
 1462  1462                      ; line    53 : 
 1463  1463                      ; line    54 : /* Unsupported Segments can be Controlled by the RSK when the un
 1464  1464                      ;              connected 
 1465  1465                      ; line    55 :    pins are connected to the RSK. Set the correct pin addresses 
 1466  1466                      ;              to the 
 1467  1467                      ; line    56 :    #defines below. */
 1468  1468                      ; line    57 : #define Aux_pin5               0xFFFFu
 1469  1469                      ; line    58 : #define Aux_pin6               0xFFFFu
 1470  1470                      ; line    59 : #define Aux_pin47              0xFFFFu
 1471  1471                      ; line    60 : #define Aux_pin48              0xFFFFu
 1472  1472                      ; line    61 : 
 1473  1473                      ; line    62 : /* Use the ROM area to indicate that a data pointer is not to be
 1474  1474                      ;               used */
 1475  1475                      ; line    63 : #define PDL_NO_PTR            (uint8_t * )0xFFFFu
 1476  1476                      ; line    64 : 
 1477  1477                      ; line    65 : /* Define Section Names */
 1478  1478                      ; line    66 : #define EMPTY                  0
 1479  1479                      ; line    67 : #define SECT1                 '1'
 1480  1480                      ; line    68 : #define SECT2                 '2'
 1481  1481                      ; line    69 : #define SECT3                 '3'
 1482  1482                      ; line    70 : #define SECT4                 '4'
 1483  1483                      ; line    71 : #define CLEAR                  0x23
 1484  1484                      ; line    72 : #define ISOTEST                0x2A
 1485  1485                      ; line    73 : 
 1486  1486                      ; line    74 : #define PANEL_LCD_LINE1       '3'
 1487  1487                      ; line    75 : #define PANEL_LCD_LINE2       '1'
 1488  1488                      ; line    76 : #define PANEL_LCD_LINE3       '2'
 1489  1489                      ; line    77 : #define PANEL_LCD_SYMBOL      '4'
 1490  1490                      ; line    78 : 
 1491  1491                      ; line    79 : /* Define Symbol Names */
 1492  1492                      ; line    80 : #define LCD_HEAT_ON            0x3131u
 1493  1493                      ; line    81 : #define LCD_HEAT_OFF           0x3130u
 1494  1494                      ; line    82 : #define LCD_FAN_ON             0x3231u
 1495  1495                      ; line    83 : #define LCD_FAN_OFF            0x3230u
 1496  1496                      ; line    84 : #define LCD_ZONE_ON            0x3331u
 1497  1497                      ; line    85 : #define LCD_ZONE_OFF           0x3330u
 1498  1498                      ; line    86 : #define LCD_MGML_ON            0x3431u
 1499  1499                      ; line    87 : #define LCD_MGML_OFF           0x3430u
 1500  1500                      ; line    88 : #define LCD_MMHG_ON            0x3531u
 1501  1501                      ; line    89 : #define LCD_MMHG_OFF           0x3530u
 1502  1502                      ; line    90 : #define LCD_VOLTS_ON           0x3631u
 1503  1503                      ; line    91 : #define LCD_VOLTS_OFF          0x3630u
 1504  1504                      ; line    92 : #define LCD_HEART_ON           0x3731u
 1505  1505                      ; line    93 : #define LCD_HEART_OFF          0x3730u
 1506  1506                      ; line    94 : #define LCD_DEGREESC_ON        0x3831u
 1507  1507                      ; line    95 : #define LCD_DEGREESC_OFF       0x3830u
 1508  1508                      ; line    96 : #define LCD_DEGREESF_ON        0x3931u
 1509  1509                      ; line    97 : #define LCD_DEGREESF_OFF       0x3930u
 1510  1510                      ; line    98 : #define LCD_ALARM_ON           0x4131u
 1511  1511                      ; line    99 : #define LCD_ALARM_OFF          0x4130u
 1512  1512                      ; line   100 : #define LCD_ALARM_ON_1         0x6131u
 1513  1513                      ; line   101 : #define LCD_ALARM_OFF_1        0x6130u
 1514  1514                      ; line   102 : #define LCD_AM_ON              0x4231u
 1515  1515                      ; line   103 : #define LCD_AM_OFF             0x4230u
 1516  1516                      ; line   104 : #define LCD_AM_ON_1            0x6231u
 1517  1517                      ; line   105 : #define LCD_AM_OFF_1           0x6230u
 1518  1518                      ; line   106 : #define LCD_PM_ON              0x4331u
 1519  1519                      ; line   107 : #define LCD_PM_OFF             0x4330u
 1520  1520                      ; line   108 : #define LCD_PM_ON_1            0x6331u
 1521  1521                      ; line   109 : #define LCD_PM_OFF_1           0x6330u
 1522  1522                      ; line   110 : #define LCD_R_LOGO_ON          0x4431u
 1523  1523                      ; line   111 : #define LCD_R_LOGO_OFF         0x4430u
 1524  1524                      ; line   112 : #define LCD_R_LOGO_ON_1        0x6431u
 1525  1525                      ; line   113 : #define LCD_R_LOGO_OFF_1       0x6430u
 1526  1526                      ; line   114 : 
 1527  1527                      ; line   115 : /***************************************************************
 1528  1528                      ;              ********************************************************
 1529  1529                      ; line   116 : Type definitions
 1530  1530                      ; line   117 : ****************************************************************
 1531  1531                      ;              *******************************************************/
 1532  1532                      ; line   118 : /* Define Map Structure Used */
 1533  1533                      ; line   119 : typedef union LCD_MAP
 1534  1534                      ; line   120 : {    
 1535  1535                      ; line   121 :     int32_t WORD;
 1536  1536                      ; line   122 :     
 1537  1537                      ; line   123 :     struct
 1538  1538                      ; line   124 :     {
 1539  1539                      ; line   125 :         int8_t ONE   : 4;
 1540  1540                      ; line   126 :         int8_t TWO   : 4;
 1541  1541                      ; line   127 :         int8_t THREE : 4;
 1542  1542                      ; line   128 :         int8_t FOUR  : 4;
 1543  1543                      ; line   129 :     } BYTE;
 1544  1544                      ; line   130 : } LCDMAP;
 1545  1545                      ; line   131 : 
 1546  1546                      ; line   132 : /***************************************************************
 1547  1547                      ;              ********************************************************
 1548  1548                      ; line   133 : Function Prototypes
 1549  1549                      ; line   134 : ****************************************************************
 1550  1550                      ;              *******************************************************/
 1551  1551                      ; line   135 : /* Clears the screen by the next LCD frame duration */
 1552  1552                      ; line   136 : void Clear_Display (void);
 1553  1553                      ; line   137 : 
 1554  1554                      ; line   138 : /* Prepares the LCD Panel for use */
 1555  1555                      ; line   139 : void Init_Display_Panel (void);
 1556  1556                      ; line   140 : 
 1557  1557                      ; line   141 : /* Disables the LCD Peripheral */
 1558  1558                      ; line   142 : void Power_Off_Display(void);
 1559  1559                      ; line   143 : 
 1560  1560                      ; line   144 : /* Maps the character to a segment pattern, 
 1561  1561                      ; line   145 :    to be displayed on Section A of the LCD panel */
 1562  1562                      ; line   146 : void SECTA_Glyph_Map (const uint8_t glyph, const uint16_t digit)
 1563  1563                      ;              ;
 1564  1564                      ; line   147 : 
 1565  1565                      ; line   148 : /* Maps the character to a segment pattern, 
 1566  1566                      ; line   149 :    to be displayed on Section B of the LCD panel */
 1567  1567                      ; line   150 : void SECTB_Glyph_Map (const uint8_t glyph, const uint16_t digit)
 1568  1568                      ;              ;
 1569  1569                      ; line   151 : 
 1570  1570                      ; line   152 : /* Maps the character to a segment pattern, 
 1571  1571                      ; line   153 :    to be displayed on Section C of the LCD panel */
 1572  1572                      ; line   154 : void SECTC_Glyph_Map (const uint8_t glyph, const uint16_t digit)
 1573  1573                      ;              ;
 1574  1574                      ; line   155 : 
 1575  1575                      ; line   156 : /* Maps the character to a segment pattern, 
 1576  1576                      ; line   157 :    to be displayed on Section D of the LCD panel */
 1577  1577                      ; line   158 : void SECTD_Glyph_Map (const uint8_t  level);
 1578  1578                      ; line   159 : 
 1579  1579                      ; line   160 : /* Maps the character to a segment pattern, 
 1580  1580                      ; line   161 :    to be displayed on Section E of the LCD panel */
 1581  1581                      ; line   162 : void SECTE_Glyph_Map (const uint16_t  level);
 1582  1582                      ; line   163 : 
 1583  1583                      ; line   164 : /* Maps the character to a segment pattern, 
 1584  1584                      ; line   165 :    to be displayed on Section F of the LCD panel */
 1585  1585                      ; line   166 : void SECTF_Glyph_Map (const uint8_t  day);
 1586  1586                      ; line   167 : 
 1587  1587                      ; line   168 : /* Turns on/off LCD Panel Symbols */
 1588  1588                      ; line   169 : int8_t Symbol_Map (const uint16_t  input);
 1589  1589                      ; line   170 : 
 1590  1590                      ; line   171 : /* Initialises the glyph-segment maps used to display letters, 
 1591  1591                      ; line   172 :    symbols and numbers */
 1592  1592                      ; line   173 : void Init_Maps (void);
 1593  1593                      ; line   174 : 
 1594  1594                      ; line   175 : /* Validates the input for the Update_Display */
 1595  1595                      ; line   176 : int16_t Validate_Input (const uint8_t input, uint8_t * const out
 1596  1596                      ;              put);
 1597  1597                      ; line   177 : 
 1598  1598                      ; line   178 : /* Turn on RENESAS logo */
 1599  1599                      ; line   179 : void set_logo (void);
 1600  1600                      ; line   180 : 
 1601  1601                      ; line   181 : /* Switch ON various prats of the LCD Panel */
 1602  1602                      ; line   182 : void LCD_ON (void);
 1603  1603                      ; line   183 : 
 1604  1604                      ; line   184 : /* Lights up all the segments of the LCD Panel */
 1605  1605                      ; line   185 : void LCD_DISPLAY_ON (void);
 1606  1606                      ; line   186 : 
 1607  1607                      ; line   187 : 
 1608  1608                      ; line   188 : /* Switches OFF all the segments of the LCD Panel */
 1609  1609                      ; line   189 : void LCD_DISPLAY_OFF (void);
 1610  1610                      ; line   190 : 
 1611  1611                      ; line   191 : /* Display string on LCD panel */
 1612  1612                      ; line   192 : void Display_Panel_String (const uint8_t position, const char * 
 1613  1613                      ;              const string);
 1614  1614                      ; line   193 : 
 1615  1615                      ; line   194 : /* Delay routine for LCD */
 1616  1616                      ; line   195 : void Display_Panel_Delay (const uint32_t units);
 1617  1617                      ; line     1 : /***************************************************************
 1618  1618                      ;              ********************************************************
 1619  1619                      ; line     2 : * DISCLAIMER
 1620  1620                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
 1621  1621                      ;              nd is only 
 1622  1622                      ; line     4 : * intended for use with Renesas products. No other uses are auth
 1623  1623                      ;              orized. This 
 1624  1624                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
 1625  1625                      ;              otected under 
 1626  1626                      ; line     6 : * all applicable laws, including copyright laws.
 1627  1627                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
 1628  1628                      ;              IES REGARDING 
 1629  1629                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 1630  1630                      ;              G BUT NOT 
 1631  1631                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 1632  1632                      ;              ULAR PURPOSE 
 1633  1633                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
 1634  1634                      ;              AIMED.
 1635  1635                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 1636  1636                      ;               RENESAS 
 1637  1637                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 1638  1638                      ;              ALL BE LIABLE 
 1639  1639                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 1640  1640                      ;               DAMAGES FOR 
 1641  1641                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 1642  1642                      ;              FILIATES HAVE 
 1643  1643                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 1644  1644                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 1645  1645                      ;               this software 
 1646  1646                      ; line    17 : * and to discontinue the availability of this software.  By usin
 1647  1647                      ;              g this software, 
 1648  1648                      ; line    18 : * you agree to the additional terms and conditions found by acce
 1649  1649                      ;              ssing the 
 1650  1650                      ; line    19 : * following link:
 1651  1651                      ; line    20 : * http://www.renesas.com/disclaimer
 1652  1652                      ; line    21 : *
 1653  1653                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
 1654  1654                      ;               reserved.
 1655  1655                      ; line    23 : ****************************************************************
 1656  1656                      ;              *******************************************************/
 1657  1657                      ; line    24 : 
 1658  1658                      ; line    25 : /***************************************************************
 1659  1659                      ;              ********************************************************
 1660  1660                      ; line    26 : * File Name    : r_cg_tau_user.c
 1661  1661                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
 1662  1662                      ;              ]
 1663  1663                      ; line    28 : * Device(s)    : R5F10WMG
 1664  1664                      ; line    29 : * Tool-Chain   : CA78K0R
 1665  1665                      ; line    30 : * Description  : This file implements device driver for TAU modu
 1666  1666                      ;              le.
 1667  1667                      ; line    31 : * Creation Date: 05-Jun-21
 1668  1668                      ; line    32 : ****************************************************************
 1669  1669                      ;              *******************************************************/
 1670  1670                      ; line    33 : 
 1671  1671                      ; line    34 : /***************************************************************
 1672  1672                      ;              ********************************************************
 1673  1673                      ; line    35 : Pragma directive
 1674  1674                      ; line    36 : ****************************************************************
 1675  1675                      ;              *******************************************************/
 1676  1676                      ; line    37 : #pragma interrupt INTTM00 r_tau0_channel0_interrupt
 1677  1677                      ; line    38 : #pragma interrupt INTTM01 r_tau0_channel1_interrupt
 1678  1678                      ; line    39 : #pragma interrupt INTTM02 r_tau0_channel2_interrupt
 1679  1679                      ; line    40 : #pragma interrupt INTTM03 r_tau0_channel3_interrupt
 1680  1680                      ; line    41 : /* Start user code for pragma. Do not edit comment generated her
 1681  1681                      ;              e */
 1682  1682                      ; line    42 : /* End user code. Do not edit comment generated here */
 1683  1683                      ; line    43 : 
 1684  1684                      ; line    44 : /***************************************************************
 1685  1685                      ;              ********************************************************
 1686  1686                      ; line    45 : Includes
 1687  1687                      ; line    46 : ****************************************************************
 1688  1688                      ;              *******************************************************/
 1689  1689                      ; line    47 : #include "r_cg_macrodriver.h"
 1690  1690                      ; line    48 : #include "r_cg_tau.h"
 1691  1691                      ; line    49 : /* Start user code for include. Do not edit comment generated he
 1692  1692                      ;              re */
 1693  1693                      ; line    50 : 
 1694  1694                      ; line    51 : /* Defines switch callback functions required by interrupt handl
 1695  1695                      ;              ers */
 1696  1696                      ; line    52 : #include "switch.h"
 1697  1697                      ; line    53 : 
 1698  1698                      ; line    54 : /* Include ADC defines and function prototypes */
 1699  1699                      ; line    55 : #include "r_cg_adc.h"
 1700  1700                      ; line    56 : 
 1701  1701                      ; line    57 : /* Include LCD defines and  function prototypes */
 1702  1702                      ; line    58 : #include "lcd_panel.h"
 1703  1703                      ; line    59 : 
 1704  1704                      ; line    60 : /* Platform related defines */
 1705  1705                      ; line    61 : #include "rskrl78l13def.h"
 1706  1706                      ; line    62 : 
 1707  1707                      ; line    63 : /* End user code. Do not edit comment generated here */
 1708  1708                      ; line    64 : #include "r_cg_userdefine.h"
 1709  1709                      ; line    65 : 
 1710  1710                      ; line    66 : /***************************************************************
 1711  1711                      ;              ********************************************************
 1712  1712                      ; line    67 : Global variables and functions
 1713  1713                      ; line    68 : ****************************************************************
 1714  1714                      ;              *******************************************************/
 1715  1715                      ; line    69 : /* Start user code for global. Do not edit comment generated her
 1716  1716                      ;              e */
 1717  1717                      ; line    70 : /* interrupt flag for delay function */
 1718  1718                      ; line    71 : static volatile uint8_t one_ms_delay_complete = FALSE;
 1719  1719                      ; line    72 : /* End user code. Do not edit comment generated here */
 1720  1720                      ; line    73 : 
 1721  1721                      ; line    74 : /***************************************************************
 1722  1722                      ;              ********************************************************
 1723  1723                      ; line    75 : * Function Name: r_tau0_channel0_interrupt
 1724  1724                      ; line    76 : * Description  : This function INTTM00 interrupt service routine
 1725  1725                      ;              .
 1726  1726                      ; line    77 : * Arguments    : None
 1727  1727                      ; line    78 : * Return Value : None
 1728  1728                      ; line    79 : ****************************************************************
 1729  1729                      ;              *******************************************************/
 1730  1730                      ; line    80 : __interrupt static void r_tau0_channel0_interrupt(void)
 1731  1731                      ; line    81 : {
 1732  1732                      
 1733  1733 -----                @@BASE  CSEG    BASE
 1734  1734 00000                _r_tau0_channel0_interrupt:
 1735  1735                      $DGL    1,22
 1736  1736 00000  C1                    push    ax                                              ;[INF] 1, 1
 1737  1737 00001  C3                    push    bc                                              ;[INF] 1, 1
 1738  1738 00002  C5                    push    de                                              ;[INF] 1, 1
 1739  1739 00003  C7                    push    hl                                              ;[INF] 1, 1
 1740  1740 00004 RAD00                  movw    ax,_@RTARG6                                     ;[INF] 2, 1
 1741  1741 00006  C1                    push    ax                                              ;[INF] 1, 1
 1742  1742 00007 RAD00                  movw    ax,_@RTARG4                                     ;[INF] 2, 1
 1743  1743 00009  C1                    push    ax                                              ;[INF] 1, 1
 1744  1744 0000A RAD00                  movw    ax,_@RTARG2                                     ;[INF] 2, 1
 1745  1745 0000C  C1                    push    ax                                              ;[INF] 1, 1
 1746  1746 0000D RAD00                  movw    ax,_@RTARG0                                     ;[INF] 2, 1
 1747  1747 0000F  C1                    push    ax                                              ;[INF] 1, 1
 1748  1748 00010 RAD00                  movw    ax,_@SEGDE                                      ;[INF] 2, 1
 1749  1749 00012  C1                    push    ax                                              ;[INF] 1, 1
 1750  1750 00013 RAD00                  movw    ax,_@SEGAX                                      ;[INF] 2, 1
 1751  1751 00015  C1                    push    ax                                              ;[INF] 1, 1
 1752  1752 00016  8EFD                  mov     a,ES                                            ;[INF] 2, 1
 1753  1753 00018  70                    mov     x,a                                             ;[INF] 1, 1
 1754  1754 00019  8EFC                  mov     a,CS                                            ;[INF] 2, 1
 1755  1755 0001B  C1                    push    ax                                              ;[INF] 1, 1
 1756  1756 0001C                ??bf_r_tau0_channel0_interrupt:
 1757  1757                      ; line    82 :     /* Start user code. Do not edit comment generated here */
 1758  1758                      ; line    83 :     
 1759  1759                      ; line    84 :     /* Stop this timer - we start it again in the debounce routi
 1760  1760                      ;              nes */
 1761  1761                      ; line    85 :     R_TAU0_Channel0_Stop();
 1762  1762                      $DGL    0,5
 1763  1763 0001C RFC000000              call    !!_R_TAU0_Channel0_Stop                         ;[INF] 4, 3
 1764  1764                      ; line    86 :     
 1765  1765                      ; line    87 :     /* Call the debounce callback routine */
 1766  1766                      ; line    88 :     SwitchDebounceIsrCallback();    
 1767  1767                      $DGL    0,8
 1768  1768 00020 RFC000000              call    !!_SwitchDebounceIsrCallback                    ;[INF] 4, 3
 1769  1769                      ; line    89 :     
 1770  1770                      ; line    90 :     /* End user code. Do not edit comment generated here */
 1771  1771                      ; line    91 : }
 1772  1772                      $DGL    0,11
 1773  1773 00024                ??ef_r_tau0_channel0_interrupt:
 1774  1774 00024  C0                    pop     ax                                              ;[INF] 1, 1
 1775  1775 00025  9EFC                  mov     CS,a                                            ;[INF] 2, 1
 1776  1776 00027  60                    mov     a,x                                             ;[INF] 1, 1
 1777  1777 00028  9EFD                  mov     ES,a                                            ;[INF] 2, 1
 1778  1778 0002A  C0                    pop     ax                                              ;[INF] 1, 1
 1779  1779 0002B RBD00                  movw    _@SEGAX,ax                                      ;[INF] 2, 1
 1780  1780 0002D  C0                    pop     ax                                              ;[INF] 1, 1
 1781  1781 0002E RBD00                  movw    _@SEGDE,ax                                      ;[INF] 2, 1
 1782  1782 00030  C0                    pop     ax                                              ;[INF] 1, 1
 1783  1783 00031 RBD00                  movw    _@RTARG0,ax                                     ;[INF] 2, 1
 1784  1784 00033  C0                    pop     ax                                              ;[INF] 1, 1
 1785  1785 00034 RBD00                  movw    _@RTARG2,ax                                     ;[INF] 2, 1
 1786  1786 00036  C0                    pop     ax                                              ;[INF] 1, 1
 1787  1787 00037 RBD00                  movw    _@RTARG4,ax                                     ;[INF] 2, 1
 1788  1788 00039  C0                    pop     ax                                              ;[INF] 1, 1
 1789  1789 0003A RBD00                  movw    _@RTARG6,ax                                     ;[INF] 2, 1
 1790  1790 0003C  C6                    pop     hl                                              ;[INF] 1, 1
 1791  1791 0003D  C4                    pop     de                                              ;[INF] 1, 1
 1792  1792 0003E  C2                    pop     bc                                              ;[INF] 1, 1
 1793  1793 0003F  C0                    pop     ax                                              ;[INF] 1, 1
 1794  1794 00040  61FC                  reti                                                    ;[INF] 2, 6
 1795  1795 00042                ??ee_r_tau0_channel0_interrupt:
 1796  1796                      ; line    92 : /***************************************************************
 1797  1797                      ;              ********************************************************
 1798  1798                      ; line    93 : * Function Name: r_tau0_channel1_interrupt
 1799  1799                      ; line    94 : * Description  : This function INTTM01 interrupt service routine
 1800  1800                      ;              .
 1801  1801                      ; line    95 : * Arguments    : None
 1802  1802                      ; line    96 : * Return Value : None
 1803  1803                      ; line    97 : ****************************************************************
 1804  1804                      ;              *******************************************************/
 1805  1805                      ; line    98 : __interrupt static void r_tau0_channel1_interrupt(void)
 1806  1806                      ; line    99 : {
 1807  1807 00042                _r_tau0_channel1_interrupt:
 1808  1808                      $DGL    1,28
 1809  1809 00042  C1                    push    ax                                              ;[INF] 1, 1
 1810  1810 00043  C3                    push    bc                                              ;[INF] 1, 1
 1811  1811 00044  C5                    push    de                                              ;[INF] 1, 1
 1812  1812 00045  C7                    push    hl                                              ;[INF] 1, 1
 1813  1813 00046 RAD00                  movw    ax,_@RTARG6                                     ;[INF] 2, 1
 1814  1814 00048  C1                    push    ax                                              ;[INF] 1, 1
 1815  1815 00049 RAD00                  movw    ax,_@RTARG4                                     ;[INF] 2, 1
 1816  1816 0004B  C1                    push    ax                                              ;[INF] 1, 1
 1817  1817 0004C RAD00                  movw    ax,_@RTARG2                                     ;[INF] 2, 1
 1818  1818 0004E  C1                    push    ax                                              ;[INF] 1, 1
 1819  1819 0004F RAD00                  movw    ax,_@RTARG0                                     ;[INF] 2, 1
 1820  1820 00051  C1                    push    ax                                              ;[INF] 1, 1
 1821  1821 00052 RAD00                  movw    ax,_@SEGDE                                      ;[INF] 2, 1
 1822  1822 00054  C1                    push    ax                                              ;[INF] 1, 1
 1823  1823 00055 RAD00                  movw    ax,_@SEGAX                                      ;[INF] 2, 1
 1824  1824 00057  C1                    push    ax                                              ;[INF] 1, 1
 1825  1825 00058  8EFD                  mov     a,ES                                            ;[INF] 2, 1
 1826  1826 0005A  70                    mov     x,a                                             ;[INF] 1, 1
 1827  1827 0005B  8EFC                  mov     a,CS                                            ;[INF] 2, 1
 1828  1828 0005D  C1                    push    ax                                              ;[INF] 1, 1
 1829  1829 0005E                ??bf_r_tau0_channel1_interrupt:
 1830  1830                      ; line   100 :     /* Start user code. Do not edit comment generated here */
 1831  1831                      ; line   101 :     
 1832  1832                      ; line   102 :     /* Stop this timer - we start it again in the debounce routi
 1833  1833                      ;              nes */
 1834  1834                      ; line   103 :     R_TAU0_Channel1_Stop();
 1835  1835                      $DGL    0,5
 1836  1836 0005E RFC000000              call    !!_R_TAU0_Channel1_Stop                         ;[INF] 4, 3
 1837  1837                      ; line   104 :     
 1838  1838                      ; line   105 :     /* Call the debounce callback routine */
 1839  1839                      ; line   106 :     SwitchDebounceIsrCallback(); 
 1840  1840                      $DGL    0,8
 1841  1841 00062 RFC000000              call    !!_SwitchDebounceIsrCallback                    ;[INF] 4, 3
 1842  1842                      ; line   107 :     
 1843  1843                      ; line   108 :     /* End user code. Do not edit comment generated here */
 1844  1844                      ; line   109 : }
 1845  1845                      $DGL    0,11
 1846  1846 00066                ??ef_r_tau0_channel1_interrupt:
 1847  1847 00066  C0                    pop     ax                                              ;[INF] 1, 1
 1848  1848 00067  9EFC                  mov     CS,a                                            ;[INF] 2, 1
 1849  1849 00069  60                    mov     a,x                                             ;[INF] 1, 1
 1850  1850 0006A  9EFD                  mov     ES,a                                            ;[INF] 2, 1
 1851  1851 0006C  C0                    pop     ax                                              ;[INF] 1, 1
 1852  1852 0006D RBD00                  movw    _@SEGAX,ax                                      ;[INF] 2, 1
 1853  1853 0006F  C0                    pop     ax                                              ;[INF] 1, 1
 1854  1854 00070 RBD00                  movw    _@SEGDE,ax                                      ;[INF] 2, 1
 1855  1855 00072  C0                    pop     ax                                              ;[INF] 1, 1
 1856  1856 00073 RBD00                  movw    _@RTARG0,ax                                     ;[INF] 2, 1
 1857  1857 00075  C0                    pop     ax                                              ;[INF] 1, 1
 1858  1858 00076 RBD00                  movw    _@RTARG2,ax                                     ;[INF] 2, 1
 1859  1859 00078  C0                    pop     ax                                              ;[INF] 1, 1
 1860  1860 00079 RBD00                  movw    _@RTARG4,ax                                     ;[INF] 2, 1
 1861  1861 0007B  C0                    pop     ax                                              ;[INF] 1, 1
 1862  1862 0007C RBD00                  movw    _@RTARG6,ax                                     ;[INF] 2, 1
 1863  1863 0007E  C6                    pop     hl                                              ;[INF] 1, 1
 1864  1864 0007F  C4                    pop     de                                              ;[INF] 1, 1
 1865  1865 00080  C2                    pop     bc                                              ;[INF] 1, 1
 1866  1866 00081  C0                    pop     ax                                              ;[INF] 1, 1
 1867  1867 00082  61FC                  reti                                                    ;[INF] 2, 6
 1868  1868 00084                ??ee_r_tau0_channel1_interrupt:
 1869  1869                      ; line   110 : /***************************************************************
 1870  1870                      ;              ********************************************************
 1871  1871                      ; line   111 : * Function Name: r_tau0_channel2_interrupt
 1872  1872                      ; line   112 : * Description  : This function INTTM02 interrupt service routine
 1873  1873                      ;              .
 1874  1874                      ; line   113 : * Arguments    : None
 1875  1875                      ; line   114 : * Return Value : None
 1876  1876                      ; line   115 : ****************************************************************
 1877  1877                      ;              *******************************************************/
 1878  1878                      ; line   116 : uint32_t cnt_tm2_int;
 1879  1879                      ; line   117 : __interrupt static void r_tau0_channel2_interrupt(void)
 1880  1880                      ; line   118 : {
 1881  1881 00084                _r_tau0_channel2_interrupt:
 1882  1882                      $DGL    1,34
 1883  1883 00084  C1                    push    ax                                              ;[INF] 1, 1
 1884  1884 00085  C3                    push    bc                                              ;[INF] 1, 1
 1885  1885 00086  C7                    push    hl                                              ;[INF] 1, 1
 1886  1886 00087  2006                  subw    sp,#06H                                         ;[INF] 2, 1
 1887  1887 00089  FBF8FF                movw    hl,sp                                           ;[INF] 3, 1
 1888  1888 0008C                ??bf_r_tau0_channel2_interrupt:
 1889  1889                      ; line   119 :     /* Start user code. Do not edit comment generated here */
 1890  1890                      ; line   120 :      /* Declare a temporary variable */
 1891  1891                      ; line   121 :     uint8_t a;
 1892  1892                      ; line   122 : 
 1893  1893                      ; line   123 :     /* Declare temporary character string */
 1894  1894                      ; line   124 :     char    lcd_buffer[] = "000";
 1895  1895                      $DGL    0,7
 1896  1896 0008C  C7                    push    hl                                              ;[INF] 1, 1
 1897  1897 0008D  17                    movw    ax,hl                                           ;[INF] 1, 1
 1898  1898 0008E  A1                    incw    ax                                              ;[INF] 1, 1
 1899  1899 0008F  16                    movw    hl,ax                                           ;[INF] 1, 1
 1900  1900 00090  F7                    clrw    bc                                              ;[INF] 1, 1
 1901  1901 00091                ?L0008:
 1902  1902 00091 R490000                mov     a,?L0007[bc]                                    ;[INF] 3, 1
 1903  1903 00094  9B                    mov     [hl],a                                          ;[INF] 1, 1
 1904  1904 00095  A3                    incw    bc                                              ;[INF] 1, 1
 1905  1905 00096  A7                    incw    hl                                              ;[INF] 1, 1
 1906  1906 00097  5104                  mov     a,#04H  ; 4                                     ;[INF] 2, 1
 1907  1907 00099  614A                  cmp     a,c                                             ;[INF] 2, 1
 1908  1908 0009B  DFF4                  bnz     $?L0008                                         ;[INF] 2, 4
 1909  1909 0009D  C6                    pop     hl                                              ;[INF] 1, 1
 1910  1910                      ; line   125 :     cnt_tm2_int++;
 1911  1911                      $DGL    0,8
 1912  1912 0009E RA20000                incw    !_cnt_tm2_int                                   ;[INF] 3, 2
 1913  1913 000A1  F6                    clrw    ax                                              ;[INF] 1, 1
 1914  1914 000A2 R420000                cmpw    ax,!_cnt_tm2_int                                ;[INF] 3, 1
 1915  1915 000A5  61F8                  sknz                                                    ;[INF] 2, 1
 1916  1916 000A7 RA20200                incw    !_cnt_tm2_int+2                                 ;[INF] 3, 2
 1917  1917 000AA                ?L0009:
 1918  1918                      ; line   126 : 
 1919  1919                      ; line   127 :     /* Clear TM02 interrupt flag */
 1920  1920                      ; line   128 :     TMIF02 = 0;
 1921  1921                      $DGL    0,11
 1922  1922 000AA  710BE3                clr1    IF1H.0                                          ;[INF] 3, 2
 1923  1923                      ; line   129 :    /* End user code. Do not edit comment generated here */
 1924  1924                      ; line   130 : }
 1925  1925                      $DGL    0,13
 1926  1926 000AD                ??ef_r_tau0_channel2_interrupt:
 1927  1927 000AD  1006                  addw    sp,#06H                                         ;[INF] 2, 1
 1928  1928 000AF  C6                    pop     hl                                              ;[INF] 1, 1
 1929  1929 000B0  C2                    pop     bc                                              ;[INF] 1, 1
 1930  1930 000B1  C0                    pop     ax                                              ;[INF] 1, 1
 1931  1931 000B2  61FC                  reti                                                    ;[INF] 2, 6
 1932  1932 000B4                ??ee_r_tau0_channel2_interrupt:
 1933  1933                      ; line   131 : /***************************************************************
 1934  1934                      ;              ********************************************************
 1935  1935                      ; line   132 : * Function Name: r_tau0_channel3_interrupt
 1936  1936                      ; line   133 : * Description  : This function INTTM03 interrupt service routine
 1937  1937                      ;              .
 1938  1938                      ; line   134 : * Arguments    : None
 1939  1939                      ; line   135 : * Return Value : None
 1940  1940                      ; line   136 : ****************************************************************
 1941  1941                      ;              *******************************************************/
 1942  1942                      ; line   137 : __interrupt static void r_tau0_channel3_interrupt(void)
 1943  1943                      ; line   138 : {
 1944  1944 000B4                _r_tau0_channel3_interrupt:
 1945  1945                      $DGL    1,43
 1946  1946 000B4                ??bf_r_tau0_channel3_interrupt:
 1947  1947                      ; line   139 :     /* Start user code. Do not edit comment generated here */
 1948  1948                      ; line   140 :      one_ms_delay_complete = TRUE;
 1949  1949                      $DGL    0,3
 1950  1950 000B4 RE50000                oneb    !_one_ms_delay_complete                         ;[INF] 3, 1
 1951  1951                      ; line   141 :    /* End user code. Do not edit comment generated here */
 1952  1952                      ; line   142 : }
 1953  1953                      $DGL    0,5
 1954  1954 000B7                ??ef_r_tau0_channel3_interrupt:
 1955  1955 000B7  61FC                  reti                                                    ;[INF] 2, 6
 1956  1956 000B9                ??ee_r_tau0_channel3_interrupt:
 1957  1957                      ; line   143 : 
 1958  1958                      ; line   144 : /* Start user code for adding. Do not edit comment generated her
 1959  1959                      ;              e */
 1960  1960                      ; line   145 : /***************************************************************
 1961  1961                      ;              ********************************************************
 1962  1962                      ; line   146 : * Function Name: R_TAU_MsDelay
 1963  1963                      ; line   147 : * Description  : Uses TAU0 channel 3 to wait for a specified num
 1964  1964                      ;              ber of milliseconds
 1965  1965                      ; line   148 : * Arguments    : uint16_t millisecs, number of milliseconds to w
 1966  1966                      ;              ait
 1967  1967                      ; line   149 : * Return Value : None
 1968  1968                      ; line   150 : ****************************************************************
 1969  1969                      ;              *******************************************************/
 1970  1970                      ; line   151 : void R_TAU_MsDelay (const uint16_t millisec)
 1971  1971                      ; line   152 : {
 1972  1972                      
 1973  1973 -----                @@CODEL CSEG
 1974  1974 00000                _R_TAU_MsDelay:
 1975  1975                      $DGL    1,49
 1976  1976 00000  C7                    push    hl                                              ;[INF] 1, 1
 1977  1977 00001  C1                    push    ax                                              ;[INF] 1, 1
 1978  1978 00002  C1                    push    ax                                              ;[INF] 1, 1
 1979  1979 00003  FBF8FF                movw    hl,sp                                           ;[INF] 3, 1
 1980  1980 00006                ??bf_R_TAU_MsDelay:
 1981  1981                      ; line   153 :     uint16_t ms_count = 0;
 1982  1982                      $DGL    0,2
 1983  1983 00006  F6                    clrw    ax                                              ;[INF] 1, 1
 1984  1984 00007  BB                    movw    [hl],ax ; ms_count                              ;[INF] 1, 1
 1985  1985                      ; line   154 : 
 1986  1986                      ; line   155 :     do
 1987  1987 00008                ?L0014:
 1988  1988                      ; line   156 :     {
 1989  1989 00008                ??bb00_R_TAU_MsDelay:
 1990  1990                      ; line   157 :         R_TAU0_Channel3_Start();
 1991  1991                      $DGL    0,6
 1992  1992 00008 RFC000000              call    !!_R_TAU0_Channel3_Start                        ;[INF] 4, 3
 1993  1993                      ; line   158 :         while (FALSE == one_ms_delay_complete)
 1994  1994                      $DGL    0,7
 1995  1995 0000C                ?L0017:
 1996  1996 0000C RD50000                cmp0    !_one_ms_delay_complete                         ;[INF] 3, 1
 1997  1997 0000F  61F8                  sknz                                                    ;[INF] 2, 1
 1998  1998                      ; line   159 :         {
 1999  1999 00011                ??bb01_R_TAU_MsDelay:
 2000  2000 00011                ??eb01_R_TAU_MsDelay:
 2001  2001                      ; line   160 :             /*Wait*/
 2002  2002                      ; line   161 :         }
 2003  2003                      $DGL    0,10
 2004  2004 00011  EFF9                  br      $?L0017                                         ;[INF] 2, 3
 2005  2005 00013                ?L0018:
 2006  2006                      ; line   162 :         R_TAU0_Channel3_Stop();
 2007  2007                      $DGL    0,11
 2008  2008 00013 RFC000000              call    !!_R_TAU0_Channel3_Stop                         ;[INF] 4, 3
 2009  2009                      ; line   163 :         one_ms_delay_complete = FALSE;
 2010  2010                      $DGL    0,12
 2011  2011 00017 RF50000                clrb    !_one_ms_delay_complete                         ;[INF] 3, 1
 2012  2012                      ; line   164 :         ms_count++;
 2013  2013                      $DGL    0,13
 2014  2014 0001A  617900                incw    [hl+0]  ; ms_count                              ;[INF] 3, 2
 2015  2015 0001D                ??eb00_R_TAU_MsDelay:
 2016  2016                      ; line   165 :     } while (ms_count < millisec);
 2017  2017                      $DGL    0,14
 2018  2018 0001D                ?L0016:
 2019  2019 0001D  AB                    movw    ax,[hl] ; ms_count                              ;[INF] 1, 1
 2020  2020 0001E  614902                cmpw    ax,[hl+2]       ; millisec                      ;[INF] 3, 1
 2021  2021 00021  DCE5                  bc      $?L0014                                         ;[INF] 2, 4
 2022  2022 00023                ?L0015:
 2023  2023                      ; line   166 : 
 2024  2024                      ; line   167 : 
 2025  2025                      ; line   168 : }
 2026  2026                      $DGL    0,17
 2027  2027 00023                ??ef_R_TAU_MsDelay:
 2028  2028 00023  1004                  addw    sp,#04H                                         ;[INF] 2, 1
 2029  2029 00025  C6                    pop     hl                                              ;[INF] 1, 1
 2030  2030 00026  D7                    ret                                                     ;[INF] 1, 6
 2031  2031 00027                ??ee_R_TAU_MsDelay:
 2032  2032                      
 2033  2033 -----                @@VECT20        CSEG    AT    0020H
 2034  2034 00020                _@vect20:
 2035  2035 00020 R0000                  DW      _r_tau0_channel0_interrupt
 2036  2036                      
 2037  2037 -----                @@VECT32        CSEG    AT    0032H
 2038  2038 00032                _@vect32:
 2039  2039 00032 R4200                  DW      _r_tau0_channel1_interrupt
 2040  2040 00034                _@vect34:
 2041  2041 00034 R8400                  DW      _r_tau0_channel2_interrupt
 2042  2042 00036                _@vect36:
 2043  2043 00036 RB400                  DW      _r_tau0_channel3_interrupt
 2044  2044                      
 2045  2045 -----                @@CODE  CSEG    BASE
 2046  2046                              END
 2047  2047                      
 2048  2048                      
 2049  2049                      ; *** Code Information ***
 2050  2050                      ;
 2051  2051                      ; $FILE C:\Users\nguye\Downloads\dtmf_reader_rl78\RSK_Module_test\RSKRL78L13\AD
 2052  2052                      ;       C_Repeat\cg_src\r_cg_tau_user.c
 2053  2053                      ;
 2054  2054                      ; $FUNC r_tau0_channel0_interrupt(81)
 2055  2055                      ;       void=(void)
 2056  2056                      ;       CODE SIZE= 66 bytes, CLOCK_SIZE= 52 clocks, STACK_SIZE= 26 bytes
 2057  2057                      ;
 2058  2058                      ; $CALL R_TAU0_Channel0_Stop(85)
 2059  2059                      ;       void=(void)
 2060  2060                      ;
 2061  2061                      ; $CALL SwitchDebounceIsrCallback(88)
 2062  2062                      ;       void=(void)
 2063  2063                      ;
 2064  2064                      ; $FUNC r_tau0_channel1_interrupt(99)
 2065  2065                      ;       void=(void)
 2066  2066                      ;       CODE SIZE= 66 bytes, CLOCK_SIZE= 52 clocks, STACK_SIZE= 26 bytes
 2067  2067                      ;
 2068  2068                      ; $CALL R_TAU0_Channel1_Stop(103)
 2069  2069                      ;       void=(void)
 2070  2070                      ;
 2071  2071                      ; $CALL SwitchDebounceIsrCallback(106)
 2072  2072                      ;       void=(void)
 2073  2073                      ;
 2074  2074                      ; $FUNC r_tau0_channel2_interrupt(118)
 2075  2075                      ;       void=(void)
 2076  2076                      ;       CODE SIZE= 48 bytes, CLOCK_SIZE= 40 clocks, STACK_SIZE= 14 bytes
 2077  2077                      ;
 2078  2078                      ; $FUNC r_tau0_channel3_interrupt(138)
 2079  2079                      ;       void=(void)
 2080  2080                      ;       CODE SIZE= 5 bytes, CLOCK_SIZE= 7 clocks, STACK_SIZE= 0 bytes
 2081  2081                      ;
 2082  2082                      ; $FUNC R_TAU_MsDelay(152)
 2083  2083                      ;       void=(unsigned short millisec:ax)
 2084  2084                      ;       CODE SIZE= 39 bytes, CLOCK_SIZE= 34 clocks, STACK_SIZE= 10 bytes
 2085  2085                      ;
 2086  2086                      ; $CALL R_TAU0_Channel3_Start(157)
 2087  2087                      ;       void=(void)
 2088  2088                      ;
 2089  2089                      ; $CALL R_TAU0_Channel3_Stop(162)
 2090  2090                      ;       void=(void)
 2091  2091                      
 2092  2092                      ; Target chip : R5F10WMG
 2093  2093                      ; Device file : V1.00 

Segment informations:

ADRS  LEN      NAME

00000 00000H.0 @@BITS
00000 00004H   @@CNST
00000 00002H   @@R_INIT
00000 00002H   @@INIT
00000 00004H   @@DATA
00000 00000H   @@R_INIS
00000 00000H   @@INIS
00000 00000H   @@DATS
00000 00000H   @@CNSTL
00000 00000H   @@RLINIT
00000 00000H   @@INITL
00000 00000H   @@DATAL
00000 00000H   @@CALT
00000 000B9H   @@BASE
00000 00027H   @@CODEL
00020 00002H   @@VECT20
00032 00006H   @@VECT32
00000 00000H   @@CODE

 Target chip : R5F10WMG
 Device file : V1.00
Assembly complete,     0 error(s) and     0 warning(s) found. (    0)
