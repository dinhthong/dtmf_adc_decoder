


78K0R Assembler V1.80                                                                                    Date: 5 Jun 2021 Page:   1



Command:  -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\Device\RL78\Devicefile Debug\r_cg_systeminit.asm -_msgoff
          -pDebug -oDebug -zs
Para-file:
In-file:  Debug\r_cg_systeminit.asm
Obj-file: Debug\r_cg_systeminit.rel
Prn-file: Debug\r_cg_systeminit.prn

      Assemble list

 ALNO  STNO ADRS   OBJECT   M I  SOURCE STATEMENT

    1     1                      ; 78K0R C Compiler V2.60 Assembler Source        Date: 5 Jun 2021 Time:10:38:23
    2     2                      
    3     3                      ; Command   : -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\
    4     4                      ;             Device\RL78\Devicefile ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_syste
    5     5                      ;             minit.c -oDebug -_msgoff -nq -i..\RSKRL78L13\ADC_Repeat\cg_src -v
    6     6                      ;              -w2 -zps -mm -mi0 -saDebug -li -no -g2
    7     7                      ; In-file   : ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_systeminit.c
    8     8                      ; Asm-file  : Debug\r_cg_systeminit.asm
    9     9                      ; Para-file : 
   10    10                      
   11    11                      $PROCESSOR(F10WMG)
   12    12                      $DEBUG
   13    13                      $NODEBUGA
   14    14                      $KANJICODE SJIS
   15    15                      $TOL_INF        03FH, 0260H, 00H, 04000H, 00H, 00H, 00H
   16    16                      
   17    17                      $DGS    FIL_NAM, .file,         01FH,   0FFFEH, 03FH,   067H,   01H,    00H
   18    18                      $DGS    AUX_FIL, r_cg_systeminit.c
   19    19                      $DGS    MOD_NAM, r_cg_systeminit,       00H,    0FFFEH, 00H,    077H,   00H,    00H
   20    20                      $DGS    SEC_NAM, @@BITS,        U,      U,      00H,    078H,   00H,    00H
   21    21                      $DGS    SEC_NAM, @@CNST,        U,      U,      00H,    078H,   00H,    00H
   22    22                      $DGS    SEC_NAM, @@R_INIT,      U,      U,      00H,    078H,   00H,    00H
   23    23                      $DGS    SEC_NAM, @@INIT,        U,      U,      00H,    078H,   00H,    00H
   24    24                      $DGS    SEC_NAM, @@DATA,        U,      U,      00H,    078H,   00H,    00H
   25    25                      $DGS    SEC_NAM, @@R_INIS,      U,      U,      00H,    078H,   00H,    00H
   26    26                      $DGS    SEC_NAM, @@INIS,        U,      U,      00H,    078H,   00H,    00H
   27    27                      $DGS    SEC_NAM, @@DATS,        U,      U,      00H,    078H,   00H,    00H
   28    28                      $DGS    SEC_NAM, @@CNSTL,       U,      U,      00H,    078H,   00H,    00H
   29    29                      $DGS    SEC_NAM, @@RLINIT,      U,      U,      00H,    078H,   00H,    00H
   30    30                      $DGS    SEC_NAM, @@INITL,       U,      U,      00H,    078H,   00H,    00H
   31    31                      $DGS    SEC_NAM, @@DATAL,       U,      U,      00H,    078H,   00H,    00H
   32    32                      $DGS    SEC_NAM, @@CALT,        U,      U,      00H,    078H,   00H,    00H
   33    33                      $DGS    SEC_NAM, @@CODE,        U,      U,      00H,    078H,   00H,    00H
   34    34                      $DGS    SEC_NAM, @@CODEL,       U,      U,      00H,    078H,   00H,    00H
   35    35                      $DGS    SEC_NAM, @@BASE,        U,      U,      00H,    078H,   00H,    00H
   36    36                      $DGS    GLV_SYM, _R_Systeminit, U,      U,      01H,    026H,   01H,    02H
   37    37                      $DGS    AUX_FUN, 00H,           U,      U,      019H,   01H,    00H
   38    38                      $DGS    BEG_FUN, ??bf_R_Systeminit,     U,      U,      00H,    065H,   01H,    00H
   39    39                      $DGS    AUX_BEG, 042H,          00H,    019H
   40    40                      $DGS    END_FUN, ??ef_R_Systeminit,     U,      U,      00H,    065H,   01H,    00H
   41    41                      $DGS    AUX_END, 0CH
   42    42                      $DGS    GLV_SYM, _hdwinit,      U,      U,      01H,    026H,   01H,    02H
   43    43                      $DGS    AUX_FUN, 00H,           U,      U,      01FH,   01H,    00H
   44    44                      $DGS    BEG_FUN, ??bf_hdwinit,  U,      U,      00H,    065H,   01H,    00H
   45    45                      $DGS    AUX_BEG, 056H,          00H,    01FH
   46    46                      $DGS    END_FUN, ??ef_hdwinit,  U,      U,      00H,    065H,   01H,    00H
   47    47                      $DGS    AUX_END, 04H
   48    48                      $DGS    GLV_SYM, _R_CGC_Get_ResetSource,        U,      U,      01H,    02H,    01H,    02H
   49    49                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   50    50                      $DGS    GLV_SYM, _R_PORT_Create,        U,      U,      01H,    02H,    01H,    02H
   51    51                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   52    52                      $DGS    GLV_SYM, _R_CGC_Create, U,      U,      01H,    02H,    01H,    02H
   53    53                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   54    54                      $DGS    GLV_SYM, _R_TAU0_Create,        U,      U,      01H,    02H,    01H,    02H
   55    55                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   56    56                      $DGS    GLV_SYM, _R_ADC_Create, U,      U,      01H,    02H,    01H,    02H
   57    57                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   58    58                      $DGS    GLV_SYM, _R_INTC_Create,        U,      U,      01H,    02H,    01H,    02H
   59    59                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   60    60                      
   61    61                              EXTRN   _R_CGC_Get_ResetSource
   62    62                              EXTRN   _R_PORT_Create
   63    63                              EXTRN   _R_CGC_Create
   64    64                              EXTRN   _R_TAU0_Create
   65    65                              EXTRN   _R_ADC_Create
   66    66                              EXTRN   _R_INTC_Create
   67    67                              PUBLIC  _R_Systeminit
   68    68                              PUBLIC  _hdwinit
   69    69                      
   70    70 -----                @@BITS  BSEG
   71    71                      
   72    72 -----                @@CNST  CSEG    MIRRORP
   73    73                      
   74    74 -----                @@R_INIT        CSEG    UNIT64KP
   75    75                      
   76    76 -----                @@INIT  DSEG    BASEP
   77    77                      
   78    78 -----                @@DATA  DSEG    BASEP
   79    79                      
   80    80 -----                @@R_INIS        CSEG    UNIT64KP
   81    81                      
   82    82 -----                @@INIS  DSEG    SADDRP
   83    83                      
   84    84 -----                @@DATS  DSEG    SADDRP
   85    85                      
   86    86 -----                @@CNSTL CSEG    PAGE64KP
   87    87                      
   88    88 -----                @@RLINIT        CSEG    UNIT64KP
   89    89                      
   90    90 -----                @@INITL DSEG    UNIT64KP
   91    91                      
   92    92 -----                @@DATAL DSEG    UNIT64KP
   93    93                      
   94    94 -----                @@CALT  CSEG    CALLT0
   95    95                      
   96    96                      ; line     1 : /***************************************************************
   97    97                      ;              ********************************************************
   98    98                      ; line     2 : * DISCLAIMER
   99    99                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  100   100                      ;              nd is only 
  101   101                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  102   102                      ;              orized. This 
  103   103                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  104   104                      ;              otected under 
  105   105                      ; line     6 : * all applicable laws, including copyright laws.
  106   106                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  107   107                      ;              IES REGARDING 
  108   108                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  109   109                      ;              G BUT NOT 
  110   110                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  111   111                      ;              ULAR PURPOSE 
  112   112                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  113   113                      ;              AIMED.
  114   114                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  115   115                      ;               RENESAS 
  116   116                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  117   117                      ;              ALL BE LIABLE 
  118   118                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  119   119                      ;               DAMAGES FOR 
  120   120                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  121   121                      ;              FILIATES HAVE 
  122   122                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  123   123                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  124   124                      ;               this software 
  125   125                      ; line    17 : * and to discontinue the availability of this software.  By usin
  126   126                      ;              g this software, 
  127   127                      ; line    18 : * you agree to the additional terms and conditions found by acce
  128   128                      ;              ssing the 
  129   129                      ; line    19 : * following link:
  130   130                      ; line    20 : * http://www.renesas.com/disclaimer
  131   131                      ; line    21 : *
  132   132                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  133   133                      ;               reserved.
  134   134                      ; line    23 : ****************************************************************
  135   135                      ;              *******************************************************/
  136   136                      ; line    24 : 
  137   137                      ; line    25 : /***************************************************************
  138   138                      ;              ********************************************************
  139   139                      ; line    26 : * File Name    : r_cg_macrodriver.h
  140   140                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  141   141                      ;              ]
  142   142                      ; line    28 : * Device(s)    : R5F10WMG
  143   143                      ; line    29 : * Tool-Chain   : CA78K0R
  144   144                      ; line    30 : * Description  : This file implements general head file.
  145   145                      ; line    31 : * Creation Date: 05-Jun-21
  146   146                      ; line    32 : ****************************************************************
  147   147                      ;              *******************************************************/
  148   148                      ; line    33 : #ifndef MODULEID_H
  149   149                      ; line    34 : #define MODULEID_H
  150   150                      ; line    35 : /***************************************************************
  151   151                      ;              ********************************************************
  152   152                      ; line    36 : Includes
  153   153                      ; line    37 : ****************************************************************
  154   154                      ;              *******************************************************/
  155   155                      ; line    38 : #pragma sfr
  156   156                      ; line    39 : #pragma DI
  157   157                      ; line    40 : #pragma EI
  158   158                      ; line    41 : #pragma NOP
  159   159                      ; line    42 : #pragma HALT
  160   160                      ; line    43 : #pragma STOP
  161   161                      ; line    44 : 
  162   162                      ; line    45 : /***************************************************************
  163   163                      ;              ********************************************************
  164   164                      ; line    46 : Macro definitions (Register bit)
  165   165                      ; line    47 : ****************************************************************
  166   166                      ;              *******************************************************/
  167   167                      ; line    48 : 
  168   168                      ; line    49 : /***************************************************************
  169   169                      ;              ********************************************************
  170   170                      ; line    50 : Macro definitions
  171   171                      ; line    51 : ****************************************************************
  172   172                      ;              *******************************************************/
  173   173                      ; line    52 : #ifndef __TYPEDEF__
  174   174                      ; line    53 : /* Status list definition */
  175   175                      ; line    54 : #define MD_STATUSBASE        (0x00U)
  176   176                      ; line    55 : #define MD_OK                (MD_STATUSBASE + 0x00U) /* register
  177   177                      ;               setting OK */
  178   178                      ; line    56 : #define MD_SPT               (MD_STATUSBASE + 0x01U) /* IIC stop
  179   179                      ;               */
  180   180                      ; line    57 : #define MD_NACK              (MD_STATUSBASE + 0x02U) /* IIC no A
  181   181                      ;              CK */
  182   182                      ; line    58 : #define MD_BUSY1             (MD_STATUSBASE + 0x03U) /* busy 1 *
  183   183                      ;              /
  184   184                      ; line    59 : #define MD_BUSY2             (MD_STATUSBASE + 0x04U) /* busy 2 *
  185   185                      ;              /
  186   186                      ; line    60 : 
  187   187                      ; line    61 : /* Error list definition */
  188   188                      ; line    62 : #define MD_ERRORBASE         (0x80U)
  189   189                      ; line    63 : #define MD_ERROR             (MD_ERRORBASE + 0x00U)  /* error */
  190   190                      ; line    64 : #define MD_ARGERROR          (MD_ERRORBASE + 0x01U)  /* error ag
  191   191                      ;              rument input error */
  192   192                      ; line    65 : #define MD_ERROR1            (MD_ERRORBASE + 0x02U)  /* error 1 
  193   193                      ;              */
  194   194                      ; line    66 : #define MD_ERROR2            (MD_ERRORBASE + 0x03U)  /* error 2 
  195   195                      ;              */
  196   196                      ; line    67 : #define MD_ERROR3            (MD_ERRORBASE + 0x04U)  /* error 3 
  197   197                      ;              */
  198   198                      ; line    68 : #define MD_ERROR4            (MD_ERRORBASE + 0x05U)  /* error 4 
  199   199                      ;              */
  200   200                      ; line    69 : #define MD_ERROR5            (MD_ERRORBASE + 0x06U)  /* error 5 
  201   201                      ;              */
  202   202                      ; line    70 : #endif
  203   203                      ; line    71 : 
  204   204                      ; line    72 : /***************************************************************
  205   205                      ;              ********************************************************
  206   206                      ; line    73 : Typedef definitions
  207   207                      ; line    74 : ****************************************************************
  208   208                      ;              *******************************************************/
  209   209                      ; line    75 : #ifndef __TYPEDEF__
  210   210                      ; line    76 : typedef signed char         int8_t;
  211   211                      ; line    77 : typedef unsigned char       uint8_t;
  212   212                      ; line    78 : typedef signed short        int16_t;
  213   213                      ; line    79 : typedef unsigned short      uint16_t;
  214   214                      ; line    80 : typedef signed long         int32_t;
  215   215                      ; line    81 : typedef unsigned long       uint32_t;
  216   216                      ; line    82 : typedef unsigned short      MD_STATUS;
  217   217                      ; line     1 : /***************************************************************
  218   218                      ;              ********************************************************
  219   219                      ; line     2 : * DISCLAIMER
  220   220                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  221   221                      ;              nd is only 
  222   222                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  223   223                      ;              orized. This 
  224   224                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  225   225                      ;              otected under 
  226   226                      ; line     6 : * all applicable laws, including copyright laws.
  227   227                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  228   228                      ;              IES REGARDING 
  229   229                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  230   230                      ;              G BUT NOT 
  231   231                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  232   232                      ;              ULAR PURPOSE 
  233   233                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  234   234                      ;              AIMED.
  235   235                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  236   236                      ;               RENESAS 
  237   237                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  238   238                      ;              ALL BE LIABLE 
  239   239                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  240   240                      ;               DAMAGES FOR 
  241   241                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  242   242                      ;              FILIATES HAVE 
  243   243                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  244   244                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  245   245                      ;               this software 
  246   246                      ; line    17 : * and to discontinue the availability of this software.  By usin
  247   247                      ;              g this software, 
  248   248                      ; line    18 : * you agree to the additional terms and conditions found by acce
  249   249                      ;              ssing the 
  250   250                      ; line    19 : * following link:
  251   251                      ; line    20 : * http://www.renesas.com/disclaimer
  252   252                      ; line    21 : *
  253   253                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  254   254                      ;               reserved.
  255   255                      ; line    23 : ****************************************************************
  256   256                      ;              *******************************************************/
  257   257                      ; line    24 : 
  258   258                      ; line    25 : /***************************************************************
  259   259                      ;              ********************************************************
  260   260                      ; line    26 : * File Name    : r_cg_cgc.h
  261   261                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  262   262                      ;              ]
  263   263                      ; line    28 : * Device(s)    : R5F10WMG
  264   264                      ; line    29 : * Tool-Chain   : CA78K0R
  265   265                      ; line    30 : * Description  : This file implements device driver for CGC modu
  266   266                      ;              le.
  267   267                      ; line    31 : * Creation Date: 05-Jun-21
  268   268                      ; line    32 : ****************************************************************
  269   269                      ;              *******************************************************/
  270   270                      ; line    33 : #ifndef CGC_H
  271   271                      ; line    34 : #define CGC_H
  272   272                      ; line    35 : 
  273   273                      ; line    36 : /***************************************************************
  274   274                      ;              ********************************************************
  275   275                      ; line    37 : Macro definitions (Register bit)
  276   276                      ; line    38 : ****************************************************************
  277   277                      ;              *******************************************************/
  278   278                      ; line    39 : /*
  279   279                      ; line    40 :     Clock operation mode control register (CMC)
  280   280                      ; line    41 : */
  281   281                      ; line    42 : /* High-speed system clock pin operation mode (EXCLK, OSCSEL) */
  282   282                      ; line    43 : #define _C0_CGC_HISYS_PIN           (0xC0U)
  283   283                      ; line    44 : #define _00_CGC_HISYS_PORT          (0x00U) /* X1, X2 as I/O por
  284   284                      ;              t */
  285   285                      ; line    45 : #define _40_CGC_HISYS_OSC           (0x40U) /* X1, X2 as crystal
  286   286                      ;              /ceramic resonator connection */
  287   287                      ; line    46 : #define _80_CGC_HISYS_PORT1         (0x80U) /* X1, X2 as I/O por
  288   288                      ;              t */
  289   289                      ; line    47 : #define _C0_CGC_HISYS_EXT           (0xC0U) /* X1 as I/O port, X
  290   290                      ;              2 as external clock input */
  291   291                      ; line    48 : /* Subsystem clock pin operation mode (EXCLKS, OSCSELS) */
  292   292                      ; line    49 : #define _30_CGC_SUB_PIN             (0x30U)
  293   293                      ; line    50 : #define _00_CGC_SUB_PORT            (0x00U) /* XT1, XT2 as I/O p
  294   294                      ;              ort */
  295   295                      ; line    51 : #define _10_CGC_SUB_OSC             (0x10U) /* XT1, XT2 as cryst
  296   296                      ;              al connection */
  297   297                      ; line    52 : #define _20_CGC_SUB_PORT1           (0x20U) /* XT1, XT2 as I/O p
  298   298                      ;              ort */
  299   299                      ; line    53 : #define _30_CGC_SUB_EXT             (0x30U) /* XT1 as I/O port, 
  300   300                      ;              XT2 as external clock input */
  301   301                      ; line    54 : /* XT1 oscillator oscillation mode selection (AMPHS1, AMPHS0) */
  302   302                      ; line    55 : #define _00_CGC_SUBMODE_DEFAULT     (0x00U)
  303   303                      ; line    56 : #define _00_CGC_SUBMODE_LOW         (0x00U) /* low power consump
  304   304                      ;              tion oscillation */
  305   305                      ; line    57 : #define _02_CGC_SUBMODE_NORMAL      (0x02U) /* normal oscillatio
  306   306                      ;              n */
  307   307                      ; line    58 : #define _04_CGC_SUBMODE_ULOW        (0x04U) /* ultra-low power c
  308   308                      ;              onsumption oscillation */
  309   309                      ; line    59 : /* Control of X1 high-speed system clock oscillation frequency (
  310   310                      ;              AMPH) */
  311   311                      ; line    60 : #define _00_CGC_SYSOSC_UNDER10M     (0x00U) /* fX <= 10MHz */
  312   312                      ; line    61 : #define _01_CGC_SYSOSC_OVER10M      (0x01U) /* fX > 10MHz */
  313   313                      ; line    62 : 
  314   314                      ; line    63 : /*
  315   315                      ; line    64 :     System clock control register (CKC)
  316   316                      ; line    65 : */
  317   317                      ; line    66 : /* Status of CPU/peripheral hardware clock fCLK (CLS) */
  318   318                      ; line    67 : #define _00_CGC_CPUCLK_MAIN         (0x00U) /* main system clock
  319   319                      ;               (fMAIN) */
  320   320                      ; line    68 : #define _80_CGC_CPUCLK_SUB          (0x80U) /* subsystem clock (
  321   321                      ;              fSUB) */
  322   322                      ; line    69 : /* Selection of CPU/peripheral hardware clock fCLK (CSS) */
  323   323                      ; line    70 : #define _00_CGC_CPUCLK_SELMAIN      (0x00U) /* main system clock
  324   324                      ;               (fMAIN) */
  325   325                      ; line    71 : #define _40_CGC_CPUCLK_SELSUB       (0x40U) /* subsystem clock (
  326   326                      ;              fSUB) */
  327   327                      ; line    72 : /* Status of Main system clock fMAIN (MCS) */
  328   328                      ; line    73 : #define _00_CGC_MAINCLK_HIO         (0x00U) /* high-speed OCO cl
  329   329                      ;              ock (fIH) */
  330   330                      ; line    74 : #define _20_CGC_MAINCLK_HISYS       (0x20U) /* high-speed system
  331   331                      ;               clock (fMX) */
  332   332                      ; line    75 : /* Selection of Main system clock fMAIN (MCM0) */
  333   333                      ; line    76 : #define _00_CGC_MAINCLK_SELHIO      (0x00U) /* high-speed OCO cl
  334   334                      ;              ock (fIH) */
  335   335                      ; line    77 : #define _10_CGC_MAINCLK_SELHISYS    (0x10U) /* high-speed system
  336   336                      ;               clock (fMX) */
  337   337                      ; line    78 : 
  338   338                      ; line    79 : /*
  339   339                      ; line    80 :     Clock operation status control register (CSC)
  340   340                      ; line    81 : */
  341   341                      ; line    82 : /* Control of high-speed system clock operation (MSTOP) */
  342   342                      ; line    83 : #define _00_CGC_HISYS_OPER          (0x00U) /* X1 oscillator/ext
  343   343                      ;              ernal clock operating */
  344   344                      ; line    84 : #define _80_CGC_HISYS_STOP          (0x80U) /* X1 oscillator/ext
  345   345                      ;              ernal clock stopped */
  346   346                      ; line    85 : /* Subsystem clock operation (XTSTOP) */
  347   347                      ; line    86 : #define _00_CGC_SUB_OPER            (0x00U) /* XT1 oscillator op
  348   348                      ;              erating */
  349   349                      ; line    87 : #define _40_CGC_SUB_STOP            (0x40U) /* XT1 oscillator st
  350   350                      ;              opped */
  351   351                      ; line    88 : /* High-speed OCO operation (HIOSTOP) */
  352   352                      ; line    89 : #define _00_CGC_HIO_OPER            (0x00U) /* high-speed OCO op
  353   353                      ;              erating */
  354   354                      ; line    90 : #define _01_CGC_HIO_STOP            (0x01U) /* high-speed OCO st
  355   355                      ;              opped */
  356   356                      ; line    91 : 
  357   357                      ; line    92 : /*
  358   358                      ; line    93 :     Oscillation stabilization time counter status register (OSTC
  359   359                      ;              )
  360   360                      ; line    94 : */
  361   361                      ; line    95 : /* Oscillation stabilization time status (MOST18 - MOST8) */
  362   362                      ; line    96 : #define _00_CGC_OSCSTAB_STA0        (0x00U) /* < 2^8/fX */
  363   363                      ; line    97 : #define _80_CGC_OSCSTAB_STA8        (0x80U) /* 2^8/fX */
  364   364                      ; line    98 : #define _C0_CGC_OSCSTAB_STA9        (0xC0U) /* 2^9/fX */
  365   365                      ; line    99 : #define _E0_CGC_OSCSTAB_STA10       (0xE0U) /* 2^10/fX */
  366   366                      ; line   100 : #define _F0_CGC_OSCSTAB_STA11       (0xF0U) /* 2^11/fX */
  367   367                      ; line   101 : #define _F8_CGC_OSCSTAB_STA13       (0xF8U) /* 2^13/fX */
  368   368                      ; line   102 : #define _FC_CGC_OSCSTAB_STA15       (0xFCU) /* 2^15/fX */
  369   369                      ; line   103 : #define _FE_CGC_OSCSTAB_STA17       (0xFEU) /* 2^17/fX */
  370   370                      ; line   104 : #define _FF_CGC_OSCSTAB_STA18       (0xFFU) /* 2^18/fX */
  371   371                      ; line   105 : 
  372   372                      ; line   106 : /*
  373   373                      ; line   107 :     Oscillation stabilization time select register (OSTS)
  374   374                      ; line   108 : */
  375   375                      ; line   109 : /* Oscillation stabilization time selection (OSTS2 - OSTS0) */
  376   376                      ; line   110 : #define _00_CGC_OSCSTAB_SEL8        (0x00U) /* 2^8/fX */
  377   377                      ; line   111 : #define _01_CGC_OSCSTAB_SEL9        (0x01U) /* 2^9/fX */
  378   378                      ; line   112 : #define _02_CGC_OSCSTAB_SEL10       (0x02U) /* 2^10/fX */
  379   379                      ; line   113 : #define _03_CGC_OSCSTAB_SEL11       (0x03U) /* 2^11/fX */
  380   380                      ; line   114 : #define _04_CGC_OSCSTAB_SEL13       (0x04U) /* 2^13/fX */
  381   381                      ; line   115 : #define _05_CGC_OSCSTAB_SEL15       (0x05U) /* 2^15/fX */
  382   382                      ; line   116 : #define _06_CGC_OSCSTAB_SEL17       (0x06U) /* 2^17/fX */
  383   383                      ; line   117 : #define _07_CGC_OSCSTAB_SEL18       (0x07U) /* 2^18/fX */
  384   384                      ; line   118 : 
  385   385                      ; line   119 : 
  386   386                      ; line   120 : /*
  387   387                      ; line   121 :     Operation speed mode control register (OSMC)
  388   388                      ; line   122 : */
  389   389                      ; line   123 : /* Setting in subsystem clock HALT mode (RTCLPC) */
  390   390                      ; line   124 : #define _00_CGC_SUBINHALT_ON        (0x00U) /* enables supply of
  391   391                      ;               subsystem clock to peripheral functions */
  392   392                      ; line   125 : #define _80_CGC_SUBINHALT_OFF       (0x80U) /* stops supply to p
  393   393                      ;              eripheral functions except RTC, interval timer, PCLBUZ and LCD *
  394   394                      ;              /
  395   395                      ; line   126 : /* Selection of operation clock for highaccuracy real-time clock
  396   396                      ;              , 12-bit interval timer, and LCD (WUTMMCK0) */
  397   397                      ; line   127 : #define _00_CGC_RTC_IT_LCD_CLK_FSUB (0x00U) /* Subsystem clock (
  398   398                      ;              fSUB) */
  399   399                      ; line   128 : #define _10_CGC_RTC_IT_LCD_CLK_FIL  (0x10U) /* Low-speed on-chip
  400   400                      ;               oscillator clock (fIL) */
  401   401                      ; line   129 : 
  402   402                      ; line   130 : /*
  403   403                      ; line   131 :     CRC control register (CRC0CTL)
  404   404                      ; line   132 : */
  405   405                      ; line   133 : /* CRC calculation operation (CRC0EN) */
  406   406                      ; line   134 : #define _00_CGC_CRC_OPERATION_OFF   (0x00U) /* stops operation *
  407   407                      ;              /
  408   408                      ; line   135 : #define _80_CGC_CRC_OPERATION_ON    (0x80U) /* CRC calculation i
  409   409                      ;              s performed after enter HALT mode */
  410   410                      ; line   136 : /* CRC calculation range (FEA2 - FEA0) */
  411   411                      ; line   137 : #define _00_CGC_CRC_AREA0           (0x00U) /* 0 to 3FFBH (16K t
  412   412                      ;              o 4bytes) */
  413   413                      ; line   138 : #define _01_CGC_CRC_AREA1           (0x01U) /* 0 to 7FFBH (32K t
  414   414                      ;              o 4bytes) */
  415   415                      ; line   139 : #define _02_CGC_CRC_AREA2           (0x02U) /* 0 to BFFBH (48K t
  416   416                      ;              o 4bytes) */
  417   417                      ; line   140 : #define _03_CGC_CRC_AREA3           (0x03U) /* 0 to FFFBH (64K t
  418   418                      ;              o 4bytes) */
  419   419                      ; line   141 : #define _04_CGC_CRC_AREA4           (0x04U) /* 0 to 13FFBH (80K 
  420   420                      ;              to 4bytes) */
  421   421                      ; line   142 : #define _05_CGC_CRC_AREA5           (0x05U) /* 0 to 17FFBH (96K 
  422   422                      ;              to 4bytes) */
  423   423                      ; line   143 : #define _06_CGC_CRC_AREA6           (0x06U) /* 0 to 1BFFBH (112K
  424   424                      ;               to 4bytes) */
  425   425                      ; line   144 : #define _07_CGC_CRC_AREA7           (0x07U) /* 0 to 1FFFBH (128K
  426   426                      ;               to 4bytes) */
  427   427                      ; line   145 : 
  428   428                      ; line   146 : /*
  429   429                      ; line   147 :     Illegal memory access detection control register (IAWCTL)
  430   430                      ; line   148 : */
  431   431                      ; line   149 : /* Illegal memory access detection control (IAWEN) */
  432   432                      ; line   150 : #define _00_CGC_ILLEGAL_ACCESS_OFF  (0x00U) /* disables illegal 
  433   433                      ;              memory access detection */
  434   434                      ; line   151 : #define _80_CGC_ILLEGAL_ACCESS_ON   (0x80U) /* enables illegal m
  435   435                      ;              emory access detection */
  436   436                      ; line   152 : /* RAM guard area (GRAM1, GRAM0) */
  437   437                      ; line   153 : #define _00_CGC_RAM_GUARD_OFF       (0x00U) /* invalid, it is po
  438   438                      ;              ssible to write RAM */
  439   439                      ; line   154 : #define _10_CGC_RAM_GUARD_ARAE0     (0x10U) /* 128 bytes from RA
  440   440                      ;              M bottom address */
  441   441                      ; line   155 : #define _20_CGC_RAM_GUARD_ARAE1     (0x20U) /* 256 bytes from RA
  442   442                      ;              M bottom address */
  443   443                      ; line   156 : #define _30_CGC_RAM_GUARD_ARAE2     (0x30U) /* 512 bytes from RA
  444   444                      ;              M bottom address */
  445   445                      ; line   157 : /* PORT register guard (GPORT) */
  446   446                      ; line   158 : #define _00_CGC_PORT_GUARD_OFF      (0x00U) /* invalid, it is po
  447   447                      ;              ssible to write PORT register */
  448   448                      ; line   159 : #define _04_CGC_PORT_GUARD_ON       (0x04U) /* valid, it is impo
  449   449                      ;              ssible to write PORT register, but possible for read */
  450   450                      ; line   160 : /* Interrupt register guard (GINT) */
  451   451                      ; line   161 : #define _00_CGC_INT_GUARD_OFF       (0x00U) /* invalid, it is po
  452   452                      ;              ssible to write interrupt register */
  453   453                      ; line   162 : #define _02_CGC_INT_GUARD_ON        (0x02U) /* valid, it is impo
  454   454                      ;              ssible to write, but possible for read */
  455   455                      ; line   163 : /* CSC register guard (GCSC) */
  456   456                      ; line   164 : #define _00_CGC_CSC_GUARD_OFF       (0x00U) /* invalid, it is po
  457   457                      ;              ssible to write CSC register */
  458   458                      ; line   165 : #define _01_CGC_CSC_GUARD_ON        (0x01U) /* valid, it is impo
  459   459                      ;              ssible to write CSC register, but possible for read */
  460   460                      ; line   166 : 
  461   461                      ; line   167 : /*
  462   462                      ; line   168 :     Port mode select register (PMS)
  463   463                      ; line   169 : */
  464   464                      ; line   170 : /* Illegal memory access detection control (PMS0) */
  465   465                      ; line   171 : #define _00_CGC_PORT_OUTPUT_PMN     (0x00U) /* when PMmn = 0 (ou
  466   466                      ;              tput mode), Pmn value (port latch) is read */
  467   467                      ; line   172 : #define _01_CGC_PORT_OUTPUT_LEVEL   (0x01U) /* when PMmn = 0 (ou
  468   468                      ;              tput mode), digital output level of the pin is read. */
  469   469                      ; line   173 : 
  470   470                      ; line   174 : /***************************************************************
  471   471                      ;              ********************************************************
  472   472                      ; line   175 : Macro definitions
  473   473                      ; line   176 : ****************************************************************
  474   474                      ;              *******************************************************/
  475   475                      ; line   177 : #define CGC_SUBWAITTIME             (30U)   /* change the waitin
  476   476                      ;              g time according to the system */
  477   477                      ; line   178 : 
  478   478                      ; line   179 : /***************************************************************
  479   479                      ;              ********************************************************
  480   480                      ; line   180 : Typedef definitions
  481   481                      ; line   181 : ****************************************************************
  482   482                      ;              *******************************************************/
  483   483                      ; line   182 : typedef enum
  484   484                      ; line   183 : {
  485   485                      ; line   184 :     HIOCLK, 
  486   486                      ; line   185 :     SYSX1CLK, 
  487   487                      ; line   186 :     SYSEXTCLK,
  488   488                      ; line   187 :     SUBXT1CLK, 
  489   489                      ; line   188 :     SUBEXTCLK
  490   490                      ; line   189 : } clock_mode_t;
  491   491                      ; line   190 : 
  492   492                      ; line   191 : /***************************************************************
  493   493                      ;              ********************************************************
  494   494                      ; line   192 : Global functions
  495   495                      ; line   193 : ****************************************************************
  496   496                      ;              *******************************************************/
  497   497                      ; line   194 : void R_CGC_Create(void);
  498   498                      ; line   195 : void R_CGC_Get_ResetSource(void);
  499   499                      ; line     1 : /***************************************************************
  500   500                      ;              ********************************************************
  501   501                      ; line     2 : * DISCLAIMER
  502   502                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  503   503                      ;              nd is only 
  504   504                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  505   505                      ;              orized. This 
  506   506                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  507   507                      ;              otected under 
  508   508                      ; line     6 : * all applicable laws, including copyright laws.
  509   509                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  510   510                      ;              IES REGARDING 
  511   511                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  512   512                      ;              G BUT NOT 
  513   513                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  514   514                      ;              ULAR PURPOSE 
  515   515                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  516   516                      ;              AIMED.
  517   517                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  518   518                      ;               RENESAS 
  519   519                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  520   520                      ;              ALL BE LIABLE 
  521   521                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  522   522                      ;               DAMAGES FOR 
  523   523                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  524   524                      ;              FILIATES HAVE 
  525   525                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  526   526                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  527   527                      ;               this software 
  528   528                      ; line    17 : * and to discontinue the availability of this software.  By usin
  529   529                      ;              g this software, 
  530   530                      ; line    18 : * you agree to the additional terms and conditions found by acce
  531   531                      ;              ssing the 
  532   532                      ; line    19 : * following link:
  533   533                      ; line    20 : * http://www.renesas.com/disclaimer
  534   534                      ; line    21 : *
  535   535                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  536   536                      ;               reserved.
  537   537                      ; line    23 : ****************************************************************
  538   538                      ;              *******************************************************/
  539   539                      ; line    24 : 
  540   540                      ; line    25 : /***************************************************************
  541   541                      ;              ********************************************************
  542   542                      ; line    26 : * File Name    : r_cg_port.h
  543   543                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  544   544                      ;              ]
  545   545                      ; line    28 : * Device(s)    : R5F10WMG
  546   546                      ; line    29 : * Tool-Chain   : CA78K0R
  547   547                      ; line    30 : * Description  : This file implements device driver for Port mod
  548   548                      ;              ule.
  549   549                      ; line    31 : * Creation Date: 05-Jun-21
  550   550                      ; line    32 : ****************************************************************
  551   551                      ;              *******************************************************/
  552   552                      ; line    33 : #ifndef PORT_H
  553   553                      ; line    34 : #define PORT_H
  554   554                      ; line    35 : 
  555   555                      ; line    36 : /***************************************************************
  556   556                      ;              ********************************************************
  557   557                      ; line    37 : Macro definitions (Register bit)
  558   558                      ; line    38 : ****************************************************************
  559   559                      ;              *******************************************************/
  560   560                      ; line    39 : /*
  561   561                      ; line    40 :     Port Mode Register (PMm)
  562   562                      ; line    41 : */
  563   563                      ; line    42 : /* Pmn pin I/O mode selection (PMm7 - PMm0) */
  564   564                      ; line    43 : #define _01_PMn0_NOT_USE        (0x01U) /* not use Pn0 as digita
  565   565                      ;              l I/O */
  566   566                      ; line    44 : #define _01_PMn0_MODE_INPUT     (0x01U) /* use Pn0 as input mode
  567   567                      ;               */
  568   568                      ; line    45 : #define _00_PMn0_MODE_OUTPUT    (0x00U) /* use Pn0 as output mod
  569   569                      ;              e */
  570   570                      ; line    46 : #define _02_PMn1_NOT_USE        (0x02U) /* not use Pn1 as digita
  571   571                      ;              l I/O */
  572   572                      ; line    47 : #define _02_PMn1_MODE_INPUT     (0x02U) /* use Pn1 as input mode
  573   573                      ;               */
  574   574                      ; line    48 : #define _00_PMn1_MODE_OUTPUT    (0x00U) /* use Pn1 as output mod
  575   575                      ;              e */
  576   576                      ; line    49 : #define _04_PMn2_NOT_USE        (0x04U) /* not use Pn2 as digita
  577   577                      ;              l I/O */
  578   578                      ; line    50 : #define _04_PMn2_MODE_INPUT     (0x04U) /* use Pn2 as input mode
  579   579                      ;               */
  580   580                      ; line    51 : #define _00_PMn2_MODE_OUTPUT    (0x00U) /* use Pn2 as output mod
  581   581                      ;              e */
  582   582                      ; line    52 : #define _08_PMn3_NOT_USE        (0x08U) /* not use Pn3 as digita
  583   583                      ;              l I/O */
  584   584                      ; line    53 : #define _08_PMn3_MODE_INPUT     (0x08U) /* use Pn3 as input mode
  585   585                      ;               */
  586   586                      ; line    54 : #define _00_PMn3_MODE_OUTPUT    (0x00U) /* use Pn3 as output mod
  587   587                      ;              e */
  588   588                      ; line    55 : #define _10_PMn4_NOT_USE        (0x10U) /* not use Pn4 as digita
  589   589                      ;              l I/O */
  590   590                      ; line    56 : #define _10_PMn4_MODE_INPUT     (0x10U) /* use Pn4 as input mode
  591   591                      ;               */
  592   592                      ; line    57 : #define _00_PMn4_MODE_OUTPUT    (0x00U) /* use Pn4 as output mod
  593   593                      ;              e */
  594   594                      ; line    58 : #define _20_PMn5_NOT_USE        (0x20U) /* not use Pn5 as digita
  595   595                      ;              l I/O */
  596   596                      ; line    59 : #define _20_PMn5_MODE_INPUT     (0x20U) /* use Pn5 as input mode
  597   597                      ;               */
  598   598                      ; line    60 : #define _00_PMn5_MODE_OUTPUT    (0x00U) /* use Pn5 as output mod
  599   599                      ;              e */
  600   600                      ; line    61 : #define _40_PMn6_NOT_USE        (0x40U) /* not use Pn6 as digita
  601   601                      ;              l I/O */
  602   602                      ; line    62 : #define _40_PMn6_MODE_INPUT     (0x40U) /* use Pn6 as input mode
  603   603                      ;               */
  604   604                      ; line    63 : #define _00_PMn6_MODE_OUTPUT    (0x00U) /* use Pn6 as output mod
  605   605                      ;              e */
  606   606                      ; line    64 : #define _80_PMn7_NOT_USE        (0x80U) /* not use Pn7 as digita
  607   607                      ;              l I/O */
  608   608                      ; line    65 : #define _80_PMn7_MODE_INPUT     (0x80U) /* use Pn7 as input mode
  609   609                      ;               */
  610   610                      ; line    66 : #define _00_PMn7_MODE_OUTPUT    (0x00U) /* use Pn7 as output mod
  611   611                      ;              e */
  612   612                      ; line    67 : 
  613   613                      ; line    68 : /*
  614   614                      ; line    69 :     Port Register (Pm)
  615   615                      ; line    70 : */
  616   616                      ; line    71 : /* Pmn pin data (Pm0 to Pm7) */
  617   617                      ; line    72 : #define _00_Pn0_OUTPUT_0        (0x00U) /* Pn0 output 0 */
  618   618                      ; line    73 : #define _01_Pn0_OUTPUT_1        (0x01U) /* Pn0 output 1 */
  619   619                      ; line    74 : #define _00_Pn1_OUTPUT_0        (0x00U) /* Pn1 output 0 */
  620   620                      ; line    75 : #define _02_Pn1_OUTPUT_1        (0x02U) /* Pn1 output 1 */
  621   621                      ; line    76 : #define _00_Pn2_OUTPUT_0        (0x00U) /* Pn2 output 0 */
  622   622                      ; line    77 : #define _04_Pn2_OUTPUT_1        (0x04U) /* Pn2 output 1 */
  623   623                      ; line    78 : #define _00_Pn3_OUTPUT_0        (0x00U) /* Pn3 output 0 */
  624   624                      ; line    79 : #define _08_Pn3_OUTPUT_1        (0x08U) /* Pn3 output 1 */
  625   625                      ; line    80 : #define _00_Pn4_OUTPUT_0        (0x00U) /* Pn4 output 0 */
  626   626                      ; line    81 : #define _10_Pn4_OUTPUT_1        (0x10U) /* Pn4 output 1 */
  627   627                      ; line    82 : #define _00_Pn5_OUTPUT_0        (0x00U) /* Pn5 output 0 */
  628   628                      ; line    83 : #define _20_Pn5_OUTPUT_1        (0x20U) /* Pn5 output 1 */
  629   629                      ; line    84 : #define _00_Pn6_OUTPUT_0        (0x00U) /* Pn6 output 0 */
  630   630                      ; line    85 : #define _40_Pn6_OUTPUT_1        (0x40U) /* Pn6 output 1 */
  631   631                      ; line    86 : #define _00_Pn7_OUTPUT_0        (0x00U) /* Pn7 output 0 */
  632   632                      ; line    87 : #define _80_Pn7_OUTPUT_1        (0x80U) /* Pn7 output 1 */
  633   633                      ; line    88 : 
  634   634                      ; line    89 : /*
  635   635                      ; line    90 :     Pull-up Resistor Option Register (PUm)
  636   636                      ; line    91 : */
  637   637                      ; line    92 : /* Pmn pin on-chip pull-up resistor selection (PUmn) */
  638   638                      ; line    93 : #define _00_PUn0_PULLUP_OFF     (0x00U) /* Pn0 pull-up resistor 
  639   639                      ;              not connected */
  640   640                      ; line    94 : #define _01_PUn0_PULLUP_ON      (0x01U) /* Pn0 pull-up resistor 
  641   641                      ;              connected */
  642   642                      ; line    95 : #define _00_PUn1_PULLUP_OFF     (0x00U) /* Pn1 pull-up resistor 
  643   643                      ;              not connected */
  644   644                      ; line    96 : #define _02_PUn1_PULLUP_ON      (0x02U) /* Pn1 pull-up resistor 
  645   645                      ;              connected */
  646   646                      ; line    97 : #define _00_PUn2_PULLUP_OFF     (0x00U) /* Pn2 Pull-up resistor 
  647   647                      ;              not connected */
  648   648                      ; line    98 : #define _04_PUn2_PULLUP_ON      (0x04U) /* Pn2 pull-up resistor 
  649   649                      ;              connected */
  650   650                      ; line    99 : #define _00_PUn3_PULLUP_OFF     (0x00U) /* Pn3 pull-up resistor 
  651   651                      ;              not connected */
  652   652                      ; line   100 : #define _08_PUn3_PULLUP_ON      (0x08U) /* Pn3 pull-up resistor 
  653   653                      ;              connected */
  654   654                      ; line   101 : #define _00_PUn4_PULLUP_OFF     (0x00U) /* Pn4 pull-up resistor 
  655   655                      ;              not connected */
  656   656                      ; line   102 : #define _10_PUn4_PULLUP_ON      (0x10U) /* Pn4 pull-up resistor 
  657   657                      ;              connected */
  658   658                      ; line   103 : #define _00_PUn5_PULLUP_OFF     (0x00U) /* Pn5 pull-up resistor 
  659   659                      ;              not connected */
  660   660                      ; line   104 : #define _20_PUn5_PULLUP_ON      (0x20U) /* Pn5 pull-up resistor 
  661   661                      ;              connected */
  662   662                      ; line   105 : #define _00_PUn6_PULLUP_OFF     (0x00U) /* Pn6 pull-up resistor 
  663   663                      ;              not connected */
  664   664                      ; line   106 : #define _40_PUn6_PULLUP_ON      (0x40U) /* Pn6 pull-up resistor 
  665   665                      ;              connected */
  666   666                      ; line   107 : #define _00_PUn7_PULLUP_OFF     (0x00U) /* Pn7 pull-up resistor 
  667   667                      ;              not connected */
  668   668                      ; line   108 : #define _80_PUn7_PULLUP_ON      (0x80U) /* Pn7 pull-up resistor 
  669   669                      ;              connected */
  670   670                      ; line   109 : 
  671   671                      ; line   110 : /*
  672   672                      ; line   111 :     Port Input Mode Register (PIMm)
  673   673                      ; line   112 : */
  674   674                      ; line   113 : /* Pmn pin input buffer selection (PIMmn) */
  675   675                      ; line   114 : #define _00_PIMn3_TTL_OFF       (0x00U) /* set Pn3 normal input 
  676   676                      ;              buffer */
  677   677                      ; line   115 : #define _08_PIMn3_TTL_ON        (0x08U) /* set Pn3 TTL input buf
  678   678                      ;              fer */
  679   679                      ; line   116 : #define _00_PIMn4_TTL_OFF       (0x00U) /* set Pn4 normal input 
  680   680                      ;              buffer */
  681   681                      ; line   117 : #define _10_PIMn4_TTL_ON        (0x10U) /* set Pn4 TTL input buf
  682   682                      ;              fer */
  683   683                      ; line   118 : #define _00_PIMn5_TTL_OFF       (0x00U) /* set Pn5 normal input 
  684   684                      ;              buffer */
  685   685                      ; line   119 : #define _20_PIMn5_TTL_ON        (0x20U) /* set Pn5 TTL input buf
  686   686                      ;              fer */
  687   687                      ; line   120 : #define _00_PIMn6_TTL_OFF       (0x00U) /* set Pn6 normal input 
  688   688                      ;              buffer */
  689   689                      ; line   121 : #define _40_PIMn6_TTL_ON        (0x40U) /* set Pn6 TTL input buf
  690   690                      ;              fer */
  691   691                      ; line   122 : #define _00_PIMn7_TTL_OFF       (0x00U) /* set Pn7 normal input 
  692   692                      ;              buffer */
  693   693                      ; line   123 : #define _80_PIMn7_TTL_ON        (0x80U) /* set Pn7 TTL input buf
  694   694                      ;              fer */
  695   695                      ; line   124 : 
  696   696                      ; line   125 : /*
  697   697                      ; line   126 :     Port Output Mode Register (POMm)
  698   698                      ; line   127 : */
  699   699                      ; line   128 : /* Pmn pin output mode selection (POMmn) */
  700   700                      ; line   129 : #define _00_POMn0_NCH_OFF       (0x00U) /* set Pn0 output normal
  701   701                      ;               mode */
  702   702                      ; line   130 : #define _01_POMn0_NCH_ON        (0x01U) /* set Pn0 output N-ch o
  703   703                      ;              pen-drain mode */
  704   704                      ; line   131 : #define _00_POMn2_NCH_OFF       (0x00U) /* set Pn2 output normal
  705   705                      ;               mode */
  706   706                      ; line   132 : #define _04_POMn2_NCH_ON        (0x04U) /* set Pn2 output N-ch o
  707   707                      ;              pen-drain mode */
  708   708                      ; line   133 : #define _00_POMn3_NCH_OFF       (0x00U) /* set Pn3 output normal
  709   709                      ;               mode */
  710   710                      ; line   134 : #define _08_POMn3_NCH_ON        (0x08U) /* set Pn3 output N-ch o
  711   711                      ;              pen-drain mode */
  712   712                      ; line   135 : #define _00_POMn4_NCH_OFF       (0x00U) /* set Pn4 output normal
  713   713                      ;               mode */
  714   714                      ; line   136 : #define _10_POMn4_NCH_ON        (0x10U) /* set Pn4 output N-ch o
  715   715                      ;              pen-drain mode */
  716   716                      ; line   137 : #define _00_POMn5_NCH_OFF       (0x00U) /* set Pn5 output normal
  717   717                      ;               mode */
  718   718                      ; line   138 : #define _20_POMn5_NCH_ON        (0x20U) /* set Pn5 output N-ch o
  719   719                      ;              pen-drain mode */
  720   720                      ; line   139 : #define _00_POMn6_NCH_OFF       (0x00U) /* set Pn6 output normal
  721   721                      ;               mode */
  722   722                      ; line   140 : #define _40_POMn6_NCH_ON        (0x40U) /* set Pn6 output N-ch o
  723   723                      ;              pen-drain mode */
  724   724                      ; line   141 : #define _00_POMn7_NCH_OFF       (0x00U) /* set Pn7 output normal
  725   725                      ;               mode */
  726   726                      ; line   142 : #define _80_POMn7_NCH_ON        (0x80U) /* set Pn7 output N-ch o
  727   727                      ;              pen-drain mode */
  728   728                      ; line   143 : 
  729   729                      ; line   144 : /*
  730   730                      ; line   145 :     Port Operation Mode Register (PMCm)
  731   731                      ; line   146 : */
  732   732                      ; line   147 : /* Pmn pin digital input buffer selection (PMCmn) */
  733   733                      ; line   148 : #define _01_PMCn0_NOT_USE       (0x01U) /* not use Pn0 digital i
  734   734                      ;              nput */
  735   735                      ; line   149 : #define _00_PMCn0_DI_ON         (0x00U) /* enable Pn0 digital in
  736   736                      ;              put */
  737   737                      ; line   150 : #define _02_PMCn1_NOT_USE       (0x02U) /* not use Pn1 digital i
  738   738                      ;              nput */
  739   739                      ; line   151 : #define _00_PMCn1_DI_ON         (0x00U) /* enable Pn1 digital in
  740   740                      ;              put */
  741   741                      ; line   152 : #define _04_PMCn2_NOT_USE       (0x04U) /* not use Pn2 digital i
  742   742                      ;              nput */
  743   743                      ; line   153 : #define _00_PMCn2_DI_ON         (0x00U) /* enable Pn2 digital in
  744   744                      ;              put */
  745   745                      ; line   154 : #define _08_PMCn3_NOT_USE       (0x08U) /* not use Pn3 digital i
  746   746                      ;              nput */
  747   747                      ; line   155 : #define _00_PMCn3_DI_ON         (0x00U) /* enable Pn3 digital in
  748   748                      ;              put */
  749   749                      ; line   156 : #define _10_PMCn4_NOT_USE       (0x10U) /* not use Pn4 digital i
  750   750                      ;              nput */
  751   751                      ; line   157 : #define _00_PMCn4_DI_ON         (0x00U) /* enable Pn4 digital in
  752   752                      ;              put */
  753   753                      ; line   158 : #define _20_PMCn5_NOT_USE       (0x20U) /* not use Pn5 digital i
  754   754                      ;              nput */
  755   755                      ; line   159 : #define _00_PMCn5_DI_ON         (0x00U) /* enable Pn5 digital in
  756   756                      ;              put */
  757   757                      ; line   160 : #define _40_PMCn6_NOT_USE       (0x40U) /* not use Pn6 digital i
  758   758                      ;              nput */
  759   759                      ; line   161 : #define _00_PMCn6_DI_ON         (0x00U) /* enable Pn6 digital in
  760   760                      ;              put */
  761   761                      ; line   162 : #define _80_PMCn7_NOT_USE       (0x80U) /* not use Pn7 digital i
  762   762                      ;              nput */
  763   763                      ; line   163 : #define _00_PMCn7_DI_ON         (0x00U) /* enable Pn7 digital in
  764   764                      ;              put */
  765   765                      ; line   164 : 
  766   766                      ; line   165 : /*
  767   767                      ; line   166 :     AD port configuration register (ADPC)
  768   768                      ; line   167 : */
  769   769                      ; line   168 : #define _00_ADPC_DI_OFF         (0x00U) /* use P21, P20 as analo
  770   770                      ;              g input */
  771   771                      ; line   169 : #define _01_ADPC_DI_ON          (0x01U) /* use P21, P20 as digit
  772   772                      ;              al input */
  773   773                      ; line   170 : #define _02_ADPC_DI_ON          (0x02U) /* use P20 as digital in
  774   774                      ;              put */
  775   775                      ; line   171 : 
  776   776                      ; line   172 : /*
  777   777                      ; line   173 :     LCD port function registers 00 (PFSEG00)
  778   778                      ; line   174 : */
  779   779                      ; line   175 : /* Port (other than segment output)/segment outputs specificatio
  780   780                      ;              n of Pmn pins (PFSEGxx) */
  781   781                      ; line   176 : #define _00_PFSEG04_PORT        (0x00U) /* used the P50 pin as p
  782   782                      ;              ort (other than segment output) */
  783   783                      ; line   177 : #define _10_PFSEG04_SEG         (0x10U) /* used the P50 pin as s
  784   784                      ;              egment output */
  785   785                      ; line   178 : #define _00_PFSEG05_PORT        (0x00U) /* used the P51 pin as p
  786   786                      ;              ort (other than segment output) */
  787   787                      ; line   179 : #define _20_PFSEG05_SEG         (0x20U) /* used the P51 pin as s
  788   788                      ;              egment output */
  789   789                      ; line   180 : #define _00_PFSEG06_PORT        (0x00U) /* used the P52 pin as p
  790   790                      ;              ort (other than segment output) */
  791   791                      ; line   181 : #define _40_PFSEG06_SEG         (0x40U) /* used the P52 pin as s
  792   792                      ;              egment output */
  793   793                      ; line   182 : #define _00_PFSEG07_PORT        (0x00U) /* used the P53 pin as p
  794   794                      ;              ort (other than segment output) */
  795   795                      ; line   183 : #define _80_PFSEG07_SEG         (0x80U) /* used the P53 pin as s
  796   796                      ;              egment output */
  797   797                      ; line   184 : 
  798   798                      ; line   185 : /*
  799   799                      ; line   186 :     LCD port function registers 01 (PFSEG01)
  800   800                      ; line   187 : */
  801   801                      ; line   188 : /* Port (other than segment output)/segment outputs specificatio
  802   802                      ;              n of Pmn pins (PFSEGxx) */
  803   803                      ; line   189 : #define _00_PFSEG08_PORT        (0x00U) /* used the P54 pin as p
  804   804                      ;              ort (other than segment output) */
  805   805                      ; line   190 : #define _01_PFSEG08_SEG         (0x01U) /* used the P54 pin as s
  806   806                      ;              egment output */
  807   807                      ; line   191 : #define _00_PFSEG09_PORT        (0x00U) /* used the P55 pin as p
  808   808                      ;              ort (other than segment output) */
  809   809                      ; line   192 : #define _02_PFSEG09_SEG         (0x02U) /* used the P55 pin as s
  810   810                      ;              egment output */
  811   811                      ; line   193 : #define _00_PFSEG10_PORT        (0x00U) /* used the P56 pin as p
  812   812                      ;              ort (other than segment output) */
  813   813                      ; line   194 : #define _04_PFSEG10_SEG         (0x04U) /* used the P56 pin as s
  814   814                      ;              egment output */
  815   815                      ; line   195 : #define _00_PFSEG11_PORT        (0x00U) /* used the P57 pin as p
  816   816                      ;              ort (other than segment output) */
  817   817                      ; line   196 : #define _08_PFSEG11_SEG         (0x08U) /* used the P57 pin as s
  818   818                      ;              egment output */
  819   819                      ; line   197 : #define _00_PFSEG12_PORT        (0x00U) /* used the P70 pin as p
  820   820                      ;              ort (other than segment output) */
  821   821                      ; line   198 : #define _10_PFSEG12_SEG         (0x10U) /* used the P70 pin as s
  822   822                      ;              egment output */
  823   823                      ; line   199 : #define _00_PFSEG13_PORT        (0x00U) /* used the P71 pin as p
  824   824                      ;              ort (other than segment output) */
  825   825                      ; line   200 : #define _20_PFSEG13_SEG         (0x20U) /* used the P71 pin as s
  826   826                      ;              egment output */
  827   827                      ; line   201 : #define _00_PFSEG14_PORT        (0x00U) /* used the P72 pin as p
  828   828                      ;              ort (other than segment output) */
  829   829                      ; line   202 : #define _40_PFSEG14_SEG         (0x40U) /* used the P72 pin as s
  830   830                      ;              egment output */
  831   831                      ; line   203 : #define _00_PFSEG15_PORT        (0x00U) /* used the P73 pin as p
  832   832                      ;              ort (other than segment output) */
  833   833                      ; line   204 : #define _80_PFSEG15_SEG         (0x80U) /* used the P73 pin as s
  834   834                      ;              egment output */
  835   835                      ; line   205 : 
  836   836                      ; line   206 : /*
  837   837                      ; line   207 :     LCD port function registers 02 (PFSEG02)
  838   838                      ; line   208 : */
  839   839                      ; line   209 : /* Port (other than segment output)/segment outputs specificatio
  840   840                      ;              n of Pmn pins (PFSEGxx) */
  841   841                      ; line   210 : #define _00_PFSEG16_PORT        (0x00U) /* used the P74 pin as p
  842   842                      ;              ort (other than segment output) */
  843   843                      ; line   211 : #define _01_PFSEG16_SEG         (0x01U) /* used the P74 pin as s
  844   844                      ;              egment output */
  845   845                      ; line   212 : #define _00_PFSEG17_PORT        (0x00U) /* used the P75 pin as p
  846   846                      ;              ort (other than segment output) */
  847   847                      ; line   213 : #define _02_PFSEG17_SEG         (0x02U) /* used the P75 pin as s
  848   848                      ;              egment output */
  849   849                      ; line   214 : #define _00_PFSEG18_PORT        (0x00U) /* used the P76 pin as p
  850   850                      ;              ort (other than segment output) */
  851   851                      ; line   215 : #define _04_PFSEG18_SEG         (0x04U) /* used the P76 pin as s
  852   852                      ;              egment output */
  853   853                      ; line   216 : #define _00_PFSEG19_PORT        (0x00U) /* used the P77 pin as p
  854   854                      ;              ort (other than segment output) */
  855   855                      ; line   217 : #define _08_PFSEG19_SEG         (0x08U) /* used the P77 pin as s
  856   856                      ;              egment output */
  857   857                      ; line   218 : #define _00_PFSEG20_PORT        (0x00U) /* used the P30 pin as p
  858   858                      ;              ort (other than segment output) */
  859   859                      ; line   219 : #define _10_PFSEG20_SEG         (0x10U) /* used the P30 pin as s
  860   860                      ;              egment output */
  861   861                      ; line   220 : #define _00_PFSEG21_PORT        (0x00U) /* used the P31 pin as p
  862   862                      ;              ort (other than segment output) */
  863   863                      ; line   221 : #define _20_PFSEG21_SEG         (0x20U) /* used the P31 pin as s
  864   864                      ;              egment output */
  865   865                      ; line   222 : #define _00_PFSEG22_PORT        (0x00U) /* used the P32 pin as p
  866   866                      ;              ort (other than segment output) */
  867   867                      ; line   223 : #define _40_PFSEG22_SEG         (0x40U) /* used the P32 pin as s
  868   868                      ;              egment output */
  869   869                      ; line   224 : #define _00_PFSEG23_PORT        (0x00U) /* used the P33 pin as p
  870   870                      ;              ort (other than segment output) */
  871   871                      ; line   225 : #define _80_PFSEG23_SEG         (0x80U) /* used the P33 pin as s
  872   872                      ;              egment output */
  873   873                      ; line   226 : 
  874   874                      ; line   227 : /*
  875   875                      ; line   228 :     LCD port function registers 03 (PFSEG03)
  876   876                      ; line   229 : */
  877   877                      ; line   230 : /* Port (other than segment output)/segment outputs specificatio
  878   878                      ;              n of Pmn pins (PFSEGxx) */
  879   879                      ; line   231 : #define _00_PFSEG24_PORT        (0x00U) /* used the P34 pin as p
  880   880                      ;              ort (other than segment output) */
  881   881                      ; line   232 : #define _01_PFSEG24_SEG         (0x01U) /* used the P34 pin as s
  882   882                      ;              egment output */
  883   883                      ; line   233 : #define _00_PFSEG25_PORT        (0x00U) /* used the P35 pin as p
  884   884                      ;              ort (other than segment output) */
  885   885                      ; line   234 : #define _02_PFSEG25_SEG         (0x02U) /* used the P35 pin as s
  886   886                      ;              egment output */
  887   887                      ; line   235 : #define _00_PFSEG26_PORT        (0x00U) /* used the P46 pin as p
  888   888                      ;              ort (other than segment output) */
  889   889                      ; line   236 : #define _08_PFSEG26_SEG         (0x08U) /* used the P46 pin as s
  890   890                      ;              egment output */
  891   891                      ; line   237 : #define _00_PFSEG27_PORT        (0x00U) /* used the P47 pin as p
  892   892                      ;              ort (other than segment output) */
  893   893                      ; line   238 : #define _10_PFSEG27_SEG         (0x10U) /* used the P47 pin as s
  894   894                      ;              egment output */
  895   895                      ; line   239 : #define _00_PFSEG28_PORT        (0x00U) /* used the P130 pin as 
  896   896                      ;              port (other than segment output) */
  897   897                      ; line   240 : #define _20_PFSEG28_SEG         (0x20U) /* used the P130 pin as 
  898   898                      ;              segment output */
  899   899                      ; line   241 : #define _00_PFSEG29_PORT        (0x00U) /* used the P22 pin as p
  900   900                      ;              ort (other than segment output) */
  901   901                      ; line   242 : #define _40_PFSEG29_SEG         (0x40U) /* used the P22 pin as s
  902   902                      ;              egment output */
  903   903                      ; line   243 : #define _00_PFSEG30_PORT        (0x00U) /* used the P23 pin as p
  904   904                      ;              ort (other than segment output) */
  905   905                      ; line   244 : #define _80_PFSEG30_SEG         (0x80U) /* used the P23 pin as s
  906   906                      ;              egment output */
  907   907                      ; line   245 : #define _04_PFDEG_DEFAULT       (0x04U) /* PFDEG default value *
  908   908                      ;              /
  909   909                      ; line   246 : 
  910   910                      ; line   247 : /*
  911   911                      ; line   248 :     LCD port function registers 04 (PFSEG04)
  912   912                      ; line   249 : */
  913   913                      ; line   250 : /* Port (other than segment output)/segment outputs specificatio
  914   914                      ;              n of Pmn pins (PFSEGxx) */
  915   915                      ; line   251 : #define _00_PFSEG31_PORT        (0x00U) /* used the P24 pin as p
  916   916                      ;              ort (other than segment output) */
  917   917                      ; line   252 : #define _01_PFSEG31_SEG         (0x01U) /* used the P24 pin as s
  918   918                      ;              egment output */
  919   919                      ; line   253 : #define _00_PFSEG32_PORT        (0x00U) /* used the P25 pin as p
  920   920                      ;              ort (other than segment output) */
  921   921                      ; line   254 : #define _02_PFSEG32_SEG         (0x02U) /* used the P25 pin as s
  922   922                      ;              egment output */
  923   923                      ; line   255 : #define _00_PFSEG33_PORT        (0x00U) /* used the P26 pin as p
  924   924                      ;              ort (other than segment output) */
  925   925                      ; line   256 : #define _04_PFSEG33_SEG         (0x04U) /* used the P26 pin as s
  926   926                      ;              egment output */
  927   927                      ; line   257 : #define _00_PFSEG34_PORT        (0x00U) /* used the P27 pin as p
  928   928                      ;              ort (other than segment output) */
  929   929                      ; line   258 : #define _08_PFSEG34_SEG         (0x08U) /* used the P27 pin as s
  930   930                      ;              egment output */
  931   931                      ; line   259 : #define _00_PFSEG35_PORT        (0x00U) /* used the P10 pin as p
  932   932                      ;              ort (other than segment output) */
  933   933                      ; line   260 : #define _10_PFSEG35_SEG         (0x10U) /* used the P10 pin as s
  934   934                      ;              egment output */
  935   935                      ; line   261 : #define _00_PFSEG36_PORT        (0x00U) /* used the P11 pin as p
  936   936                      ;              ort (other than segment output) */
  937   937                      ; line   262 : #define _20_PFSEG36_SEG         (0x20U) /* used the P11 pin as s
  938   938                      ;              egment output */
  939   939                      ; line   263 : #define _00_PFSEG37_PORT        (0x00U) /* used the P12 pin as p
  940   940                      ;              ort (other than segment output) */
  941   941                      ; line   264 : #define _40_PFSEG37_SEG         (0x40U) /* used the P12 pin as s
  942   942                      ;              egment output */
  943   943                      ; line   265 : #define _00_PFSEG38_PORT        (0x00U) /* used the P13 pin as p
  944   944                      ;              ort (other than segment output) */
  945   945                      ; line   266 : #define _80_PFSEG38_SEG         (0x80U) /* used the P13 pin as s
  946   946                      ;              egment output */
  947   947                      ; line   267 : 
  948   948                      ; line   268 : /*
  949   949                      ; line   269 :     LCD port function registers 05 (PFSEG05)
  950   950                      ; line   270 : */
  951   951                      ; line   271 : /* Port (other than segment output)/segment outputs specificatio
  952   952                      ;              n of Pmn pins (PFSEGxx) */
  953   953                      ; line   272 : #define _00_PFSEG39_PORT        (0x00U) /* used the P14 pin as p
  954   954                      ;              ort (other than segment output) */
  955   955                      ; line   273 : #define _01_PFSEG39_SEG         (0x01U) /* used the P14 pin as s
  956   956                      ;              egment output */
  957   957                      ; line   274 : #define _00_PFSEG40_PORT        (0x00U) /* used the P15 pin as p
  958   958                      ;              ort (other than segment output) */
  959   959                      ; line   275 : #define _02_PFSEG40_SEG         (0x02U) /* used the P15 pin as s
  960   960                      ;              egment output */
  961   961                      ; line   276 : #define _00_PFSEG41_PORT        (0x00U) /* used the P16 pin as p
  962   962                      ;              ort (other than segment output) */
  963   963                      ; line   277 : #define _04_PFSEG41_SEG         (0x04U) /* used the P16 pin as s
  964   964                      ;              egment output */
  965   965                      ; line   278 : #define _00_PFSEG42_PORT        (0x00U) /* used the P17 pin as p
  966   966                      ;              ort (other than segment output) */
  967   967                      ; line   279 : #define _08_PFSEG42_SEG         (0x08U) /* used the P17 pin as s
  968   968                      ;              egment output */
  969   969                      ; line   280 : #define _00_PFSEG43_PORT        (0x00U) /* used the P00 pin as p
  970   970                      ;              ort (other than segment output) */
  971   971                      ; line   281 : #define _10_PFSEG43_SEG         (0x10U) /* used the P00 pin as s
  972   972                      ;              egment output */
  973   973                      ; line   282 : #define _00_PFSEG44_PORT        (0x00U) /* used the P01 pin as p
  974   974                      ;              ort (other than segment output) */
  975   975                      ; line   283 : #define _20_PFSEG44_SEG         (0x20U) /* used the P01 pin as s
  976   976                      ;              egment output */
  977   977                      ; line   284 : #define _00_PFSEG45_PORT        (0x00U) /* used the P02 pin as p
  978   978                      ;              ort (other than segment output) */
  979   979                      ; line   285 : #define _40_PFSEG45_SEG         (0x40U) /* used the P02 pin as s
  980   980                      ;              egment output */
  981   981                      ; line   286 : #define _00_PFSEG46_PORT        (0x00U) /* used the P03 pin as p
  982   982                      ;              ort (other than segment output) */
  983   983                      ; line   287 : #define _80_PFSEG46_SEG         (0x80U) /* used the P03 pin as s
  984   984                      ;              egment output */
  985   985                      ; line   288 : 
  986   986                      ; line   289 : /*
  987   987                      ; line   290 :     LCD port function registers 06 (PFSEG06)
  988   988                      ; line   291 : */
  989   989                      ; line   292 : /* Port (other than segment output)/segment outputs specificatio
  990   990                      ;              n of Pmn pins (PFSEGxx) */
  991   991                      ; line   293 : #define _00_PFSEG47_PORT        (0x00U) /* used the P04 pin as p
  992   992                      ;              ort (other than segment output) */
  993   993                      ; line   294 : #define _01_PFSEG47_SEG         (0x01U) /* used the P04 pin as s
  994   994                      ;              egment output */
  995   995                      ; line   295 : #define _00_PFSEG48_PORT        (0x00U) /* used the P05 pin as p
  996   996                      ;              ort (other than segment output) */
  997   997                      ; line   296 : #define _02_PFSEG48_SEG         (0x02U) /* used the P05 pin as s
  998   998                      ;              egment output */
  999   999                      ; line   297 : #define _00_PFSEG49_PORT        (0x00U) /* used the P06 pin as p
 1000  1000                      ;              ort (other than segment output) */
 1001  1001                      ; line   298 : #define _04_PFSEG49_SEG         (0x04U) /* used the P06 pin as s
 1002  1002                      ;              egment output */
 1003  1003                      ; line   299 : #define _00_PFSEG50_PORT        (0x00U) /* used the P07 pin as p
 1004  1004                      ;              ort (other than segment output) */
 1005  1005                      ; line   300 : #define _08_PFSEG50_SEG         (0x08U) /* used the P07 pin as s
 1006  1006                      ;              egment output */
 1007  1007                      ; line   301 : 
 1008  1008                      ; line   302 : /*
 1009  1009                      ; line   303 :     LCD input switch control register (ISCLCD)
 1010  1010                      ; line   304 : */
 1011  1011                      ; line   305 : /* Control of schmitt trigger buffer of CAPL/P126 and CAPH/P127 
 1012  1012                      ;              pins (ISCCAP) */
 1013  1013                      ; line   306 : #define _00_ISCCAP_INVALID      (0x00U) /* makes digital input i
 1014  1014                      ;              nvalid */
 1015  1015                      ; line   307 : #define _01_ISCCAP_VALID        (0x01U) /* makes digital input v
 1016  1016                      ;              alid */
 1017  1017                      ; line   308 : /* Control of schmitt trigger buffer of VL3/P125 pin (ISCVL3) */
 1018  1018                      ; line   309 : #define _00_ISCVL3_INVALID      (0x00U) /* makes digital input i
 1019  1019                      ;              nvalid */
 1020  1020                      ; line   310 : #define _02_ISCVL3_VALID        (0x02U) /* makes digital input v
 1021  1021                      ;              alid */
 1022  1022                      ; line   311 : 
 1023  1023                      ; line   312 : /***************************************************************
 1024  1024                      ;              ********************************************************
 1025  1025                      ; line   313 : Macro definitions
 1026  1026                      ; line   314 : ****************************************************************
 1027  1027                      ;              *******************************************************/
 1028  1028                      ; line   315 : #define _C0_PM3_DEFAULT         (0xC0U) /* PM3 default value */
 1029  1029                      ; line   316 : #define _FC_PM6_DEFAULT         (0xFCU) /* PM6 default value */
 1030  1030                      ; line   317 : #define _1F_PM12_DEFAULT        (0x1FU) /* PM12 default value */
 1031  1031                      ; line   318 : #define _FE_PM13_DEFAULT        (0xFEU) /* PM13 default value */
 1032  1032                      ; line   319 : #define _F0_PMC1_DEFAULT        (0xF0U) /* PMC1 default value */
 1033  1033                      ; line   320 : #define _03_PMC2_DEFAULT        (0x03U) /* PMC2 default value */
 1034  1034                      ; line   321 : 
 1035  1035                      ; line   322 : /***************************************************************
 1036  1036                      ;              ********************************************************
 1037  1037                      ; line   323 : Typedef definitions
 1038  1038                      ; line   324 : ****************************************************************
 1039  1039                      ;              *******************************************************/
 1040  1040                      ; line   325 : 
 1041  1041                      ; line   326 : /***************************************************************
 1042  1042                      ;              ********************************************************
 1043  1043                      ; line   327 : Global functions
 1044  1044                      ; line   328 : ****************************************************************
 1045  1045                      ;              *******************************************************/
 1046  1046                      ; line   329 : void R_PORT_Create(void);
 1047  1047                      ; line     1 : /***************************************************************
 1048  1048                      ;              ********************************************************
 1049  1049                      ; line     2 : * DISCLAIMER
 1050  1050                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
 1051  1051                      ;              nd is only 
 1052  1052                      ; line     4 : * intended for use with Renesas products. No other uses are auth
 1053  1053                      ;              orized. This 
 1054  1054                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
 1055  1055                      ;              otected under 
 1056  1056                      ; line     6 : * all applicable laws, including copyright laws.
 1057  1057                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
 1058  1058                      ;              IES REGARDING 
 1059  1059                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 1060  1060                      ;              G BUT NOT 
 1061  1061                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 1062  1062                      ;              ULAR PURPOSE 
 1063  1063                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
 1064  1064                      ;              AIMED.
 1065  1065                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 1066  1066                      ;               RENESAS 
 1067  1067                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 1068  1068                      ;              ALL BE LIABLE 
 1069  1069                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 1070  1070                      ;               DAMAGES FOR 
 1071  1071                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 1072  1072                      ;              FILIATES HAVE 
 1073  1073                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 1074  1074                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 1075  1075                      ;               this software 
 1076  1076                      ; line    17 : * and to discontinue the availability of this software.  By usin
 1077  1077                      ;              g this software, 
 1078  1078                      ; line    18 : * you agree to the additional terms and conditions found by acce
 1079  1079                      ;              ssing the 
 1080  1080                      ; line    19 : * following link:
 1081  1081                      ; line    20 : * http://www.renesas.com/disclaimer
 1082  1082                      ; line    21 : *
 1083  1083                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
 1084  1084                      ;               reserved.
 1085  1085                      ; line    23 : ****************************************************************
 1086  1086                      ;              *******************************************************/
 1087  1087                      ; line    24 : 
 1088  1088                      ; line    25 : /***************************************************************
 1089  1089                      ;              ********************************************************
 1090  1090                      ; line    26 : * File Name    : r_cg_tau.h
 1091  1091                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
 1092  1092                      ;              ]
 1093  1093                      ; line    28 : * Device(s)    : R5F10WMG
 1094  1094                      ; line    29 : * Tool-Chain   : CA78K0R
 1095  1095                      ; line    30 : * Description  : This file implements device driver for TAU modu
 1096  1096                      ;              le.
 1097  1097                      ; line    31 : * Creation Date: 05-Jun-21
 1098  1098                      ; line    32 : ****************************************************************
 1099  1099                      ;              *******************************************************/
 1100  1100                      ; line    33 : #ifndef TAU_H
 1101  1101                      ; line    34 : #define TAU_H
 1102  1102                      ; line    35 : 
 1103  1103                      ; line    36 : /***************************************************************
 1104  1104                      ;              ********************************************************
 1105  1105                      ; line    37 : Macro definitions (Register bit)
 1106  1106                      ; line    38 : ****************************************************************
 1107  1107                      ;              *******************************************************/
 1108  1108                      ; line    39 : /*
 1109  1109                      ; line    40 :     Peripheral Enable Register 0 (PER0)
 1110  1110                      ; line    41 : */
 1111  1111                      ; line    42 : /* Control of timer array unit 0 input clock (TAU0EN) */
 1112  1112                      ; line    43 : #define _00_TAU0_CLOCK_STOP                     (0x00U) /* stops
 1113  1113                      ;               supply of input clock */
 1114  1114                      ; line    44 : #define _01_TAU0_CLOCK_SUPPLY                   (0x01U) /* suppl
 1115  1115                      ;              ies input clock */
 1116  1116                      ; line    45 : 
 1117  1117                      ; line    46 : /*
 1118  1118                      ; line    47 :     Timer Clock Select Register m (TPSm)
 1119  1119                      ; line    48 : */
 1120  1120                      ; line    49 : /* Operating mode and clear mode selection (PRSm03 - PRSm00) */
 1121  1121                      ; line    50 : #define _0000_TAU_CKM0_fCLK_0                   (0x0000U) /* ckm
 1122  1122                      ;              0 - fCLK */
 1123  1123                      ; line    51 : #define _0001_TAU_CKM0_fCLK_1                   (0x0001U) /* ckm
 1124  1124                      ;              0 - fCLK/2^1 */
 1125  1125                      ; line    52 : #define _0002_TAU_CKM0_fCLK_2                   (0x0002U) /* ckm
 1126  1126                      ;              0 - fCLK/2^2 */
 1127  1127                      ; line    53 : #define _0003_TAU_CKM0_fCLK_3                   (0x0003U) /* ckm
 1128  1128                      ;              0 - fCLK/2^3 */
 1129  1129                      ; line    54 : #define _0004_TAU_CKM0_fCLK_4                   (0x0004U) /* ckm
 1130  1130                      ;              0 - fCLK/2^4 */
 1131  1131                      ; line    55 : #define _0005_TAU_CKM0_fCLK_5                   (0x0005U) /* ckm
 1132  1132                      ;              0 - fCLK/2^5 */
 1133  1133                      ; line    56 : #define _0006_TAU_CKM0_fCLK_6                   (0x0006U) /* ckm
 1134  1134                      ;              0 - fCLK/2^6 */
 1135  1135                      ; line    57 : #define _0007_TAU_CKM0_fCLK_7                   (0x0007U) /* ckm
 1136  1136                      ;              0 - fCLK/2^7 */
 1137  1137                      ; line    58 : #define _0008_TAU_CKM0_fCLK_8                   (0x0008U) /* ckm
 1138  1138                      ;              0 - fCLK/2^8 */
 1139  1139                      ; line    59 : #define _0009_TAU_CKM0_fCLK_9                   (0x0009U) /* ckm
 1140  1140                      ;              0 - fCLK/2^9 */
 1141  1141                      ; line    60 : #define _000A_TAU_CKM0_fCLK_10                  (0x000AU) /* ckm
 1142  1142                      ;              0 - fCLK/2^10 */
 1143  1143                      ; line    61 : #define _000B_TAU_CKM0_fCLK_11                  (0x000BU) /* ckm
 1144  1144                      ;              0 - fCLK/2^11 */
 1145  1145                      ; line    62 : #define _000C_TAU_CKM0_fCLK_12                  (0x000CU) /* ckm
 1146  1146                      ;              0 - fCLK/2^12 */
 1147  1147                      ; line    63 : #define _000D_TAU_CKM0_fCLK_13                  (0x000DU) /* ckm
 1148  1148                      ;              0 - fCLK/2^13 */
 1149  1149                      ; line    64 : #define _000E_TAU_CKM0_fCLK_14                  (0x000EU) /* ckm
 1150  1150                      ;              0 - fCLK/2^14 */
 1151  1151                      ; line    65 : #define _000F_TAU_CKM0_fCLK_15                  (0x000FU) /* ckm
 1152  1152                      ;              0 - fCLK/2^15 */
 1153  1153                      ; line    66 : /* Operating mode and clear mode selection (PRSm13 - PRSm10) */
 1154  1154                      ; line    67 : #define _0000_TAU_CKM1_fCLK_0                   (0x0000U) /* ckm
 1155  1155                      ;              1 - fCLK */
 1156  1156                      ; line    68 : #define _0010_TAU_CKM1_fCLK_1                   (0x0010U) /* ckm
 1157  1157                      ;              1 - fCLK/2^1 */
 1158  1158                      ; line    69 : #define _0020_TAU_CKM1_fCLK_2                   (0x0020U) /* ckm
 1159  1159                      ;              1 - fCLK/2^2 */
 1160  1160                      ; line    70 : #define _0030_TAU_CKM1_fCLK_3                   (0x0030U) /* ckm
 1161  1161                      ;              1 - fCLK/2^3 */
 1162  1162                      ; line    71 : #define _0040_TAU_CKM1_fCLK_4                   (0x0040U) /* ckm
 1163  1163                      ;              1 - fCLK/2^4 */
 1164  1164                      ; line    72 : #define _0050_TAU_CKM1_fCLK_5                   (0x0050U) /* ckm
 1165  1165                      ;              1 - fCLK/2^5 */
 1166  1166                      ; line    73 : #define _0060_TAU_CKM1_fCLK_6                   (0x0060U) /* ckm
 1167  1167                      ;              1 - fCLK/2^6 */
 1168  1168                      ; line    74 : #define _0070_TAU_CKM1_fCLK_7                   (0x0070U) /* ckm
 1169  1169                      ;              1 - fCLK/2^7 */
 1170  1170                      ; line    75 : #define _0080_TAU_CKM1_fCLK_8                   (0x0080U) /* ckm
 1171  1171                      ;              1 - fCLK/2^8 */
 1172  1172                      ; line    76 : #define _0090_TAU_CKM1_fCLK_9                   (0x0090U) /* ckm
 1173  1173                      ;              1 - fCLK/2^9 */
 1174  1174                      ; line    77 : #define _00A0_TAU_CKM1_fCLK_10                  (0x00A0U) /* ckm
 1175  1175                      ;              1 - fCLK/2^10 */
 1176  1176                      ; line    78 : #define _00B0_TAU_CKM1_fCLK_11                  (0x00B0U) /* ckm
 1177  1177                      ;              1 - fCLK/2^11 */
 1178  1178                      ; line    79 : #define _00C0_TAU_CKM1_fCLK_12                  (0x00C0U) /* ckm
 1179  1179                      ;              1 - fCLK/2^12 */
 1180  1180                      ; line    80 : #define _00D0_TAU_CKM1_fCLK_13                  (0x00D0U) /* ckm
 1181  1181                      ;              1 - fCLK/2^13 */
 1182  1182                      ; line    81 : #define _00E0_TAU_CKM1_fCLK_14                  (0x00E0U) /* ckm
 1183  1183                      ;              1 - fCLK/2^14 */
 1184  1184                      ; line    82 : #define _00F0_TAU_CKM1_fCLK_15                  (0x00F0U) /* ckm
 1185  1185                      ;              1 - fCLK/2^15 */
 1186  1186                      ; line    83 : /* Operating mode and clear mode selection (PRSm21 - PRSm20) */
 1187  1187                      ; line    84 : #define _0000_TAU_CKM2_fCLK_1                   (0x0000U) /* ckm
 1188  1188                      ;              2 - fCLK/2^1 */
 1189  1189                      ; line    85 : #define _0100_TAU_CKM2_fCLK_2                   (0x0100U) /* ckm
 1190  1190                      ;              2 - fCLK/2^2 */
 1191  1191                      ; line    86 : #define _0200_TAU_CKM2_fCLK_4                   (0x0200U) /* ckm
 1192  1192                      ;              2 - fCLK/2^4 */
 1193  1193                      ; line    87 : #define _0300_TAU_CKM2_fCLK_6                   (0x0300U) /* ckm
 1194  1194                      ;              2 - fCLK/2^6 */
 1195  1195                      ; line    88 : /* Operating mode and clear mode selection (PRSm31 - PRSm30) */
 1196  1196                      ; line    89 : #define _0000_TAU_CKM3_fCLK_8                   (0x0000U) /* ckm
 1197  1197                      ;              3 - fCLK/2^8 */
 1198  1198                      ; line    90 : #define _1000_TAU_CKM3_fCLK_10                  (0x1000U) /* ckm
 1199  1199                      ;              3 - fCLK/2^10 */
 1200  1200                      ; line    91 : #define _2000_TAU_CKM3_fCLK_12                  (0x2000U) /* ckm
 1201  1201                      ;              3 - fCLK/2^12 */
 1202  1202                      ; line    92 : #define _3000_TAU_CKM3_fCLK_14                  (0x3000U) /* ckm
 1203  1203                      ;              3 - fCLK/2^14 */
 1204  1204                      ; line    93 : 
 1205  1205                      ; line    94 : /*
 1206  1206                      ; line    95 :     Timer Mode Register mn (TMRmn)
 1207  1207                      ; line    96 : */
 1208  1208                      ; line    97 : /* Selection of macro clock (MCK) of channel n (CKSmn1 - CKSmn0)
 1209  1209                      ;               */
 1210  1210                      ; line    98 : #define _0000_TAU_CLOCK_SELECT_CKM0             (0x0000U) /* ope
 1211  1211                      ;              ration clock CK0 set by PRS register */ 
 1212  1212                      ; line    99 : #define _8000_TAU_CLOCK_SELECT_CKM1             (0x8000U) /* ope
 1213  1213                      ;              ration clock CK1 set by PRS register */
 1214  1214                      ; line   100 : #define _4000_TAU_CLOCK_SELECT_CKM2             (0x4000U) /* ope
 1215  1215                      ;              ration clock CK2 set by PRS register */
 1216  1216                      ; line   101 : #define _C000_TAU_CLOCK_SELECT_CKM3             (0xC000U) /* ope
 1217  1217                      ;              ration clock CK3 set by PRS register */
 1218  1218                      ; line   102 : /* Selection of count clock (CCK) of channel n (CCSmn) */
 1219  1219                      ; line   103 : #define _0000_TAU_CLOCK_MODE_CKS                (0x0000U) /* mac
 1220  1220                      ;              ro clock MCK specified by CKSmn bit */  
 1221  1221                      ; line   104 : #define _1000_TAU_CLOCK_MODE_TIMN               (0x1000U) /* val
 1222  1222                      ;              id edge of input signal input from TImn pin */
 1223  1223                      ; line   105 : /* Selection of slave/master of channel n (MASTERmn) */
 1224  1224                      ; line   106 : #define _0000_TAU_COMBINATION_SLAVE             (0x0000U) /* ope
 1225  1225                      ;              rates as slave channel */
 1226  1226                      ; line   107 : #define _0800_TAU_COMBINATION_MASTER            (0x0800U) /* ope
 1227  1227                      ;              rates as master channel */
 1228  1228                      ; line   108 : /* Operation explanation of channel 1 or 3 (SPLIT) */
 1229  1229                      ; line   109 : #define _0000_TAU_16BITS_MODE                   (0x0000U) /* ope
 1230  1230                      ;              rates as 16 bits timer */  
 1231  1231                      ; line   110 : #define _0800_TAU_8BITS_MODE                    (0x0800U) /* ope
 1232  1232                      ;              rates as 8 bits timer */
 1233  1233                      ; line   111 : /* Setting of start trigger or capture trigger of channel n (STS
 1234  1234                      ;              mn2 - STSmn0) */
 1235  1235                      ; line   112 : #define _0000_TAU_TRIGGER_SOFTWARE              (0x0000U) /* onl
 1236  1236                      ;              y software trigger start is valid */
 1237  1237                      ; line   113 : #define _0100_TAU_TRIGGER_TIMN_VALID            (0x0100U) /* TIm
 1238  1238                      ;              n input edge is used as a start/capture trigger */
 1239  1239                      ; line   114 : #define _0200_TAU_TRIGGER_TIMN_BOTH             (0x0200U) /* TIm
 1240  1240                      ;              n input edges are used as a start/capture trigger */
 1241  1241                      ; line   115 : #define _0400_TAU_TRIGGER_MASTER_INT            (0x0400U) /* int
 1242  1242                      ;              errupt signal of the master channel is used */
 1243  1243                      ; line   116 : /* Selection of TImn pin input valid edge (CISmn1 - CISmn0) */
 1244  1244                      ; line   117 : #define _0000_TAU_TIMN_EDGE_FALLING             (0x0000U) /* fal
 1245  1245                      ;              ling edge */
 1246  1246                      ; line   118 : #define _0040_TAU_TIMN_EDGE_RISING              (0x0040U) /* ris
 1247  1247                      ;              ing edge */
 1248  1248                      ; line   119 : #define _0080_TAU_TIMN_EDGE_BOTH_LOW            (0x0080U) /* bot
 1249  1249                      ;              h edges (when low-level width is measured) */
 1250  1250                      ; line   120 : #define _00C0_TAU_TIMN_EDGE_BOTH_HIGH           (0x00C0U) /* bot
 1251  1251                      ;              h edges (when high-level width is measured) */
 1252  1252                      ; line   121 : /* Operation mode of channel n (MDmn3 - MDmn0) */
 1253  1253                      ; line   122 : #define _0000_TAU_MODE_INTERVAL_TIMER           (0x0000U) /* int
 1254  1254                      ;              erval timer mode */
 1255  1255                      ; line   123 : #define _0004_TAU_MODE_CAPTURE                  (0x0004U) /* cap
 1256  1256                      ;              ture mode */
 1257  1257                      ; line   124 : #define _0006_TAU_MODE_EVENT_COUNT              (0x0006U) /* eve
 1258  1258                      ;              nt counter mode */
 1259  1259                      ; line   125 : #define _0008_TAU_MODE_ONE_COUNT                (0x0008U) /* one
 1260  1260                      ;               count mode */
 1261  1261                      ; line   126 : #define _000C_TAU_MODE_HIGHLOW_MEASURE          (0x000CU) /* hig
 1262  1262                      ;              h-/low-level width measurement mode */
 1263  1263                      ; line   127 : #define _0001_TAU_MODE_PWM_MASTER               (0x0001U) /* PWM
 1264  1264                      ;               function (master channel) mode */
 1265  1265                      ; line   128 : #define _0009_TAU_MODE_PWM_SLAVE                (0x0009U) /* PWM
 1266  1266                      ;               function (slave channel) mode */
 1267  1267                      ; line   129 : #define _0008_TAU_MODE_ONESHOT                  (0x0008U) /* one
 1268  1268                      ;              -shot pulse output mode */
 1269  1269                      ; line   130 : /* Setting of starting counting and interrupt (MDmn0) */
 1270  1270                      ; line   131 : #define _0000_TAU_START_INT_UNUSED              (0x0000U) /* int
 1271  1271                      ;              errupt is not generated when counting is started */
 1272  1272                      ; line   132 : #define _0001_TAU_START_INT_USED                (0x0001U) /* int
 1273  1273                      ;              errupt is generated when counting is started */
 1274  1274                      ; line   133 : 
 1275  1275                      ; line   134 : /*
 1276  1276                      ; line   135 :     Timer Status Register mn (TSRmn)
 1277  1277                      ; line   136 : */
 1278  1278                      ; line   137 : /* Counter overflow status of channel n (OVF) */
 1279  1279                      ; line   138 : #define _0000_TAU_OVERFLOW_NOT_OCCURS           (0x0000U) /* ove
 1280  1280                      ;              rflow does not occur */
 1281  1281                      ; line   139 : #define _0001_TAU_OVERFLOW_OCCURS               (0x0001U) /* ove
 1282  1282                      ;              rflow occurs */
 1283  1283                      ; line   140 : 
 1284  1284                      ; line   141 : /*
 1285  1285                      ; line   142 :     Timer Channel Enable Status Register m (TEm)
 1286  1286                      ; line   143 : */
 1287  1287                      ; line   144 : /* Indication of operation enable/stop status of channel 0 (TEm0
 1288  1288                      ;              ) */
 1289  1289                      ; line   145 : #define _0000_TAU_CH0_OPERATION_STOP            (0x0000U) /* ope
 1290  1290                      ;              ration is stopped */
 1291  1291                      ; line   146 : #define _0001_TAU_CH0_OPERATION_ENABLE          (0x0001U) /* ope
 1292  1292                      ;              ration is enabled */
 1293  1293                      ; line   147 : /* Indication of operation enable/stop status of channel 1 (TEm1
 1294  1294                      ;              ) */
 1295  1295                      ; line   148 : #define _0000_TAU_CH1_OPERATION_STOP            (0x0000U) /* ope
 1296  1296                      ;              ration is stopped */
 1297  1297                      ; line   149 : #define _0002_TAU_CH1_OPERATION_ENABLE          (0x0002U) /* ope
 1298  1298                      ;              ration is enabled */
 1299  1299                      ; line   150 : /* Indication of operation enable/stop status of channel 2 (TEm2
 1300  1300                      ;              ) */
 1301  1301                      ; line   151 : #define _0000_TAU_CH2_OPERATION_STOP            (0x0000U) /* ope
 1302  1302                      ;              ration is stopped */
 1303  1303                      ; line   152 : #define _0004_TAU_CH2_OPERATION_ENABLE          (0x0004U) /* ope
 1304  1304                      ;              ration is enabled */
 1305  1305                      ; line   153 : /* Indication of operation enable/stop status of channel 3 (TEm3
 1306  1306                      ;              ) */
 1307  1307                      ; line   154 : #define _0000_TAU_CH3_OPERATION_STOP            (0x0000U) /* ope
 1308  1308                      ;              ration is stopped */
 1309  1309                      ; line   155 : #define _0008_TAU_CH3_OPERATION_ENABLE          (0x0008U) /* ope
 1310  1310                      ;              ration is enabled */
 1311  1311                      ; line   156 : /* Indication of operation enable/stop status of channel 4 (TEm4
 1312  1312                      ;              ) */
 1313  1313                      ; line   157 : #define _0000_TAU_CH4_OPERATION_STOP            (0x0000U) /* ope
 1314  1314                      ;              ration is stopped */
 1315  1315                      ; line   158 : #define _0010_TAU_CH4_OPERATION_ENABLE          (0x0010U) /* ope
 1316  1316                      ;              ration is enabled */
 1317  1317                      ; line   159 : /* Indication of operation enable/stop status of channel 5 (TEm5
 1318  1318                      ;              ) */
 1319  1319                      ; line   160 : #define _0000_TAU_CH5_OPERATION_STOP            (0x0000U) /* ope
 1320  1320                      ;              ration is stopped */
 1321  1321                      ; line   161 : #define _0020_TAU_CH5_OPERATION_ENABLE          (0x0020U) /* ope
 1322  1322                      ;              ration is enabled */
 1323  1323                      ; line   162 : /* Indication of operation enable/stop status of channel 6 (TEm6
 1324  1324                      ;              ) */
 1325  1325                      ; line   163 : #define _0000_TAU_CH6_OPERATION_STOP            (0x0000U) /* ope
 1326  1326                      ;              ration is stopped */
 1327  1327                      ; line   164 : #define _0040_TAU_CH6_OPERATION_ENABLE          (0x0040U) /* ope
 1328  1328                      ;              ration is enabled */
 1329  1329                      ; line   165 : /* Indication of operation enable/stop status of channel 7 (TEm7
 1330  1330                      ;              ) */
 1331  1331                      ; line   166 : #define _0000_TAU_CH7_OPERATION_STOP            (0x0000U) /* ope
 1332  1332                      ;              ration is stopped */
 1333  1333                      ; line   167 : #define _0080_TAU_CH7_OPERATION_ENABLE          (0x0080U) /* ope
 1334  1334                      ;              ration is enabled */
 1335  1335                      ; line   168 : /* Indication of operation enable/stop status of channel 1 highe
 1336  1336                      ;              r 8 bits (TEHm1) */
 1337  1337                      ; line   169 : #define _0000_TAU_CH1_H8_OPERATION_STOP         (0x0000U) /* ope
 1338  1338                      ;              ration is stopped */
 1339  1339                      ; line   170 : #define _0200_TAU_CH1_H8_OPERATION_ENABLE       (0x0200U) /* ope
 1340  1340                      ;              ration is enabled */
 1341  1341                      ; line   171 : /* Indication of operation enable/stop status of channel 3 highe
 1342  1342                      ;              r 8 bits (TEHm3) */
 1343  1343                      ; line   172 : #define _0000_TAU_CH3_H8_OPERATION_STOP         (0x0000U) /* ope
 1344  1344                      ;              ration is stopped */
 1345  1345                      ; line   173 : #define _0800_TAU_CH3_H8_OPERATION_ENABLE       (0x0800U) /* ope
 1346  1346                      ;              ration is enabled */
 1347  1347                      ; line   174 : 
 1348  1348                      ; line   175 : /*
 1349  1349                      ; line   176 :     Timer Channel Start Register m (TSm)
 1350  1350                      ; line   177 : */
 1351  1351                      ; line   178 : /* Operation enable (start) trigger of channel 0 (TSm0) */
 1352  1352                      ; line   179 : #define _0000_TAU_CH0_START_TRG_OFF             (0x0000U) /* no 
 1353  1353                      ;              trigger operation */
 1354  1354                      ; line   180 : #define _0001_TAU_CH0_START_TRG_ON              (0x0001U) /* ope
 1355  1355                      ;              ration is enabled (start trigger is generated) */
 1356  1356                      ; line   181 : /* Operation enable (start) trigger of channel 1 (TSm1) */
 1357  1357                      ; line   182 : #define _0000_TAU_CH1_START_TRG_OFF             (0x0000U) /* no 
 1358  1358                      ;              trigger operation */
 1359  1359                      ; line   183 : #define _0002_TAU_CH1_START_TRG_ON              (0x0002U) /* ope
 1360  1360                      ;              ration is enabled (start trigger is generated) */
 1361  1361                      ; line   184 : /* Operation enable (start) trigger of channel 2 (TSm2) */
 1362  1362                      ; line   185 : #define _0000_TAU_CH2_START_TRG_OFF             (0x0000U) /* no 
 1363  1363                      ;              trigger operation */
 1364  1364                      ; line   186 : #define _0004_TAU_CH2_START_TRG_ON              (0x0004U) /* ope
 1365  1365                      ;              ration is enabled (start trigger is generated) */
 1366  1366                      ; line   187 : /* Operation enable (start) trigger of channel 3 (TSm3) */
 1367  1367                      ; line   188 : #define _0000_TAU_CH3_START_TRG_OFF             (0x0000U) /* no 
 1368  1368                      ;              trigger operation */
 1369  1369                      ; line   189 : #define _0008_TAU_CH3_START_TRG_ON              (0x0008U) /* ope
 1370  1370                      ;              ration is enabled (start trigger is generated) */
 1371  1371                      ; line   190 : /* Operation enable (start) trigger of channel 4 (TSm4) */
 1372  1372                      ; line   191 : #define _0000_TAU_CH4_START_TRG_OFF             (0x0000U) /* no 
 1373  1373                      ;              trigger operation */
 1374  1374                      ; line   192 : #define _0010_TAU_CH4_START_TRG_ON              (0x0010U) /* ope
 1375  1375                      ;              ration is enabled (start trigger is generated) */
 1376  1376                      ; line   193 : /* Operation enable (start) trigger of channel 5 (TSm5) */
 1377  1377                      ; line   194 : #define _0000_TAU_CH5_START_TRG_OFF             (0x0000U) /* no 
 1378  1378                      ;              trigger operation */
 1379  1379                      ; line   195 : #define _0020_TAU_CH5_START_TRG_ON              (0x0020U) /* ope
 1380  1380                      ;              ration is enabled (start trigger is generated) */
 1381  1381                      ; line   196 : /* Operation enable (start) trigger of channel 6 (TSm6) */
 1382  1382                      ; line   197 : #define _0000_TAU_CH6_START_TRG_OFF             (0x0000U) /* no 
 1383  1383                      ;              trigger operation */
 1384  1384                      ; line   198 : #define _0040_TAU_CH6_START_TRG_ON              (0x0040U) /* ope
 1385  1385                      ;              ration is enabled (start trigger is generated) */
 1386  1386                      ; line   199 : /* Operation enable (start) trigger of channel 7 (TSm7) */
 1387  1387                      ; line   200 : #define _0000_TAU_CH7_START_TRG_OFF             (0x0000U) /* no 
 1388  1388                      ;              trigger operation */
 1389  1389                      ; line   201 : #define _0080_TAU_CH7_START_TRG_ON              (0x0080U) /* ope
 1390  1390                      ;              ration is enabled (start trigger is generated) */
 1391  1391                      ; line   202 : /* Operation enable (start) trigger of channel 1 higher 8 bits (
 1392  1392                      ;              TSHm1) */
 1393  1393                      ; line   203 : #define _0000_TAU_CH1_H8_START_TRG_OFF          (0x0000U) /* no 
 1394  1394                      ;              trigger operation */
 1395  1395                      ; line   204 : #define _0200_TAU_CH1_H8_START_TRG_ON           (0x0200U) /* ope
 1396  1396                      ;              ration is enabled (start trigger is generated) */
 1397  1397                      ; line   205 : /* Operation enable (start) trigger of channel 3 higher 8 bits (
 1398  1398                      ;              TSHm3) */
 1399  1399                      ; line   206 : #define _0000_TAU_CH3_H8_START_TRG_OFF          (0x0000U) /* no 
 1400  1400                      ;              trigger operation */
 1401  1401                      ; line   207 : #define _0800_TAU_CH3_H8_START_TRG_ON           (0x0800U) /* ope
 1402  1402                      ;              ration is enabled (start trigger is generated) */
 1403  1403                      ; line   208 : 
 1404  1404                      ; line   209 : /*
 1405  1405                      ; line   210 :     Timer Channel Stop Register m (TTm)
 1406  1406                      ; line   211 : */
 1407  1407                      ; line   212 : /* Operation stop trigger of channel 0 (TTm0) */
 1408  1408                      ; line   213 : #define _0000_TAU_CH0_STOP_TRG_OFF              (0x0000U) /* no 
 1409  1409                      ;              trigger operation */
 1410  1410                      ; line   214 : #define _0001_TAU_CH0_STOP_TRG_ON               (0x0001U) /* ope
 1411  1411                      ;              ration is stopped (stop trigger is generated) */
 1412  1412                      ; line   215 : /* Operation stop trigger of channel 1 (TTm1) */
 1413  1413                      ; line   216 : #define _0000_TAU_CH1_STOP_TRG_OFF              (0x0000U) /* no 
 1414  1414                      ;              trigger operation */
 1415  1415                      ; line   217 : #define _0002_TAU_CH1_STOP_TRG_ON               (0x0002U) /* ope
 1416  1416                      ;              ration is stopped (stop trigger is generated) */
 1417  1417                      ; line   218 : /* Operation stop trigger of channel 2 (TTm2) */
 1418  1418                      ; line   219 : #define _0000_TAU_CH2_STOP_TRG_OFF              (0x0000U) /* no 
 1419  1419                      ;              trigger operation */
 1420  1420                      ; line   220 : #define _0004_TAU_CH2_STOP_TRG_ON               (0x0004U) /* ope
 1421  1421                      ;              ration is stopped (stop trigger is generated) */
 1422  1422                      ; line   221 : /* Operation stop trigger of channel 3 (TTm3) */
 1423  1423                      ; line   222 : #define _0000_TAU_CH3_STOP_TRG_OFF              (0x0000U) /* no 
 1424  1424                      ;              trigger operation */
 1425  1425                      ; line   223 : #define _0008_TAU_CH3_STOP_TRG_ON               (0x0008U) /* ope
 1426  1426                      ;              ration is stopped (stop trigger is generated) */
 1427  1427                      ; line   224 : /* Operation stop trigger of channel 4 (TTm4) */
 1428  1428                      ; line   225 : #define _0000_TAU_CH4_STOP_TRG_OFF              (0x0000U) /* no 
 1429  1429                      ;              trigger operation */
 1430  1430                      ; line   226 : #define _0010_TAU_CH4_STOP_TRG_ON               (0x0010U) /* ope
 1431  1431                      ;              ration is stopped (stop trigger is generated) */
 1432  1432                      ; line   227 : /* Operation stop trigger of channel 5 (TTm5) */
 1433  1433                      ; line   228 : #define _0000_TAU_CH5_STOP_TRG_OFF              (0x0000U) /* no 
 1434  1434                      ;              trigger operation */
 1435  1435                      ; line   229 : #define _0020_TAU_CH5_STOP_TRG_ON               (0x0020U) /* ope
 1436  1436                      ;              ration is stopped (stop trigger is generated) */
 1437  1437                      ; line   230 : /* Operation stop trigger of channel 6 (TTm6) */
 1438  1438                      ; line   231 : #define _0000_TAU_CH6_STOP_TRG_OFF              (0x0000U) /* no 
 1439  1439                      ;              trigger operation */
 1440  1440                      ; line   232 : #define _0040_TAU_CH6_STOP_TRG_ON               (0x0040U) /* ope
 1441  1441                      ;              ration is stopped (stop trigger is generated) */
 1442  1442                      ; line   233 : /* Operation stop trigger of channel 7 (TTm7) */
 1443  1443                      ; line   234 : #define _0000_TAU_CH7_STOP_TRG_OFF              (0x0000U) /* no 
 1444  1444                      ;              trigger operation */
 1445  1445                      ; line   235 : #define _0080_TAU_CH7_STOP_TRG_ON               (0x0080U) /* ope
 1446  1446                      ;              ration is stopped (stop trigger is generated) */
 1447  1447                      ; line   236 : /* Operation stop trigger of channel 1 higher 8 bits (TTHm1) */
 1448  1448                      ; line   237 : #define _0000_TAU_CH1_H8_STOP_TRG_OFF           (0x0000U) /* no 
 1449  1449                      ;              trigger operation */
 1450  1450                      ; line   238 : #define _0200_TAU_CH1_H8_STOP_TRG_ON            (0x0200U) /* ope
 1451  1451                      ;              ration is stopped (stop trigger is generated) */
 1452  1452                      ; line   239 : /* Operation stop trigger of channel 3 higher 8 bits (TTHm3) */
 1453  1453                      ; line   240 : #define _0000_TAU_CH3_H8_STOP_TRG_OFF           (0x0000U) /* no 
 1454  1454                      ;              trigger operation */
 1455  1455                      ; line   241 : #define _0800_TAU_CH3_H8_STOP_TRG_ON            (0x0800U) /* ope
 1456  1456                      ;              ration is stopped (stop trigger is generated) */
 1457  1457                      ; line   242 : 
 1458  1458                      ; line   243 : /*
 1459  1459                      ; line   244 :     Timer Input Select Register m (TIS0)
 1460  1460                      ; line   245 : */
 1461  1461                      ; line   246 : /* Selection of timer input used with channel 1 (TIS02 - TIS00) 
 1462  1462                      ;              */
 1463  1463                      ; line   247 : #define _00_TAU_CH1_INPUT_TI01                  (0x00U) /* input
 1464  1464                      ;               signal of timer input pin (TI01) */
 1465  1465                      ; line   248 : #define _04_TAU_CH1_INPUT_fIL                   (0x04U) /* low-s
 1466  1466                      ;              peed on-chip oscillator clock (fIL) */
 1467  1467                      ; line   249 : #define _05_TAU_CH1_INPUT_fSUB                  (0x05U) /* subsy
 1468  1468                      ;              stem clock (fSUB) */
 1469  1469                      ; line   250 : 
 1470  1470                      ; line   251 : /*
 1471  1471                      ; line   252 :     A timer array unit and an output selection register (TOS)
 1472  1472                      ; line   253 : */
 1473  1473                      ; line   254 : /* Remote control carrier power output selection */
 1474  1474                      ; line   255 : #define _00_TAU_REMOTE_CONTROL_UNUSED           (0x00U) /* remot
 1475  1475                      ;              e control carrier power output invalidity */
 1476  1476                      ; line   256 : #define _01_TAU_REMOTE_CONTROL_USED             (0x01U) /* remot
 1477  1477                      ;              e control carrier power output effective */
 1478  1478                      ; line   257 : 
 1479  1479                      ; line   258 : /*
 1480  1480                      ; line   259 :     Timer Output Enable Register m (TOEm)
 1481  1481                      ; line   260 : */
 1482  1482                      ; line   261 : /* Timer output enable/disable of channel 0 (TOEm0) */
 1483  1483                      ; line   262 : #define _0001_TAU_CH0_OUTPUT_ENABLE             (0x0001U) /* the
 1484  1484                      ;               TOm0 operation enabled by count operation */
 1485  1485                      ; line   263 : #define _0000_TAU_CH0_OUTPUT_DISABLE            (0x0000U) /* the
 1486  1486                      ;               TOm0 operation stopped by count operation */
 1487  1487                      ; line   264 : /* Timer output enable/disable of channel 1 (TOEm1) */
 1488  1488                      ; line   265 : #define _0002_TAU_CH1_OUTPUT_ENABLE             (0x0002U) /* the
 1489  1489                      ;               TOm1 operation enabled by count operation */
 1490  1490                      ; line   266 : #define _0000_TAU_CH1_OUTPUT_DISABLE            (0x0000U) /* the
 1491  1491                      ;               TOm1 operation stopped by count operation */
 1492  1492                      ; line   267 : /* Timer output enable/disable of channel 2 (TOEm2) */
 1493  1493                      ; line   268 : #define _0004_TAU_CH2_OUTPUT_ENABLE             (0x0004U) /* the
 1494  1494                      ;               TOm2 operation enabled by count operation */
 1495  1495                      ; line   269 : #define _0000_TAU_CH2_OUTPUT_DISABLE            (0x0000U) /* the
 1496  1496                      ;               TOm2 operation stopped by count operation */
 1497  1497                      ; line   270 : /* Timer output enable/disable of channel 3 (TOEm3) */
 1498  1498                      ; line   271 : #define _0008_TAU_CH3_OUTPUT_ENABLE             (0x0008U) /* the
 1499  1499                      ;               TOm3 operation enabled by count operation */
 1500  1500                      ; line   272 : #define _0000_TAU_CH3_OUTPUT_DISABLE            (0x0000U) /* the
 1501  1501                      ;               TOm3 operation stopped by count operation */
 1502  1502                      ; line   273 : /* Timer output enable/disable of channel 4 (TOEm4) */
 1503  1503                      ; line   274 : #define _0010_TAU_CH4_OUTPUT_ENABLE             (0x0010U) /* the
 1504  1504                      ;               TOm4 operation enabled by count operation */
 1505  1505                      ; line   275 : #define _0000_TAU_CH4_OUTPUT_DISABLE            (0x0000U) /* the
 1506  1506                      ;               TOm4 operation stopped by count operation */
 1507  1507                      ; line   276 : /* Timer output enable/disable of channel 5 (TOEm5) */
 1508  1508                      ; line   277 : #define _0020_TAU_CH5_OUTPUT_ENABLE             (0x0020U) /* the
 1509  1509                      ;               TOm5 operation enabled by count operation */
 1510  1510                      ; line   278 : #define _0000_TAU_CH5_OUTPUT_DISABLE            (0x0000U) /* the
 1511  1511                      ;               TOm5 operation stopped by count operation */
 1512  1512                      ; line   279 : /* Timer output enable/disable of channel 6 (TOEm6) */
 1513  1513                      ; line   280 : #define _0040_TAU_CH6_OUTPUT_ENABLE             (0x0040U) /* the
 1514  1514                      ;               TOm6 operation enabled by count operation */
 1515  1515                      ; line   281 : #define _0000_TAU_CH6_OUTPUT_DISABLE            (0x0000U) /* the
 1516  1516                      ;               TOm6 operation stopped by count operation */
 1517  1517                      ; line   282 : /* Timer output enable/disable of channel 7 (TOEm7) */
 1518  1518                      ; line   283 : #define _0080_TAU_CH7_OUTPUT_ENABLE             (0x0080U) /* the
 1519  1519                      ;               TOm7 operation enabled by count operation */
 1520  1520                      ; line   284 : #define _0000_TAU_CH7_OUTPUT_DISABLE            (0x0000U) /* the
 1521  1521                      ;               TOm7 operation stopped by count operation */
 1522  1522                      ; line   285 : 
 1523  1523                      ; line   286 : /*
 1524  1524                      ; line   287 :     Timer Output Register m (TOm)
 1525  1525                      ; line   288 : */
 1526  1526                      ; line   289 : /* Timer output of channel 0 (TOm0) */
 1527  1527                      ; line   290 : #define _0000_TAU_CH0_OUTPUT_VALUE_0            (0x0000U) /* tim
 1528  1528                      ;              er output value is "0" */
 1529  1529                      ; line   291 : #define _0001_TAU_CH0_OUTPUT_VALUE_1            (0x0001U) /* tim
 1530  1530                      ;              er output value is "1" */
 1531  1531                      ; line   292 : /* Timer output of channel 1 (TOm1) */
 1532  1532                      ; line   293 : #define _0000_TAU_CH1_OUTPUT_VALUE_0            (0x0000U) /* tim
 1533  1533                      ;              er output value is "0" */
 1534  1534                      ; line   294 : #define _0002_TAU_CH1_OUTPUT_VALUE_1            (0x0002U) /* tim
 1535  1535                      ;              er output value is "1" */
 1536  1536                      ; line   295 : /* Timer output of channel 2 (TOm2) */
 1537  1537                      ; line   296 : #define _0000_TAU_CH2_OUTPUT_VALUE_0            (0x0000U) /* tim
 1538  1538                      ;              er output value is "0" */
 1539  1539                      ; line   297 : #define _0004_TAU_CH2_OUTPUT_VALUE_1            (0x0004U) /* tim
 1540  1540                      ;              er output value is "1" */
 1541  1541                      ; line   298 : /* Timer output of channel 3 (TOm3) */
 1542  1542                      ; line   299 : #define _0000_TAU_CH3_OUTPUT_VALUE_0            (0x0000U) /* tim
 1543  1543                      ;              er output value is "0" */
 1544  1544                      ; line   300 : #define _0008_TAU_CH3_OUTPUT_VALUE_1            (0x0008U) /* tim
 1545  1545                      ;              er output value is "1" */
 1546  1546                      ; line   301 : /* Timer output of channel 4 (TOm4) */
 1547  1547                      ; line   302 : #define _0000_TAU_CH4_OUTPUT_VALUE_0            (0x0000U) /* tim
 1548  1548                      ;              er output value is "0" */
 1549  1549                      ; line   303 : #define _0010_TAU_CH4_OUTPUT_VALUE_1            (0x0010U) /* tim
 1550  1550                      ;              er output value is "1" */
 1551  1551                      ; line   304 : /* Timer output of channel 5 (TOm5) */
 1552  1552                      ; line   305 : #define _0000_TAU_CH5_OUTPUT_VALUE_0            (0x0000U) /* tim
 1553  1553                      ;              er output value is "0" */
 1554  1554                      ; line   306 : #define _0020_TAU_CH5_OUTPUT_VALUE_1            (0x0020U) /* tim
 1555  1555                      ;              er output value is "1" */
 1556  1556                      ; line   307 : /* Timer output of channel 6 (TOm6) */
 1557  1557                      ; line   308 : #define _0000_TAU_CH6_OUTPUT_VALUE_0            (0x0000U) /* tim
 1558  1558                      ;              er output value is "0" */
 1559  1559                      ; line   309 : #define _0040_TAU_CH6_OUTPUT_VALUE_1            (0x0040U) /* tim
 1560  1560                      ;              er output value is "1" */
 1561  1561                      ; line   310 : /* Timer output of channel 7 (TOm7) */
 1562  1562                      ; line   311 : #define _0000_TAU_CH7_OUTPUT_VALUE_0            (0x0000U) /* tim
 1563  1563                      ;              er output value is "0" */
 1564  1564                      ; line   312 : #define _0080_TAU_CH7_OUTPUT_VALUE_1            (0x0080U) /* tim
 1565  1565                      ;              er output value is "1" */
 1566  1566                      ; line   313 : 
 1567  1567                      ; line   314 : /*
 1568  1568                      ; line   315 :     Timer Output Level Register 0 (TOLm)
 1569  1569                      ; line   316 : */
 1570  1570                      ; line   317 : /* Control of timer output level of channel 1 (TOLm1) */
 1571  1571                      ; line   318 : #define _0000_TAU_CH1_OUTPUT_LEVEL_H            (0x0000U) /* pos
 1572  1572                      ;              itive logic output (active-high) */
 1573  1573                      ; line   319 : #define _0002_TAU_CH1_OUTPUT_LEVEL_L            (0x0002U) /* inv
 1574  1574                      ;              erted output (active-low) */
 1575  1575                      ; line   320 : /* Control of timer output level of channel 2 (TOLm2) */
 1576  1576                      ; line   321 : #define _0000_TAU_CH2_OUTPUT_LEVEL_H            (0x0000U) /* pos
 1577  1577                      ;              itive logic output (active-high) */
 1578  1578                      ; line   322 : #define _0004_TAU_CH2_OUTPUT_LEVEL_L            (0x0004U) /* inv
 1579  1579                      ;              erted output (active-low) */
 1580  1580                      ; line   323 : /* Control of timer output level of channel 3 (TOLm3) */
 1581  1581                      ; line   324 : #define _0000_TAU_CH3_OUTPUT_LEVEL_H            (0x0000U) /* pos
 1582  1582                      ;              itive logic output (active-high) */
 1583  1583                      ; line   325 : #define _0008_TAU_CH3_OUTPUT_LEVEL_L            (0x0008U) /* inv
 1584  1584                      ;              erted output (active-low) */
 1585  1585                      ; line   326 : /* Control of timer output level of channel 4 (TOLm4) */
 1586  1586                      ; line   327 : #define _0000_TAU_CH4_OUTPUT_LEVEL_H            (0x0000U) /* pos
 1587  1587                      ;              itive logic output (active-high) */
 1588  1588                      ; line   328 : #define _0010_TAU_CH4_OUTPUT_LEVEL_L            (0x0010U) /* inv
 1589  1589                      ;              erted output (active-low) */
 1590  1590                      ; line   329 : /* Control of timer output level of channel 5 (TOLm5) */
 1591  1591                      ; line   330 : #define _0000_TAU_CH5_OUTPUT_LEVEL_H            (0x0000U) /* pos
 1592  1592                      ;              itive logic output (active-high) */
 1593  1593                      ; line   331 : #define _0020_TAU_CH5_OUTPUT_LEVEL_L            (0x0020U) /* inv
 1594  1594                      ;              erted output (active-low) */
 1595  1595                      ; line   332 : /* Control of timer output level of channel 6 (TOLm6) */
 1596  1596                      ; line   333 : #define _0000_TAU_CH6_OUTPUT_LEVEL_H            (0x0000U) /* pos
 1597  1597                      ;              itive logic output (active-high) */
 1598  1598                      ; line   334 : #define _0040_TAU_CH6_OUTPUT_LEVEL_L            (0x0040U) /* inv
 1599  1599                      ;              erted output (active-low) */
 1600  1600                      ; line   335 : /* Control of timer output level of channel 7 (TOLm7) */
 1601  1601                      ; line   336 : #define _0000_TAU_CH7_OUTPUT_LEVEL_H            (0x0000U) /* pos
 1602  1602                      ;              itive logic output (active-high) */
 1603  1603                      ; line   337 : #define _0080_TAU_CH7_OUTPUT_LEVEL_L            (0x0080U) /* inv
 1604  1604                      ;              erted output (active-low) */
 1605  1605                      ; line   338 : 
 1606  1606                      ; line   339 : /*
 1607  1607                      ; line   340 :     Timer Output Mode Register m (TOMm)
 1608  1608                      ; line   341 : */
 1609  1609                      ; line   342 : /* Control of timer output mode of channel 1 (TOMm1) */
 1610  1610                      ; line   343 : #define _0000_TAU_CH1_OUTPUT_TOGGLE             (0x0000U) /* tog
 1611  1611                      ;              gle operation mode */
 1612  1612                      ; line   344 : #define _0002_TAU_CH1_OUTPUT_COMBIN             (0x0002U) /* com
 1613  1613                      ;              bination operation mode */
 1614  1614                      ; line   345 : /* Control of timer output mode of channel 2 (TOMm2) */
 1615  1615                      ; line   346 : #define _0000_TAU_CH2_OUTPUT_TOGGLE             (0x0000U) /* tog
 1616  1616                      ;              gle operation mode */
 1617  1617                      ; line   347 : #define _0004_TAU_CH2_OUTPUT_COMBIN             (0x0004U) /* com
 1618  1618                      ;              bination operation mode */
 1619  1619                      ; line   348 : /* Control of timer output mode of channel 3 (TOMm3) */
 1620  1620                      ; line   349 : #define _0000_TAU_CH3_OUTPUT_TOGGLE             (0x0000U) /* tog
 1621  1621                      ;              gle operation mode */
 1622  1622                      ; line   350 : #define _0008_TAU_CH3_OUTPUT_COMBIN             (0x0008U) /* com
 1623  1623                      ;              bination operation mode */
 1624  1624                      ; line   351 : /* Control of timer output mode of channel 4 (TOMm4) */
 1625  1625                      ; line   352 : #define _0000_TAU_CH4_OUTPUT_TOGGLE             (0x0000U) /* tog
 1626  1626                      ;              gle operation mode */
 1627  1627                      ; line   353 : #define _0010_TAU_CH4_OUTPUT_COMBIN             (0x0010U) /* com
 1628  1628                      ;              bination operation mode */
 1629  1629                      ; line   354 : /* Control of timer output mode of channel 5 (TOMm5) */
 1630  1630                      ; line   355 : #define _0000_TAU_CH5_OUTPUT_TOGGLE             (0x0000U) /* tog
 1631  1631                      ;              gle operation mode */
 1632  1632                      ; line   356 : #define _0020_TAU_CH5_OUTPUT_COMBIN             (0x0020U) /* com
 1633  1633                      ;              bination operation mode */
 1634  1634                      ; line   357 : /* Control of timer output mode of channel 6 (TOMm6) */
 1635  1635                      ; line   358 : #define _0000_TAU_CH6_OUTPUT_TOGGLE             (0x0000U) /* tog
 1636  1636                      ;              gle operation mode */
 1637  1637                      ; line   359 : #define _0040_TAU_CH6_OUTPUT_COMBIN             (0x0040U) /* com
 1638  1638                      ;              bination operation mode */
 1639  1639                      ; line   360 : /* Control of timer output mode of channel 7 (TOMm7) */
 1640  1640                      ; line   361 : #define _0000_TAU_CH7_OUTPUT_TOGGLE             (0x0000U) /* tog
 1641  1641                      ;              gle operation mode */
 1642  1642                      ; line   362 : #define _0080_TAU_CH7_OUTPUT_COMBIN             (0x0080U) /* com
 1643  1643                      ;              bination operation mode */
 1644  1644                      ; line   363 : 
 1645  1645                      ; line   364 : /*
 1646  1646                      ; line   365 :     Input Switch Control Register (ISC)
 1647  1647                      ; line   366 : */
 1648  1648                      ; line   367 : /* Switching external interrupt (INTP0) input (ISC0) */
 1649  1649                      ; line   368 : #define _00_TAU_EXTINT_INTP0                    (0x00U) /* uses 
 1650  1650                      ;              the INTP0 pin as an external interrupt */
 1651  1651                      ; line   369 : #define _01_TAU_EXTINT_RXD0                     (0x01U) /* uses 
 1652  1652                      ;              RXD0 pin as an external interrupt */
 1653  1653                      ; line   370 : /* Switching channel 5 input of timer array unit (ISC1) */
 1654  1654                      ; line   371 : #define _00_TAU_CH7_TI07_INPUT                  (0x00U) /* input
 1655  1655                      ;               signal of the TI05 pin as a timer input */
 1656  1656                      ; line   372 : #define _02_TAU_CH7_RXD0_INPUT                  (0x02U) /* input
 1657  1657                      ;               signal of RxD0 pin is used as timer input */
 1658  1658                      ; line   373 : 
 1659  1659                      ; line   374 : /*
 1660  1660                      ; line   375 :     Noise Filter Enable Register 1 (NFEN1)
 1661  1661                      ; line   376 : */
 1662  1662                      ; line   377 : /* Enable/disable using noise filter of TI00 pin input signal (T
 1663  1663                      ;              NFEN00) */
 1664  1664                      ; line   378 : #define _00_TAU_CH0_NOISE_OFF                   (0x00U) /* noise
 1665  1665                      ;               filter OFF */
 1666  1666                      ; line   379 : #define _01_TAU_CH0_NOISE_ON                    (0x01U) /* noise
 1667  1667                      ;               filter ON */
 1668  1668                      ; line   380 : /* Enable/disable using noise filter of TI01 pin input signal (T
 1669  1669                      ;              NFEN01) */
 1670  1670                      ; line   381 : #define _00_TAU_CH1_NOISE_OFF                   (0x00U) /* noise
 1671  1671                      ;               filter OFF */
 1672  1672                      ; line   382 : #define _02_TAU_CH1_NOISE_ON                    (0x02U) /* noise
 1673  1673                      ;               filter ON */
 1674  1674                      ; line   383 : /* Enable/disable using noise filter of TI02 pin input signal (T
 1675  1675                      ;              NFEN02) */
 1676  1676                      ; line   384 : #define _00_TAU_CH2_NOISE_OFF                   (0x00U) /* noise
 1677  1677                      ;               filter OFF */
 1678  1678                      ; line   385 : #define _04_TAU_CH2_NOISE_ON                    (0x04U) /* noise
 1679  1679                      ;               filter ON */
 1680  1680                      ; line   386 : /* Enable/disable using noise filter of TI03 pin input signal (T
 1681  1681                      ;              NFEN03) */
 1682  1682                      ; line   387 : #define _00_TAU_CH3_NOISE_OFF                   (0x00U) /* noise
 1683  1683                      ;               filter OFF */
 1684  1684                      ; line   388 : #define _08_TAU_CH3_NOISE_ON                    (0x08U) /* noise
 1685  1685                      ;               filter ON */
 1686  1686                      ; line   389 : /* Enable/disable using noise filter of TI04 pin input signal (T
 1687  1687                      ;              NFEN04) */
 1688  1688                      ; line   390 : #define _00_TAU_CH4_NOISE_OFF                   (0x00U) /* noise
 1689  1689                      ;               filter OFF */
 1690  1690                      ; line   391 : #define _10_TAU_CH4_NOISE_ON                    (0x10U) /* noise
 1691  1691                      ;               filter ON */
 1692  1692                      ; line   392 : /* Enable/disable using noise filter of TI05 pin input signal (T
 1693  1693                      ;              NFEN05) */
 1694  1694                      ; line   393 : #define _00_TAU_CH5_NOISE_OFF                   (0x00U) /* noise
 1695  1695                      ;               filter OFF */
 1696  1696                      ; line   394 : #define _20_TAU_CH5_NOISE_ON                    (0x20U) /* noise
 1697  1697                      ;               filter ON */
 1698  1698                      ; line   395 : /* Enable/disable using noise filter of TI06 pin input signal (T
 1699  1699                      ;              NFEN06) */
 1700  1700                      ; line   396 : #define _00_TAU_CH6_NOISE_OFF                   (0x00U) /* noise
 1701  1701                      ;               filter OFF */
 1702  1702                      ; line   397 : #define _40_TAU_CH6_NOISE_ON                    (0x40U) /* noise
 1703  1703                      ;               filter ON */
 1704  1704                      ; line   398 : /* Enable/disable using noise filter of TI07 pin input signal (T
 1705  1705                      ;              NFEN07) */
 1706  1706                      ; line   399 : #define _00_TAU_CH7_NOISE_OFF                   (0x00U) /* noise
 1707  1707                      ;               filter OFF */
 1708  1708                      ; line   400 : #define _80_TAU_CH7_NOISE_ON                    (0x80U) /* noise
 1709  1709                      ;               filter ON */
 1710  1710                      ; line   401 : 
 1711  1711                      ; line   402 : /***************************************************************
 1712  1712                      ;              ********************************************************
 1713  1713                      ; line   403 : Macro definitions
 1714  1714                      ; line   404 : ****************************************************************
 1715  1715                      ;              *******************************************************/
 1716  1716                      ; line   405 : /* 16-bit timer data register 00 (TDR00) */
 1717  1717                      ; line   406 : #define _C34F_TAU_TDR00_VALUE                   (0xC34FU)
 1718  1718                      ; line   407 : /* Clock divisor for TAU0 channel 0 */
 1719  1719                      ; line   408 : #define TAU0_CHANNEL0_DIVISOR                   (8U)      /* fCL
 1720  1720                      ;              K/2^3 */
 1721  1721                      ; line   409 : /* 16-bit timer data register 01 (TDR01) */
 1722  1722                      ; line   410 : #define _F423_TAU_TDR01_VALUE                   (0xF423U)
 1723  1723                      ; line   411 : /* Clock divisor for TAU0 channel 1 */
 1724  1724                      ; line   412 : #define TAU0_CHANNEL1_DIVISOR                   (64U)     /* fCL
 1725  1725                      ;              K/2^6 */
 1726  1726                      ; line   413 : /* 16-bit timer data register 02 (TDR02) */
 1727  1727                      ; line   414 : #define _0138_TAU_TDR02_VALUE                   (0x0138U)
 1728  1728                      ; line   415 : /* Clock divisor for TAU0 channel 2 */
 1729  1729                      ; line   416 : #define TAU0_CHANNEL2_DIVISOR                   (8U)      /* fCL
 1730  1730                      ;              K/2^3 */
 1731  1731                      ; line   417 : /* 16-bit timer data register 03 (TDR03) */
 1732  1732                      ; line   418 : #define _09C3_TAU_TDR03_VALUE                   (0x09C3U)
 1733  1733                      ; line   419 : /* Clock divisor for TAU0 channel 3 */
 1734  1734                      ; line   420 : #define TAU0_CHANNEL3_DIVISOR                   (8U)      /* fCL
 1735  1735                      ;              K/2^3 */
 1736  1736                      ; line   421 : 
 1737  1737                      ; line   422 : /***************************************************************
 1738  1738                      ;              ********************************************************
 1739  1739                      ; line   423 : Typedef definitions
 1740  1740                      ; line   424 : ****************************************************************
 1741  1741                      ;              *******************************************************/
 1742  1742                      ; line   425 : 
 1743  1743                      ; line   426 : /***************************************************************
 1744  1744                      ;              ********************************************************
 1745  1745                      ; line   427 : Global functions
 1746  1746                      ; line   428 : ****************************************************************
 1747  1747                      ;              *******************************************************/
 1748  1748                      ; line   429 : void R_TAU0_Create(void);
 1749  1749                      ; line   430 : void R_TAU0_Channel0_Start(void);
 1750  1750                      ; line   431 : void R_TAU0_Channel0_Stop(void);
 1751  1751                      ; line   432 : void R_TAU0_Channel1_Start(void);
 1752  1752                      ; line   433 : void R_TAU0_Channel1_Stop(void);
 1753  1753                      ; line   434 : void R_TAU0_Channel2_Start(void);
 1754  1754                      ; line   435 : void R_TAU0_Channel2_Stop(void);
 1755  1755                      ; line   436 : void R_TAU0_Channel3_Start(void);
 1756  1756                      ; line   437 : void R_TAU0_Channel3_Stop(void);
 1757  1757                      ; line   438 : 
 1758  1758                      ; line   439 : /* Start user code for function. Do not edit comment generated h
 1759  1759                      ;              ere */
 1760  1760                      ; line   440 : void R_TAU_MsDelay(const uint16_t millisec);
 1761  1761                      ; line     1 : /***************************************************************
 1762  1762                      ;              ********************************************************
 1763  1763                      ; line     2 : * DISCLAIMER
 1764  1764                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
 1765  1765                      ;              nd is only 
 1766  1766                      ; line     4 : * intended for use with Renesas products. No other uses are auth
 1767  1767                      ;              orized. This 
 1768  1768                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
 1769  1769                      ;              otected under 
 1770  1770                      ; line     6 : * all applicable laws, including copyright laws.
 1771  1771                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
 1772  1772                      ;              IES REGARDING 
 1773  1773                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 1774  1774                      ;              G BUT NOT 
 1775  1775                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 1776  1776                      ;              ULAR PURPOSE 
 1777  1777                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
 1778  1778                      ;              AIMED.
 1779  1779                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 1780  1780                      ;               RENESAS 
 1781  1781                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 1782  1782                      ;              ALL BE LIABLE 
 1783  1783                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 1784  1784                      ;               DAMAGES FOR 
 1785  1785                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 1786  1786                      ;              FILIATES HAVE 
 1787  1787                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 1788  1788                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 1789  1789                      ;               this software 
 1790  1790                      ; line    17 : * and to discontinue the availability of this software.  By usin
 1791  1791                      ;              g this software, 
 1792  1792                      ; line    18 : * you agree to the additional terms and conditions found by acce
 1793  1793                      ;              ssing the 
 1794  1794                      ; line    19 : * following link:
 1795  1795                      ; line    20 : * http://www.renesas.com/disclaimer
 1796  1796                      ; line    21 : *
 1797  1797                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
 1798  1798                      ;               reserved.
 1799  1799                      ; line    23 : ****************************************************************
 1800  1800                      ;              *******************************************************/
 1801  1801                      ; line    24 : 
 1802  1802                      ; line    25 : /***************************************************************
 1803  1803                      ;              ********************************************************
 1804  1804                      ; line    26 : * File Name    : r_cg_adc.h
 1805  1805                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
 1806  1806                      ;              ]
 1807  1807                      ; line    28 : * Device(s)    : R5F10WMG
 1808  1808                      ; line    29 : * Tool-Chain   : CA78K0R
 1809  1809                      ; line    30 : * Description  : This file implements device driver for ADC modu
 1810  1810                      ;              le.
 1811  1811                      ; line    31 : * Creation Date: 05-Jun-21
 1812  1812                      ; line    32 : ****************************************************************
 1813  1813                      ;              *******************************************************/
 1814  1814                      ; line    33 : #ifndef ADC_H
 1815  1815                      ; line    34 : #define ADC_H
 1816  1816                      ; line    35 : 
 1817  1817                      ; line    36 : /***************************************************************
 1818  1818                      ;              ********************************************************
 1819  1819                      ; line    37 : Macro definitions (Register bit)
 1820  1820                      ; line    38 : ****************************************************************
 1821  1821                      ;              *******************************************************/
 1822  1822                      ; line    39 : /*
 1823  1823                      ; line    40 :     Peripheral enable register 0 (PER0)
 1824  1824                      ; line    41 : */
 1825  1825                      ; line    42 : /* Control of AD converter input clock (ADCEN) */
 1826  1826                      ; line    43 : #define _00_AD_CLOCK_STOP               (0x00U) /* stop supply o
 1827  1827                      ;              f input clock */
 1828  1828                      ; line    44 : #define _20_AD_CLOCK_SUPPLY             (0x20U) /* supply input 
 1829  1829                      ;              clock */
 1830  1830                      ; line    45 : 
 1831  1831                      ; line    46 : /*
 1832  1832                      ; line    47 :     AD converter mode register 0 (ADM0)
 1833  1833                      ; line    48 : */
 1834  1834                      ; line    49 : #define _00_AD_ADM0_INITIALVALUE        (0x00U)
 1835  1835                      ; line    50 : /* AD conversion operation control (ADCS) */
 1836  1836                      ; line    51 : #define _80_AD_CONVERSION_ENABLE        (0x80U) /* enable AD con
 1837  1837                      ;              version operation control */
 1838  1838                      ; line    52 : #define _00_AD_CONVERSION_DISABLE       (0x00U) /* disable AD co
 1839  1839                      ;              nversion operation control */
 1840  1840                      ; line    53 : /* AD conversion clock selection (FR2 - FR0) */
 1841  1841                      ; line    54 : #define _00_AD_CONVERSION_CLOCK_64      (0x00U) /* fCLK/64 */
 1842  1842                      ; line    55 : #define _08_AD_CONVERSION_CLOCK_32      (0x08U) /* fCLK/32 */
 1843  1843                      ; line    56 : #define _10_AD_CONVERSION_CLOCK_16      (0x10U) /* fCLK/16 */
 1844  1844                      ; line    57 : #define _18_AD_CONVERSION_CLOCK_8       (0x18U) /* fCLK/8 */
 1845  1845                      ; line    58 : #define _20_AD_CONVERSION_CLOCK_6       (0x20U) /* fCLK/6 */
 1846  1846                      ; line    59 : #define _28_AD_CONVERSION_CLOCK_5       (0x28U) /* fCLK/5 */
 1847  1847                      ; line    60 : #define _30_AD_CONVERSION_CLOCK_4       (0x30U) /* fCLK/4 */
 1848  1848                      ; line    61 : #define _38_AD_CONVERSION_CLOCK_2       (0x38U) /* fCLK/2 */
 1849  1849                      ; line    62 : /* Specification AD conversion time mode (LV1, LV0) */
 1850  1850                      ; line    63 : #define _00_AD_TIME_MODE_NORMAL_1       (0x00U) /* normal 1 mode
 1851  1851                      ;               */
 1852  1852                      ; line    64 : #define _02_AD_TIME_MODE_NORMAL_2       (0x02U) /* normal 2 mode
 1853  1853                      ;               */
 1854  1854                      ; line    65 : #define _04_AD_TIME_MODE_LOWVOLTAGE_1   (0x04U) /* low-voltage 1
 1855  1855                      ;               mode */
 1856  1856                      ; line    66 : #define _06_AD_TIME_MODE_LOWVOLTAGE_2   (0x06U) /* low-voltage 2
 1857  1857                      ;               mode */
 1858  1858                      ; line    67 : /* AD comparator operation control (ADCE) */
 1859  1859                      ; line    68 : #define _01_AD_COMPARATOR_ENABLE        (0x01U) /* enable compar
 1860  1860                      ;              ator operation control */
 1861  1861                      ; line    69 : #define _00_AD_COMPARATOR_DISABLE       (0x00U) /* disable compa
 1862  1862                      ;              rator operation control */
 1863  1863                      ; line    70 : 
 1864  1864                      ; line    71 : /*
 1865  1865                      ; line    72 :     Analog input channel specification register (ADS)
 1866  1866                      ; line    73 : */
 1867  1867                      ; line    74 : /* Specification of analog input channel (ADISS, ADS4 - ADS0) */
 1868  1868                      ; line    75 : /* Select mode */
 1869  1869                      ; line    76 : #define _00_AD_INPUT_CHANNEL_0          (0x00U) /* ANI0 */
 1870  1870                      ; line    77 : #define _01_AD_INPUT_CHANNEL_1          (0x01U) /* ANI1 */
 1871  1871                      ; line    78 : #define _10_AD_INPUT_CHANNEL_16         (0x10U) /* ANI16 */
 1872  1872                      ; line    79 : #define _11_AD_INPUT_CHANNEL_17         (0x11U) /* ANI17 */
 1873  1873                      ; line    80 : #define _12_AD_INPUT_CHANNEL_18         (0x12U) /* ANI18 */
 1874  1874                      ; line    81 : #define _13_AD_INPUT_CHANNEL_19         (0x13U) /* ANI19 */
 1875  1875                      ; line    82 : #define _14_AD_INPUT_CHANNEL_20         (0x14U) /* ANI20 */
 1876  1876                      ; line    83 : #define _15_AD_INPUT_CHANNEL_21         (0x15U) /* ANI21 */
 1877  1877                      ; line    84 : #define _16_AD_INPUT_CHANNEL_22         (0x16U) /* ANI22 */
 1878  1878                      ; line    85 : #define _17_AD_INPUT_CHANNEL_23         (0x17U) /* ANI23 */
 1879  1879                      ; line    86 : #define _18_AD_INPUT_CHANNEL_24         (0x18U) /* ANI24 */
 1880  1880                      ; line    87 : #define _19_AD_INPUT_CHANNEL_25         (0x19U) /* ANI25 */
 1881  1881                      ; line    88 : #define _80_AD_INPUT_TEMPERSENSOR       (0x80U) /* temperature s
 1882  1882                      ;              ensor output is used to be the input channel */
 1883  1883                      ; line    89 : #define _81_AD_INPUT_INTERREFVOLT       (0x81U) /* internal refe
 1884  1884                      ;              rence voltage output is used to be the input channel */
 1885  1885                      ; line    90 : 
 1886  1886                      ; line    91 : /*
 1887  1887                      ; line    92 :     AD converter mode register 1 (ADM1)
 1888  1888                      ; line    93 : */
 1889  1889                      ; line    94 : /* AD trigger mode selection (ADTMD1, ADTMD0) */
 1890  1890                      ; line    95 : #define _00_AD_TRIGGER_SOFTWARE         (0x00U) /* software trig
 1891  1891                      ;              ger mode */
 1892  1892                      ; line    96 : #define _80_AD_TRIGGER_HARDWARE_NOWAIT  (0x80U) /* hardware trig
 1893  1893                      ;              ger mode (no wait) */
 1894  1894                      ; line    97 : #define _C0_AD_TRIGGER_HARDWARE_WAIT    (0xC0U) /* hardware trig
 1895  1895                      ;              ger mode (wait) */
 1896  1896                      ; line    98 : /* AD convertion mode selection (ADSCM) */
 1897  1897                      ; line    99 : #define _00_AD_CONVMODE_CONSELECT       (0x00U) /* continuous co
 1898  1898                      ;              nvertion mode */
 1899  1899                      ; line   100 : #define _20_AD_CONVMODE_ONESELECT       (0x20U) /* oneshot conve
 1900  1900                      ;              rtion mode */
 1901  1901                      ; line   101 : /* Trigger signal selection (ADTRS1, ADTRS0) */
 1902  1902                      ; line   102 : #define _00_AD_TRIGGER_INTTM01          (0x00U) /* INTTM01 */
 1903  1903                      ; line   103 : #define _02_AD_TRIGGER_INTRTC           (0x02U) /* INTRTC */
 1904  1904                      ; line   104 : #define _03_AD_TRIGGER_INTIT            (0x03U) /* INTIT */
 1905  1905                      ; line   105 : 
 1906  1906                      ; line   106 : /*
 1907  1907                      ; line   107 :     AD converter mode register 2 (ADM2)
 1908  1908                      ; line   108 : */
 1909  1909                      ; line   109 : /* AD VREF(+) selection (ADREFP1, ADREFP0) */
 1910  1910                      ; line   110 : #define _00_AD_POSITIVE_VDD             (0x00U) /* use VDD as VR
 1911  1911                      ;              EF(+) */
 1912  1912                      ; line   111 : #define _40_AD_POSITIVE_AVREFP          (0x40U) /* use AVREFP as
 1913  1913                      ;               VREF(+) */
 1914  1914                      ; line   112 : #define _80_AD_POSITIVE_INTERVOLT       (0x80U) /* use internal 
 1915  1915                      ;              voltage as VREF(+) */
 1916  1916                      ; line   113 : /* AD VREF(-) selection (ADREFM) */
 1917  1917                      ; line   114 : #define _00_AD_NEGATIVE_VSS             (0x00U) /* use VSS as VR
 1918  1918                      ;              EF(-) */
 1919  1919                      ; line   115 : #define _20_AD_NEGATIVE_AVREFM          (0x20U) /* use AVREFM as
 1920  1920                      ;               VREF(-) */
 1921  1921                      ; line   116 : /* AD conversion result upper/lower bound value selection (ADRCK
 1922  1922                      ;              ) */
 1923  1923                      ; line   117 : #define _00_AD_AREA_MODE_1              (0x00U) /* generates INT
 1924  1924                      ;              AD when ADLL <= ADCRH <= ADUL */
 1925  1925                      ; line   118 : #define _08_AD_AREA_MODE_2_3            (0x08U) /* generates INT
 1926  1926                      ;              AD when ADUL < ADCRH or ADLL > ADCRH */
 1927  1927                      ; line   119 : /* AD wakeup function selection (AWC) */
 1928  1928                      ; line   120 : #define _00_AD_SNOOZE_OFF               (0x00U) /* stop SNOOZE f
 1929  1929                      ;              unction */
 1930  1930                      ; line   121 : #define _04_AD_SNOOZE_ON                (0x04U) /* use SNOOZE fu
 1931  1931                      ;              nction */
 1932  1932                      ; line   122 : /* AD resolution selection (ADTYP) */
 1933  1933                      ; line   123 : #define _00_AD_RESOLUTION_10BIT         (0x00U) /* 10 bits */
 1934  1934                      ; line   124 : #define _01_AD_RESOLUTION_8BIT          (0x01U) /* 8 bits */
 1935  1935                      ; line   125 : 
 1936  1936                      ; line   126 : /*
 1937  1937                      ; line   127 :     AD test function register (ADTES)
 1938  1938                      ; line   128 : */
 1939  1939                      ; line   129 : /* AD test mode signal (ADTES2 - ADTES0) */
 1940  1940                      ; line   130 : #define _00_AD_NORMAL_INPUT             (0x00U) /* normal mode *
 1941  1941                      ;              /
 1942  1942                      ; line   131 : #define _02_AD_TEST_AVREFM              (0x02U) /* use AVREFM as
 1943  1943                      ;               test signal */
 1944  1944                      ; line   132 : #define _03_AD_TEST_AVREFP              (0x03U) /* use AVREFP as
 1945  1945                      ;               test signal */
 1946  1946                      ; line   133 : 
 1947  1947                      ; line   134 : /*
 1948  1948                      ; line   135 :     AD port configuration register (ADPC)
 1949  1949                      ; line   136 : */
 1950  1950                      ; line   137 : /* Analog input/digital input switching (ADPC1, ADPC0) */
 1951  1951                      ; line   138 : #define _00_AD_ADPC_2ANALOG             (0x00U) /* ANI0 - ANI1 *
 1952  1952                      ;              /
 1953  1953                      ; line   139 : #define _01_AD_ADPC_0ANALOG             (0x01U) /* all digital *
 1954  1954                      ;              /
 1955  1955                      ; line   140 : #define _02_AD_ADPC_1ANALOG             (0x02U) /* ANI0 */
 1956  1956                      ; line   141 : 
 1957  1957                      ; line   142 : /***************************************************************
 1958  1958                      ;              ********************************************************
 1959  1959                      ; line   143 : Macro definitions
 1960  1960                      ; line   144 : ****************************************************************
 1961  1961                      ;              *******************************************************/
 1962  1962                      ; line   145 : /* Upper bound (ADUL) value */
 1963  1963                      ; line   146 : #define _FF_AD_ADUL_VALUE               (0xFFU)
 1964  1964                      ; line   147 : /* Lower bound (ADLL) value */
 1965  1965                      ; line   148 : #define _00_AD_ADLL_VALUE               (0x00U)
 1966  1966                      ; line   149 : 
 1967  1967                      ; line   150 : /***************************************************************
 1968  1968                      ;              ********************************************************
 1969  1969                      ; line   151 : Typedef definitions
 1970  1970                      ; line   152 : ****************************************************************
 1971  1971                      ;              *******************************************************/
 1972  1972                      ; line   153 : typedef enum
 1973  1973                      ; line   154 : {
 1974  1974                      ; line   155 :     ADCHANNEL0,
 1975  1975                      ; line   156 :     ADCHANNEL1,
 1976  1976                      ; line   157 :     ADCHANNEL16 = 16U,
 1977  1977                      ; line   158 :     ADCHANNEL17,
 1978  1978                      ; line   159 :     ADCHANNEL18,
 1979  1979                      ; line   160 :     ADCHANNEL19,
 1980  1980                      ; line   161 :     ADCHANNEL20,
 1981  1981                      ; line   162 :     ADCHANNEL21,
 1982  1982                      ; line   163 :     ADCHANNEL22,
 1983  1983                      ; line   164 :     ADCHANNEL23,
 1984  1984                      ; line   165 :     ADCHANNEL24,
 1985  1985                      ; line   166 :     ADCHANNEL25,
 1986  1986                      ; line   167 :     ADTEMPERSENSOR0 = 128U,
 1987  1987                      ; line   168 :     ADINTERREFVOLT
 1988  1988                      ; line   169 : } ad_channel_t;
 1989  1989                      ; line   170 : 
 1990  1990                      ; line   171 : typedef enum
 1991  1991                      ; line   172 : {
 1992  1992                      ; line   173 :     ADNORMALINPUT,
 1993  1993                      ; line   174 :     ADAVREFM = 2U,
 1994  1994                      ; line   175 :     ADAVREFP
 1995  1995                      ; line   176 : } test_channel_t;
 1996  1996                      ; line   177 : 
 1997  1997                      ; line   178 : /***************************************************************
 1998  1998                      ;              ********************************************************
 1999  1999                      ; line   179 : Global functions
 2000  2000                      ; line   180 : ****************************************************************
 2001  2001                      ;              *******************************************************/
 2002  2002                      ; line   181 : void R_ADC_Create(void);
 2003  2003                      ; line   182 : void R_ADC_Start(void);
 2004  2004                      ; line   183 : void R_ADC_Stop(void);
 2005  2005                      ; line   184 : void R_ADC_Set_OperationOn(void);
 2006  2006                      ; line   185 : void R_ADC_Set_OperationOff(void);
 2007  2007                      ; line   186 : void R_ADC_Get_Result(uint16_t * const buffer);
 2008  2008                      ; line   187 : 
 2009  2009                      ; line   188 : /* Start user code for function. Do not edit comment generated h
 2010  2010                      ;              ere */
 2011  2011                      ; line   189 : 
 2012  2012                      ; line   190 : /* Variable for storing the ADC value */
 2013  2013                      ; line   191 : extern volatile uint16_t g_adc_result;
 2014  2014                      ; line     1 : /***************************************************************
 2015  2015                      ;              ********************************************************
 2016  2016                      ; line     2 : * DISCLAIMER
 2017  2017                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
 2018  2018                      ;              nd is only 
 2019  2019                      ; line     4 : * intended for use with Renesas products. No other uses are auth
 2020  2020                      ;              orized. This 
 2021  2021                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
 2022  2022                      ;              otected under 
 2023  2023                      ; line     6 : * all applicable laws, including copyright laws.
 2024  2024                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
 2025  2025                      ;              IES REGARDING 
 2026  2026                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 2027  2027                      ;              G BUT NOT 
 2028  2028                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 2029  2029                      ;              ULAR PURPOSE 
 2030  2030                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
 2031  2031                      ;              AIMED.
 2032  2032                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 2033  2033                      ;               RENESAS 
 2034  2034                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 2035  2035                      ;              ALL BE LIABLE 
 2036  2036                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 2037  2037                      ;               DAMAGES FOR 
 2038  2038                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 2039  2039                      ;              FILIATES HAVE 
 2040  2040                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 2041  2041                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 2042  2042                      ;               this software 
 2043  2043                      ; line    17 : * and to discontinue the availability of this software.  By usin
 2044  2044                      ;              g this software, 
 2045  2045                      ; line    18 : * you agree to the additional terms and conditions found by acce
 2046  2046                      ;              ssing the 
 2047  2047                      ; line    19 : * following link:
 2048  2048                      ; line    20 : * http://www.renesas.com/disclaimer
 2049  2049                      ; line    21 : *
 2050  2050                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
 2051  2051                      ;               reserved.
 2052  2052                      ; line    23 : ****************************************************************
 2053  2053                      ;              *******************************************************/
 2054  2054                      ; line    24 : 
 2055  2055                      ; line    25 : /***************************************************************
 2056  2056                      ;              ********************************************************
 2057  2057                      ; line    26 : * File Name    : r_cg_intp.h
 2058  2058                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
 2059  2059                      ;              ]
 2060  2060                      ; line    28 : * Device(s)    : R5F10WMG
 2061  2061                      ; line    29 : * Tool-Chain   : CA78K0R
 2062  2062                      ; line    30 : * Description  : This file implements device driver for INTP mod
 2063  2063                      ;              ule.
 2064  2064                      ; line    31 : * Creation Date: 05-Jun-21
 2065  2065                      ; line    32 : ****************************************************************
 2066  2066                      ;              *******************************************************/
 2067  2067                      ; line    33 : #ifndef INTP_H
 2068  2068                      ; line    34 : #define INTP_H
 2069  2069                      ; line    35 : 
 2070  2070                      ; line    36 : /***************************************************************
 2071  2071                      ;              ********************************************************
 2072  2072                      ; line    37 : Macro definitions (Register bit)
 2073  2073                      ; line    38 : ****************************************************************
 2074  2074                      ;              *******************************************************/
 2075  2075                      ; line    39 : /*
 2076  2076                      ; line    40 :     External Interrupt Rising Edge Enable Register 0 (EGP0)
 2077  2077                      ; line    41 : */
 2078  2078                      ; line    42 : /* INTPn pin valid edge selection (EGPn) */
 2079  2079                      ; line    43 : #define _01_INTP0_EDGE_RISING_SEL       (0x01U) /* rising edge s
 2080  2080                      ;              elected for INTP0 pin */
 2081  2081                      ; line    44 : #define _00_INTP0_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2082  2082                      ;              ot selected for INTP0 pin */
 2083  2083                      ; line    45 : #define _02_INTP1_EDGE_RISING_SEL       (0x02U) /* rising edge s
 2084  2084                      ;              elected for INTP1 pin */
 2085  2085                      ; line    46 : #define _00_INTP1_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2086  2086                      ;              ot selected for INTP1 pin */
 2087  2087                      ; line    47 : #define _04_INTP2_EDGE_RISING_SEL       (0x04U) /* rising edge s
 2088  2088                      ;              elected for INTP2 pin */
 2089  2089                      ; line    48 : #define _00_INTP2_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2090  2090                      ;              ot selected for INTP2 pin */
 2091  2091                      ; line    49 : #define _08_INTP3_EDGE_RISING_SEL       (0x08U) /* rising edge s
 2092  2092                      ;              elected for INTP3 pin */
 2093  2093                      ; line    50 : #define _00_INTP3_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2094  2094                      ;              ot selected for INTP3 pin */
 2095  2095                      ; line    51 : #define _10_INTP4_EDGE_RISING_SEL       (0x10U) /* rising edge s
 2096  2096                      ;              elected for INTP4 pin */
 2097  2097                      ; line    52 : #define _00_INTP4_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2098  2098                      ;              ot selected for INTP4 pin */
 2099  2099                      ; line    53 : #define _20_INTP5_EDGE_RISING_SEL       (0x20U) /* rising edge s
 2100  2100                      ;              elected for INTP5 pin */
 2101  2101                      ; line    54 : #define _00_INTP5_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2102  2102                      ;              ot selected for INTP5 pin */
 2103  2103                      ; line    55 : #define _40_INTP6_EDGE_RISING_SEL       (0x40U) /* rising edge s
 2104  2104                      ;              elected for INTP6 pin */
 2105  2105                      ; line    56 : #define _00_INTP6_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2106  2106                      ;              ot selected for INTP6 pin */
 2107  2107                      ; line    57 : #define _80_INTP7_EDGE_RISING_SEL       (0x80U) /* rising edge s
 2108  2108                      ;              elected for INTP7 pin */
 2109  2109                      ; line    58 : #define _00_INTP7_EDGE_RISING_UNSEL     (0x00U) /* rising edge n
 2110  2110                      ;              ot selected for INTP7 pin */
 2111  2111                      ; line    59 : 
 2112  2112                      ; line    60 : /*
 2113  2113                      ; line    61 :     External Interrupt Falling Edge Enable Register 0 (EGN0)
 2114  2114                      ; line    62 : */
 2115  2115                      ; line    63 : /* INTPn pin valid edge selection (EGNn) */
 2116  2116                      ; line    64 : #define _01_INTP0_EDGE_FALLING_SEL      (0x01U) /* falling edge 
 2117  2117                      ;              selected for INTP0 pin */
 2118  2118                      ; line    65 : #define _00_INTP0_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2119  2119                      ;              not selected for INTP0 pin */
 2120  2120                      ; line    66 : #define _02_INTP1_EDGE_FALLING_SEL      (0x02U) /* falling edge 
 2121  2121                      ;              selected for INTP1 pin */
 2122  2122                      ; line    67 : #define _00_INTP1_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2123  2123                      ;              not selected for INTP1 pin */
 2124  2124                      ; line    68 : #define _04_INTP2_EDGE_FALLING_SEL      (0x04U) /* falling edge 
 2125  2125                      ;              selected for INTP2 pin */
 2126  2126                      ; line    69 : #define _00_INTP2_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2127  2127                      ;              not selected for INTP2 pin */
 2128  2128                      ; line    70 : #define _08_INTP3_EDGE_FALLING_SEL      (0x08U) /* falling edge 
 2129  2129                      ;              selected for INTP3 pin */
 2130  2130                      ; line    71 : #define _00_INTP3_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2131  2131                      ;              not selected for INTP3 pin */
 2132  2132                      ; line    72 : #define _10_INTP4_EDGE_FALLING_SEL      (0x10U) /* falling edge 
 2133  2133                      ;              selected for INTP4 pin */
 2134  2134                      ; line    73 : #define _00_INTP4_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2135  2135                      ;              not selected for INTP4 pin */
 2136  2136                      ; line    74 : #define _20_INTP5_EDGE_FALLING_SEL      (0x20U) /* falling edge 
 2137  2137                      ;              selected for INTP5 pin */
 2138  2138                      ; line    75 : #define _00_INTP5_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2139  2139                      ;              not selected for INTP5 pin */
 2140  2140                      ; line    76 : #define _40_INTP6_EDGE_FALLING_SEL      (0x40U) /* falling edge 
 2141  2141                      ;              selected for INTP6 pin */
 2142  2142                      ; line    77 : #define _00_INTP6_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2143  2143                      ;              not selected for INTP6 pin */
 2144  2144                      ; line    78 : #define _80_INTP7_EDGE_FALLING_SEL      (0x80U) /* falling edge 
 2145  2145                      ;              selected for INTP7 pin */
 2146  2146                      ; line    79 : #define _00_INTP7_EDGE_FALLING_UNSEL    (0x00U) /* falling edge 
 2147  2147                      ;              not selected for INTP7 pin */
 2148  2148                      ; line    80 : 
 2149  2149                      ; line    81 : /***************************************************************
 2150  2150                      ;              ********************************************************
 2151  2151                      ; line    82 : Macro definitions
 2152  2152                      ; line    83 : ****************************************************************
 2153  2153                      ;              *******************************************************/
 2154  2154                      ; line    84 : 
 2155  2155                      ; line    85 : /***************************************************************
 2156  2156                      ;              ********************************************************
 2157  2157                      ; line    86 : Typedef definitions
 2158  2158                      ; line    87 : ****************************************************************
 2159  2159                      ;              *******************************************************/
 2160  2160                      ; line    88 : 
 2161  2161                      ; line    89 : /***************************************************************
 2162  2162                      ;              ********************************************************
 2163  2163                      ; line    90 : Global functions
 2164  2164                      ; line    91 : ****************************************************************
 2165  2165                      ;              *******************************************************/
 2166  2166                      ; line    92 : void R_INTC_Create(void);
 2167  2167                      ; line    93 : void R_INTC0_Start(void);
 2168  2168                      ; line    94 : void R_INTC0_Stop(void);
 2169  2169                      ; line    95 : void R_INTC7_Start(void);
 2170  2170                      ; line    96 : void R_INTC7_Stop(void);
 2171  2171                      ; line    97 : 
 2172  2172                      ; line    98 : /* Start user code for function. Do not edit comment generated h
 2173  2173                      ;              ere */
 2174  2174                      ; line    99 : 
 2175  2175                      ; line   100 : /* Function prototypes for detecting and setting the edge trigge
 2176  2176                      ;              r of INTP0 */
 2177  2177                      ; line   101 : uint8_t R_INTC0_IsFallingEdge(void);
 2178  2178                      ; line   102 : void R_INTC0_SetFallingEdge(const uint8_t set_f_edge);
 2179  2179                      ; line   103 : void R_INTC0_SetRisingEdge(const uint8_t set_r_edge);
 2180  2180                      ; line   104 : 
 2181  2181                      ; line   105 : /* Function prototypes for detecting and setting the edge trigge
 2182  2182                      ;              r of INTP7 */
 2183  2183                      ; line   106 : uint8_t R_INTC7_IsFallingEdge(void);
 2184  2184                      ; line   107 : void R_INTC7_SetFallingEdge(const uint8_t set_f_edge);
 2185  2185                      ; line   108 : void R_INTC7_SetRisingEdge(const uint8_t set_r_edge);
 2186  2186                      ; line     1 : /***************************************************************
 2187  2187                      ;              ********************************************************
 2188  2188                      ; line     2 : * DISCLAIMER
 2189  2189                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
 2190  2190                      ;              nd is only 
 2191  2191                      ; line     4 : * intended for use with Renesas products. No other uses are auth
 2192  2192                      ;              orized. This 
 2193  2193                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
 2194  2194                      ;              otected under 
 2195  2195                      ; line     6 : * all applicable laws, including copyright laws.
 2196  2196                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
 2197  2197                      ;              IES REGARDING 
 2198  2198                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
 2199  2199                      ;              G BUT NOT 
 2200  2200                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
 2201  2201                      ;              ULAR PURPOSE 
 2202  2202                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
 2203  2203                      ;              AIMED.
 2204  2204                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
 2205  2205                      ;               RENESAS 
 2206  2206                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
 2207  2207                      ;              ALL BE LIABLE 
 2208  2208                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
 2209  2209                      ;               DAMAGES FOR 
 2210  2210                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
 2211  2211                      ;              FILIATES HAVE 
 2212  2212                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 2213  2213                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
 2214  2214                      ;               this software 
 2215  2215                      ; line    17 : * and to discontinue the availability of this software.  By usin
 2216  2216                      ;              g this software, 
 2217  2217                      ; line    18 : * you agree to the additional terms and conditions found by acce
 2218  2218                      ;              ssing the 
 2219  2219                      ; line    19 : * following link:
 2220  2220                      ; line    20 : * http://www.renesas.com/disclaimer
 2221  2221                      ; line    21 : *
 2222  2222                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
 2223  2223                      ;               reserved.
 2224  2224                      ; line    23 : ****************************************************************
 2225  2225                      ;              *******************************************************/
 2226  2226                      ; line    24 : 
 2227  2227                      ; line    25 : /***************************************************************
 2228  2228                      ;              ********************************************************
 2229  2229                      ; line    26 : * File Name    : r_cg_systeminit.c
 2230  2230                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
 2231  2231                      ;              ]
 2232  2232                      ; line    28 : * Device(s)    : R5F10WMG
 2233  2233                      ; line    29 : * Tool-Chain   : CA78K0R
 2234  2234                      ; line    30 : * Description  : This file implements system initializing functi
 2235  2235                      ;              on.
 2236  2236                      ; line    31 : * Creation Date: 05-Jun-21
 2237  2237                      ; line    32 : ****************************************************************
 2238  2238                      ;              *******************************************************/
 2239  2239                      ; line    33 : 
 2240  2240                      ; line    34 : /***************************************************************
 2241  2241                      ;              ********************************************************
 2242  2242                      ; line    35 : Pragma directive
 2243  2243                      ; line    36 : ****************************************************************
 2244  2244                      ;              *******************************************************/
 2245  2245                      ; line    37 : /* Start user code for pragma. Do not edit comment generated her
 2246  2246                      ;              e */
 2247  2247                      ; line    38 : /* End user code. Do not edit comment generated here */
 2248  2248                      ; line    39 : 
 2249  2249                      ; line    40 : /***************************************************************
 2250  2250                      ;              ********************************************************
 2251  2251                      ; line    41 : Includes
 2252  2252                      ; line    42 : ****************************************************************
 2253  2253                      ;              *******************************************************/
 2254  2254                      ; line    43 : #include "r_cg_macrodriver.h"
 2255  2255                      ; line    44 : #include "r_cg_cgc.h"
 2256  2256                      ; line    45 : #include "r_cg_port.h"
 2257  2257                      ; line    46 : #include "r_cg_tau.h"
 2258  2258                      ; line    47 : #include "r_cg_adc.h"
 2259  2259                      ; line    48 : #include "r_cg_intp.h"
 2260  2260                      ; line    49 : /* Start user code for include. Do not edit comment generated he
 2261  2261                      ;              re */
 2262  2262                      ; line    50 : /* End user code. Do not edit comment generated here */
 2263  2263                      ; line    51 : #include "r_cg_userdefine.h"
 2264  2264                      ; line    52 : 
 2265  2265                      ; line    53 : /***************************************************************
 2266  2266                      ;              ********************************************************
 2267  2267                      ; line    54 : Global variables and functions
 2268  2268                      ; line    55 : ****************************************************************
 2269  2269                      ;              *******************************************************/
 2270  2270                      ; line    56 : /* Start user code for global. Do not edit comment generated her
 2271  2271                      ;              e */
 2272  2272                      ; line    57 : /* End user code. Do not edit comment generated here */
 2273  2273                      ; line    58 : 
 2274  2274                      ; line    59 : /***************************************************************
 2275  2275                      ;              ********************************************************
 2276  2276                      ; line    60 : * Function Name: R_Systeminit
 2277  2277                      ; line    61 : * Description  : This function initializes every macro.
 2278  2278                      ; line    62 : * Arguments    : None
 2279  2279                      ; line    63 : * Return Value : None
 2280  2280                      ; line    64 : ****************************************************************
 2281  2281                      ;              *******************************************************/
 2282  2282                      ; line    65 : void R_Systeminit(void)
 2283  2283                      ; line    66 : {
 2284  2284                      
 2285  2285 -----                @@CODEL CSEG
 2286  2286 00000                _R_Systeminit:
 2287  2287                      $DGL    1,19
 2288  2288 00000                ??bf_R_Systeminit:
 2289  2289                      ; line    67 :     PIOR = 0x00U;
 2290  2290                      $DGL    0,2
 2291  2291 00000  F57700                clrb    !PIOR                                           ;[INF] 3, 1
 2292  2292                      ; line    68 :     R_CGC_Get_ResetSource();
 2293  2293                      $DGL    0,3
 2294  2294 00003 RFC000000              call    !!_R_CGC_Get_ResetSource                        ;[INF] 4, 3
 2295  2295                      ; line    69 :     R_PORT_Create();
 2296  2296                      $DGL    0,4
 2297  2297 00007 RFC000000              call    !!_R_PORT_Create                                ;[INF] 4, 3
 2298  2298                      ; line    70 :     R_CGC_Create();
 2299  2299                      $DGL    0,5
 2300  2300 0000B RFC000000              call    !!_R_CGC_Create                                 ;[INF] 4, 3
 2301  2301                      ; line    71 :     R_TAU0_Create();
 2302  2302                      $DGL    0,6
 2303  2303 0000F RFC000000              call    !!_R_TAU0_Create                                ;[INF] 4, 3
 2304  2304                      ; line    72 :     R_ADC_Create();
 2305  2305                      $DGL    0,7
 2306  2306 00013 RFC000000              call    !!_R_ADC_Create                                 ;[INF] 4, 3
 2307  2307                      ; line    73 :     R_INTC_Create();
 2308  2308                      $DGL    0,8
 2309  2309 00017 RFC000000              call    !!_R_INTC_Create                                ;[INF] 4, 3
 2310  2310                      ; line    74 :     CRC0CTL = 0x00U;
 2311  2311                      $DGL    0,9
 2312  2312 0001B  F5F002                clrb    !CRC0CTL                                        ;[INF] 3, 1
 2313  2313                      ; line    75 :     IAWCTL = 0x00U;
 2314  2314                      $DGL    0,10
 2315  2315 0001E  F57800                clrb    !IAWCTL                                         ;[INF] 3, 1
 2316  2316                      ; line    76 :     PMS = 0x00U;
 2317  2317                      $DGL    0,11
 2318  2318 00021  F57B00                clrb    !PMS                                            ;[INF] 3, 1
 2319  2319                      ; line    77 : }
 2320  2320                      $DGL    0,12
 2321  2321 00024                ??ef_R_Systeminit:
 2322  2322 00024  D7                    ret                                                     ;[INF] 1, 6
 2323  2323 00025                ??ee_R_Systeminit:
 2324  2324                      ; line    78 : 
 2325  2325                      ; line    79 : /***************************************************************
 2326  2326                      ;              ********************************************************
 2327  2327                      ; line    80 : * Function Name: hdwinit
 2328  2328                      ; line    81 : * Description  : This function initializes hardware setting.
 2329  2329                      ; line    82 : * Arguments    : None
 2330  2330                      ; line    83 : * Return Value : None
 2331  2331                      ; line    84 : ****************************************************************
 2332  2332                      ;              *******************************************************/
 2333  2333                      ; line    85 : void hdwinit(void)
 2334  2334                      ; line    86 : {
 2335  2335 00025                _hdwinit:
 2336  2336                      $DGL    1,25
 2337  2337 00025  717BFA                di                                                      ;[INF] 3, 4
 2338  2338 00028                ??bf_hdwinit:
 2339  2339                      ; line    87 :     DI();
 2340  2340                      ; line    88 :     R_Systeminit();
 2341  2341                      $DGL    0,3
 2342  2342 00028 RFC000000              call    !!_R_Systeminit                                 ;[INF] 4, 3
 2343  2343                      ; line    89 : }
 2344  2344                      $DGL    0,4
 2345  2345 0002C                ??ef_hdwinit:
 2346  2346 0002C  D7                    ret                                                     ;[INF] 1, 6
 2347  2347 0002D                ??ee_hdwinit:
 2348  2348                      
 2349  2349 -----                @@CODE  CSEG    BASE
 2350  2350                      
 2351  2351 -----                @@BASE  CSEG    BASE
 2352  2352                              END
 2353  2353                      
 2354  2354                      
 2355  2355                      ; *** Code Information ***
 2356  2356                      ;
 2357  2357                      ; $FILE C:\Users\nguye\Downloads\dtmf_reader_rl78\RSK_Module_test\RSKRL78L13\AD
 2358  2358                      ;       C_Repeat\cg_src\r_cg_systeminit.c
 2359  2359                      ;
 2360  2360                      ; $FUNC R_Systeminit(66)
 2361  2361                      ;       void=(void)
 2362  2362                      ;       CODE SIZE= 37 bytes, CLOCK_SIZE= 28 clocks, STACK_SIZE= 4 bytes
 2363  2363                      ;
 2364  2364                      ; $CALL R_CGC_Get_ResetSource(68)
 2365  2365                      ;       void=(void)
 2366  2366                      ;
 2367  2367                      ; $CALL R_PORT_Create(69)
 2368  2368                      ;       void=(void)
 2369  2369                      ;
 2370  2370                      ; $CALL R_CGC_Create(70)
 2371  2371                      ;       void=(void)
 2372  2372                      ;
 2373  2373                      ; $CALL R_TAU0_Create(71)
 2374  2374                      ;       void=(void)
 2375  2375                      ;
 2376  2376                      ; $CALL R_ADC_Create(72)
 2377  2377                      ;       void=(void)
 2378  2378                      ;
 2379  2379                      ; $CALL R_INTC_Create(73)
 2380  2380                      ;       void=(void)
 2381  2381                      ;
 2382  2382                      ; $FUNC hdwinit(86)
 2383  2383                      ;       void=(void)
 2384  2384                      ;       CODE SIZE= 8 bytes, CLOCK_SIZE= 13 clocks, STACK_SIZE= 4 bytes
 2385  2385                      ;
 2386  2386                      ; $CALL R_Systeminit(88)
 2387  2387                      ;       void=(void)
 2388  2388                      
 2389  2389                      ; Target chip : R5F10WMG
 2390  2390                      ; Device file : V1.00 

Segment informations:

ADRS  LEN      NAME

00000 00000H.0 @@BITS
00000 00000H   @@CNST
00000 00000H   @@R_INIT
00000 00000H   @@INIT
00000 00000H   @@DATA
00000 00000H   @@R_INIS
00000 00000H   @@INIS
00000 00000H   @@DATS
00000 00000H   @@CNSTL
00000 00000H   @@RLINIT
00000 00000H   @@INITL
00000 00000H   @@DATAL
00000 00000H   @@CALT
00000 0002DH   @@CODEL
00000 00000H   @@CODE
00000 00000H   @@BASE

 Target chip : R5F10WMG
 Device file : V1.00
Assembly complete,     0 error(s) and     0 warning(s) found. (    0)
