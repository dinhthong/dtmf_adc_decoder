; 78K0R C Compiler V2.60 Assembler Source        Date: 5 Jun 2021 Time:10:38:20

; Command   : -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\
;             Device\RL78\Devicefile ..\RSKRL78L13\ADC_Repeat\cg_src\lcd_panel.
;             c -oDebug -_msgoff -nq -i..\RSKRL78L13\ADC_Repeat\cg_src -v -w2 -
;             zps -mm -mi0 -saDebug -li -no -g2
; In-file   : ..\RSKRL78L13\ADC_Repeat\cg_src\lcd_panel.c
; Asm-file  : Debug\lcd_panel.asm
; Para-file : 

$PROCESSOR(F10WMG)
$DEBUG
$NODEBUGA
$KANJICODE SJIS
$TOL_INF	03FH, 0260H, 00H, 04000H, 00H, 00H, 00H

$DGS	FIL_NAM, .file,		02EDH,	0FFFEH,	03FH,	067H,	01H,	00H
$DGS	AUX_FIL, lcd_panel.c
$DGS	MOD_NAM, lcd_panel,	00H,	0FFFEH,	00H,	077H,	00H,	00H
$DGS	SEC_NAM, @@BITS,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@CNST,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@R_INIT,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@INIT,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@DATA,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@R_INIS,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@INIS,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@DATS,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@CNSTL,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@RLINIT,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@INITL,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@DATAL,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@CALT,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@CODE,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@CODEL,	U,	U,	00H,	078H,	00H,	00H
$DGS	SEC_NAM, @@BASE,	U,	U,	00H,	078H,	00H,	00H
$DGS	STR_STR, .0fake,	00H,	0FFFEH,	08H,	0AH,	01H,	00H
$DGS	AUX_TAG, 02H,		01FH
$DGS	BIT_FLD, _ONE,		00H,	0FFFFH,	0CH,	012H,	01H,	00H
$DGS	AUX_BIT, 00H,		04H
$DGS	BIT_FLD, _TWO,		04H,	0FFFFH,	0CH,	012H,	01H,	00H
$DGS	AUX_BIT, 00H,		04H
$DGS	BIT_FLD, _THREE,	08H,	0FFFFH,	0CH,	012H,	01H,	00H
$DGS	AUX_BIT, 00H,		04H
$DGS	BIT_FLD, _FOUR,		0CH,	0FFFFH,	0CH,	012H,	01H,	00H
$DGS	AUX_BIT, 00H,		04H
$DGS	END_STR, .eos,		02H,	0FFFFH,	00H,	066H,	01H,	00H
$DGS	AUX_EOS, 013H,		02H
$DGS	UNI_TAG, _LCD_MAP,	00H,	0FFFEH,	09H,	0CH,	01H,	00H
$DGS	AUX_TAG, 04H,		026H
$DGS	MEB_UNI, _WORD,		00H,	0FFFFH,	05H,	0BH,	00H,	00H
$DGS	MEB_UNI, _BYTE,		00H,	0FFFFH,	08H,	0BH,	01H,	00H
$DGS	AUX_STR, 013H,		00H,	02H,	00H,	00H,	00H,	00H,	00H
$DGS	END_STR, .eos,		04H,	0FFFFH,	00H,	066H,	01H,	00H
$DGS	AUX_EOS, 01FH,		04H
$DGS	GLV_SYM, _Init_Display_Panel,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	02CH,	01H,	00H
$DGS	BEG_FUN, ??bf_Init_Display_Panel,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 03FH,		00H,	02CH
$DGS	END_FUN, ??ef_Init_Display_Panel,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 014H
$DGS	GLV_SYM, _Validate_Input,	U,	U,	03H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	075H,	01H,	00H
$DGS	BEG_FUN, ??bf_Validate_Input,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 068H,		02H,	033H
$DGS	FUN_ARG, _input,	00H,	0FFFFH,	0500CH,	09H,	00H,	00H
$DGS	FUN_ARG, _output,	08H,	0FFFFH,	0500CH,	09H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	BEG_BLK, ??bb00_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04H,		00H,	037H
$DGS	END_BLK, ??eb00_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 07H
$DGS	BEG_BLK, ??bb01_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0BH,		00H,	03BH
$DGS	END_BLK, ??eb01_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0FH
$DGS	BEG_BLK, ??bb02_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 013H,		00H,	03FH
$DGS	END_BLK, ??eb02_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 017H
$DGS	BEG_BLK, ??bb03_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 01BH,		00H,	043H
$DGS	END_BLK, ??eb03_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01FH
$DGS	BEG_BLK, ??bb04_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 023H,		00H,	047H
$DGS	END_BLK, ??eb04_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 027H
$DGS	BEG_BLK, ??bb05_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02BH,		00H,	04BH
$DGS	END_BLK, ??eb05_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 02FH
$DGS	BEG_BLK, ??bb06_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 033H,		00H,	04DH
$DGS	BEG_BLK, ??bb07_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 036H,		00H,	04FH
$DGS	BEG_BLK, ??bb08_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 039H,		00H,	053H
$DGS	END_BLK, ??eb08_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 03BH
$DGS	BEG_BLK, ??bb09_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 040H,		00H,	057H
$DGS	END_BLK, ??eb09_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 042H
$DGS	BEG_BLK, ??bb0A_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 047H,		00H,	05BH
$DGS	END_BLK, ??eb0A_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 049H
$DGS	BEG_BLK, ??bb0B_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04EH,		00H,	05FH
$DGS	END_BLK, ??eb0B_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 050H
$DGS	BEG_BLK, ??bb0C_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 055H,		00H,	063H
$DGS	END_BLK, ??eb0C_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 057H
$DGS	BEG_BLK, ??bb0D_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 05CH,		00H,	067H
$DGS	END_BLK, ??eb0D_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 05EH
$DGS	BEG_BLK, ??bb0E_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 062H,		00H,	06BH
$DGS	END_BLK, ??eb0E_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 064H
$DGS	BEG_BLK, ??bb0F_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 069H,		00H,	00H
$DGS	END_BLK, ??eb0F_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 06BH
$DGS	END_BLK, ??eb07_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 06CH
$DGS	END_BLK, ??eb06_Validate_Input,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 06EH
$DGS	END_FUN, ??ef_Validate_Input,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 06FH
$DGS	GLV_SYM, _SECTA_Glyph_Map,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0ADH,	01H,	00H
$DGS	BEG_FUN, ??bf_SECTA_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 0E3H,		06H,	07FH
$DGS	FUN_ARG, _glyph,	04H,	0FFFFH,	0500CH,	09H,	00H,	00H
$DGS	FUN_ARG, _digit,	0CH,	0FFFFH,	0500DH,	09H,	00H,	00H
$DGS	AUT_VAR, _PinPtr1,	02H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	AUT_VAR, _PinPtr2,	00H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	BEG_BLK, ??bb00_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 07H,		00H,	081H
$DGS	BEG_BLK, ??bb01_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0AH,		00H,	085H
$DGS	END_BLK, ??eb01_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0DH
$DGS	BEG_BLK, ??bb02_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 012H,		00H,	089H
$DGS	END_BLK, ??eb02_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 015H
$DGS	BEG_BLK, ??bb03_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 01AH,		00H,	08DH
$DGS	END_BLK, ??eb03_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01DH
$DGS	BEG_BLK, ??bb04_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 022H,		00H,	091H
$DGS	END_BLK, ??eb04_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 025H
$DGS	BEG_BLK, ??bb05_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 029H,		00H,	097H
$DGS	END_BLK, ??eb05_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 02BH
$DGS	END_BLK, ??eb00_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 02DH
$DGS	BEG_BLK, ??bb06_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 035H,		00H,	099H
$DGS	BEG_BLK, ??bb07_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 037H,		00H,	09DH
$DGS	END_BLK, ??eb07_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 03AH
$DGS	BEG_BLK, ??bb08_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 03CH,		00H,	0A3H
$DGS	END_BLK, ??eb08_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 03FH
$DGS	END_BLK, ??eb06_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 040H
$DGS	BEG_BLK, ??bb09_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 042H,		00H,	0A7H
$DGS	END_BLK, ??eb09_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 046H
$DGS	BEG_BLK, ??bb0A_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 048H,		00H,	00H
$DGS	END_BLK, ??eb0A_SECTA_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 04AH
$DGS	END_FUN, ??ef_SECTA_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 04CH
$DGS	GLV_SYM, _SECTB_Glyph_Map,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0101H,	01H,	00H
$DGS	BEG_FUN, ??bf_SECTB_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 013AH,		06H,	0B7H
$DGS	FUN_ARG, _glyph,	04H,	0FFFFH,	0500CH,	09H,	00H,	00H
$DGS	FUN_ARG, _digit,	0CH,	0FFFFH,	0500DH,	09H,	00H,	00H
$DGS	AUT_VAR, _PinPtr1,	02H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	AUT_VAR, _PinPtr2,	00H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	BEG_BLK, ??bb00_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 08H,		00H,	0B9H
$DGS	BEG_BLK, ??bb01_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0BH,		00H,	0BDH
$DGS	END_BLK, ??eb01_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0EH
$DGS	BEG_BLK, ??bb02_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 013H,		00H,	0C1H
$DGS	END_BLK, ??eb02_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 016H
$DGS	BEG_BLK, ??bb03_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 01BH,		00H,	0C5H
$DGS	END_BLK, ??eb03_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01EH
$DGS	BEG_BLK, ??bb04_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 023H,		00H,	0C9H
$DGS	END_BLK, ??eb04_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 026H
$DGS	BEG_BLK, ??bb05_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02BH,		00H,	0CDH
$DGS	END_BLK, ??eb05_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 02EH
$DGS	BEG_BLK, ??bb06_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 033H,		00H,	0D1H
$DGS	END_BLK, ??eb06_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 036H
$DGS	BEG_BLK, ??bb07_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 03BH,		00H,	0D3H
$DGS	BEG_BLK, ??bb08_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 042H,		00H,	0D7H
$DGS	END_BLK, ??eb08_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 048H
$DGS	BEG_BLK, ??bb09_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04CH,		00H,	0DBH
$DGS	END_BLK, ??eb09_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 052H
$DGS	BEG_BLK, ??bb0A_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 056H,		00H,	0E1H
$DGS	END_BLK, ??eb0A_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 05CH
$DGS	END_BLK, ??eb07_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 05DH
$DGS	BEG_BLK, ??bb0B_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 062H,		00H,	0E7H
$DGS	END_BLK, ??eb0B_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 064H
$DGS	END_BLK, ??eb00_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 066H
$DGS	BEG_BLK, ??bb0C_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 06EH,		00H,	0E9H
$DGS	BEG_BLK, ??bb0D_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 071H,		00H,	0EDH
$DGS	END_BLK, ??eb0D_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 074H
$DGS	BEG_BLK, ??bb0E_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 078H,		00H,	0F1H
$DGS	END_BLK, ??eb0E_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 07BH
$DGS	BEG_BLK, ??bb0F_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 07FH,		00H,	0F7H
$DGS	END_BLK, ??eb0F_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 082H
$DGS	END_BLK, ??eb0C_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 083H
$DGS	BEG_BLK, ??bb10_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 085H,		00H,	0FBH
$DGS	END_BLK, ??eb10_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 089H
$DGS	BEG_BLK, ??bb11_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 08BH,		00H,	00H
$DGS	END_BLK, ??eb11_SECTB_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 08DH
$DGS	END_FUN, ??ef_SECTB_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 08EH
$DGS	GLV_SYM, _SECTC_Glyph_Map,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0135H,	01H,	00H
$DGS	BEG_FUN, ??bf_SECTC_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 01D7H,		0AH,	010FH
$DGS	FUN_ARG, _glyph,	08H,	0FFFFH,	0500CH,	09H,	00H,	00H
$DGS	FUN_ARG, _digit,	010H,	0FFFFH,	0500DH,	09H,	00H,	00H
$DGS	AUT_VAR, _PinPtr1,	06H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	AUT_VAR, _PinPtr2,	04H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	AUT_VAR, _PinPtr3,	02H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	AUT_VAR, _PinPtr4,	00H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	BEG_BLK, ??bb00_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0AH,		00H,	0111H
$DGS	BEG_BLK, ??bb01_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0DH,		00H,	0115H
$DGS	END_BLK, ??eb01_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 012H
$DGS	BEG_BLK, ??bb02_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 017H,		00H,	0119H
$DGS	END_BLK, ??eb02_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01BH
$DGS	BEG_BLK, ??bb03_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 020H,		00H,	011DH
$DGS	END_BLK, ??eb03_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 025H
$DGS	BEG_BLK, ??bb04_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02AH,		00H,	0121H
$DGS	END_BLK, ??eb04_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 02FH
$DGS	BEG_BLK, ??bb05_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 034H,		00H,	0125H
$DGS	END_BLK, ??eb05_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 039H
$DGS	BEG_BLK, ??bb06_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 03EH,		00H,	0129H
$DGS	END_BLK, ??eb06_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 043H
$DGS	BEG_BLK, ??bb07_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 048H,		00H,	012FH
$DGS	END_BLK, ??eb07_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 04AH
$DGS	END_BLK, ??eb00_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 04CH
$DGS	BEG_BLK, ??bb08_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 056H,		00H,	00H
$DGS	END_BLK, ??eb08_SECTC_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 05CH
$DGS	END_FUN, ??ef_SECTC_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 05DH
$DGS	GLV_SYM, _SECTD_Glyph_Map,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0158H,	01H,	00H
$DGS	BEG_FUN, ??bf_SECTD_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 0241H,		02H,	013AH
$DGS	FUN_ARG, _level,	00H,	0FFFFH,	0500CH,	09H,	00H,	00H
$DGS	BEG_BLK, ??bb00_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04H,		00H,	013CH
$DGS	BEG_BLK, ??bb01_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 07H,		00H,	0140H
$DGS	END_BLK, ??eb01_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0AH
$DGS	BEG_BLK, ??bb02_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0FH,		00H,	0144H
$DGS	END_BLK, ??eb02_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 013H
$DGS	BEG_BLK, ??bb03_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 018H,		00H,	0148H
$DGS	END_BLK, ??eb03_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01CH
$DGS	BEG_BLK, ??bb04_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 021H,		00H,	014CH
$DGS	END_BLK, ??eb04_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 025H
$DGS	BEG_BLK, ??bb05_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02AH,		00H,	0150H
$DGS	END_BLK, ??eb05_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 02DH
$DGS	BEG_BLK, ??bb06_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 031H,		00H,	00H
$DGS	END_BLK, ??eb06_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 033H
$DGS	END_BLK, ??eb00_SECTD_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 035H
$DGS	END_FUN, ??ef_SECTD_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 036H
$DGS	GLV_SYM, _SECTE_Glyph_Map,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0187H,	01H,	00H
$DGS	BEG_FUN, ??bf_SECTE_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 0282H,		06H,	0161H
$DGS	FUN_ARG, _level,	04H,	0FFFFH,	0500DH,	09H,	00H,	00H
$DGS	AUT_VAR, _Pin47Ptr,	02H,	0FFFFH,	0500CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	AUT_VAR, _Pin48Ptr,	00H,	0FFFFH,	0500CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	BEG_BLK, ??bb00_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 08H,		00H,	0163H
$DGS	BEG_BLK, ??bb01_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0BH,		00H,	0167H
$DGS	END_BLK, ??eb01_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 011H
$DGS	BEG_BLK, ??bb02_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 016H,		00H,	016BH
$DGS	END_BLK, ??eb02_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01CH
$DGS	BEG_BLK, ??bb03_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 021H,		00H,	016FH
$DGS	END_BLK, ??eb03_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 027H
$DGS	BEG_BLK, ??bb04_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02CH,		00H,	0173H
$DGS	END_BLK, ??eb04_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 032H
$DGS	BEG_BLK, ??bb05_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 037H,		00H,	0177H
$DGS	END_BLK, ??eb05_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 03DH
$DGS	BEG_BLK, ??bb06_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 042H,		00H,	017BH
$DGS	END_BLK, ??eb06_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 048H
$DGS	BEG_BLK, ??bb07_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04DH,		00H,	017FH
$DGS	END_BLK, ??eb07_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 053H
$DGS	BEG_BLK, ??bb08_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 057H,		00H,	00H
$DGS	END_BLK, ??eb08_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 059H
$DGS	END_BLK, ??eb00_SECTE_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 05BH
$DGS	END_FUN, ??ef_SECTE_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 05CH
$DGS	GLV_SYM, _SECTF_Glyph_Map,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	01B6H,	01H,	00H
$DGS	BEG_FUN, ??bf_SECTF_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 02EDH,		02H,	018CH
$DGS	FUN_ARG, _day,		00H,	0FFFFH,	0500CH,	09H,	00H,	00H
$DGS	BEG_BLK, ??bb00_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04H,		00H,	018EH
$DGS	BEG_BLK, ??bb01_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 07H,		00H,	0192H
$DGS	END_BLK, ??eb01_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0DH
$DGS	BEG_BLK, ??bb02_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 012H,		00H,	0196H
$DGS	END_BLK, ??eb02_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 019H
$DGS	BEG_BLK, ??bb03_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 01EH,		00H,	019AH
$DGS	END_BLK, ??eb03_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 025H
$DGS	BEG_BLK, ??bb04_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02AH,		00H,	019EH
$DGS	END_BLK, ??eb04_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 030H
$DGS	BEG_BLK, ??bb05_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 035H,		00H,	01A2H
$DGS	END_BLK, ??eb05_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 03BH
$DGS	BEG_BLK, ??bb06_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 040H,		00H,	01A6H
$DGS	END_BLK, ??eb06_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 047H
$DGS	BEG_BLK, ??bb07_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04CH,		00H,	01AAH
$DGS	END_BLK, ??eb07_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 053H
$DGS	BEG_BLK, ??bb08_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 058H,		00H,	01AEH
$DGS	END_BLK, ??eb08_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 05EH
$DGS	BEG_BLK, ??bb09_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 062H,		00H,	00H
$DGS	END_BLK, ??eb09_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 064H
$DGS	END_BLK, ??eb00_SECTF_Glyph_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 066H
$DGS	END_FUN, ??ef_SECTF_Glyph_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 067H
$DGS	GLV_SYM, _Symbol_Map,	U,	U,	02H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0246H,	01H,	00H
$DGS	BEG_FUN, ??bf_Symbol_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 036BH,		04H,	01BCH
$DGS	FUN_ARG, _input,	02H,	0FFFFH,	0500DH,	09H,	00H,	00H
$DGS	AUT_VAR, _status,	01H,	0FFFFH,	02H,	01H,	00H,	00H
$DGS	BEG_BLK, ??bb00_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 06H,		00H,	01BEH
$DGS	BEG_BLK, ??bb01_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 09H,		00H,	01C2H
$DGS	END_BLK, ??eb01_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0BH
$DGS	BEG_BLK, ??bb02_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0FH,		00H,	01C6H
$DGS	END_BLK, ??eb02_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 011H
$DGS	BEG_BLK, ??bb03_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 016H,		00H,	01CAH
$DGS	END_BLK, ??eb03_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 018H
$DGS	BEG_BLK, ??bb04_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 01CH,		00H,	01CEH
$DGS	END_BLK, ??eb04_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01EH
$DGS	BEG_BLK, ??bb05_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 023H,		00H,	01D2H
$DGS	END_BLK, ??eb05_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 025H
$DGS	BEG_BLK, ??bb06_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 029H,		00H,	01D6H
$DGS	END_BLK, ??eb06_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 02BH
$DGS	BEG_BLK, ??bb07_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 030H,		00H,	01DAH
$DGS	END_BLK, ??eb07_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 032H
$DGS	BEG_BLK, ??bb08_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 036H,		00H,	01DEH
$DGS	END_BLK, ??eb08_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 038H
$DGS	BEG_BLK, ??bb09_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 03DH,		00H,	01E2H
$DGS	END_BLK, ??eb09_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 03FH
$DGS	BEG_BLK, ??bb0A_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 043H,		00H,	01E6H
$DGS	END_BLK, ??eb0A_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 045H
$DGS	BEG_BLK, ??bb0B_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04AH,		00H,	01EAH
$DGS	END_BLK, ??eb0B_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 04CH
$DGS	BEG_BLK, ??bb0C_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 050H,		00H,	01EEH
$DGS	END_BLK, ??eb0C_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 052H
$DGS	BEG_BLK, ??bb0D_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 057H,		00H,	01F2H
$DGS	END_BLK, ??eb0D_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 059H
$DGS	BEG_BLK, ??bb0E_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 05DH,		00H,	01F6H
$DGS	END_BLK, ??eb0E_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 05FH
$DGS	BEG_BLK, ??bb0F_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 068H,		00H,	01FAH
$DGS	END_BLK, ??eb0F_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 06AH
$DGS	BEG_BLK, ??bb10_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 06FH,		00H,	01FEH
$DGS	END_BLK, ??eb10_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 071H
$DGS	BEG_BLK, ??bb11_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 075H,		00H,	0202H
$DGS	END_BLK, ??eb11_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 077H
$DGS	BEG_BLK, ??bb12_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 07CH,		00H,	0206H
$DGS	END_BLK, ??eb12_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 07EH
$DGS	BEG_BLK, ??bb13_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 082H,		00H,	020AH
$DGS	END_BLK, ??eb13_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 084H
$DGS	BEG_BLK, ??bb14_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 08DH,		00H,	020EH
$DGS	END_BLK, ??eb14_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 08FH
$DGS	BEG_BLK, ??bb15_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 094H,		00H,	0212H
$DGS	END_BLK, ??eb15_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 096H
$DGS	BEG_BLK, ??bb16_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 09AH,		00H,	0216H
$DGS	END_BLK, ??eb16_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 09CH
$DGS	BEG_BLK, ??bb17_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0A1H,		00H,	021AH
$DGS	END_BLK, ??eb17_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0A3H
$DGS	BEG_BLK, ??bb18_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0A7H,		00H,	021EH
$DGS	END_BLK, ??eb18_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0A9H
$DGS	BEG_BLK, ??bb19_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0AEH,		00H,	0222H
$DGS	END_BLK, ??eb19_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0B0H
$DGS	BEG_BLK, ??bb1A_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0B4H,		00H,	0226H
$DGS	END_BLK, ??eb1A_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0B6H
$DGS	BEG_BLK, ??bb1B_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0BBH,		00H,	022AH
$DGS	END_BLK, ??eb1B_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0BDH
$DGS	BEG_BLK, ??bb1C_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0C1H,		00H,	022EH
$DGS	END_BLK, ??eb1C_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0C3H
$DGS	BEG_BLK, ??bb1D_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0C8H,		00H,	0232H
$DGS	END_BLK, ??eb1D_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0CAH
$DGS	BEG_BLK, ??bb1E_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0CEH,		00H,	0236H
$DGS	END_BLK, ??eb1E_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0D0H
$DGS	BEG_BLK, ??bb1F_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0D5H,		00H,	023AH
$DGS	END_BLK, ??eb1F_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0D7H
$DGS	BEG_BLK, ??bb20_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0DBH,		00H,	023EH
$DGS	END_BLK, ??eb20_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0DDH
$DGS	BEG_BLK, ??bb21_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0E1H,		00H,	00H
$DGS	END_BLK, ??eb21_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0E4H
$DGS	END_BLK, ??eb00_Symbol_Map,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 0E6H
$DGS	END_FUN, ??ef_Symbol_Map,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 0E8H
$DGS	GLV_SYM, _Clear_Display,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0253H,	01H,	00H
$DGS	BEG_FUN, ??bf_Clear_Display,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 045FH,		04H,	024DH
$DGS	AUT_VAR, _i,		03H,	0FFFFH,	0CH,	01H,	00H,	00H
$DGS	AUT_VAR, _RegPtr,	00H,	0FFFFH,	0CH,	01H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	BEG_BLK, ??bb00_Clear_Display,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 0AH,		00H,	00H
$DGS	END_BLK, ??eb00_Clear_Display,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 010H
$DGS	END_FUN, ??ef_Clear_Display,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 011H
$DGS	GLV_SYM, _Init_Maps,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	0259H,	01H,	00H
$DGS	BEG_FUN, ??bf_Init_Maps,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 047BH,		00H,	0259H
$DGS	END_FUN, ??ef_Init_Maps,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 061H
$DGS	GLV_SYM, _Display_Panel_String,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	02B6H,	01H,	00H
$DGS	BEG_FUN, ??bf_Display_Panel_String,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 04E9H,		0AH,	0264H
$DGS	FUN_ARG, _position,	08H,	0FFFFH,	0500CH,	09H,	00H,	00H
$DGS	FUN_ARG, _string,	010H,	0FFFFH,	05002H,	09H,	01H,	01H
$DGS	AUX_STR, 00H,		00H,	02H,	00H,	00H,	00H,	00H,	01H
$DGS	AUT_VAR, _output_buf,	07H,	0FFFFH,	0CH,	01H,	00H,	00H
$DGS	AUT_VAR, _flag,		04H,	0FFFFH,	03H,	01H,	00H,	00H
$DGS	AUT_VAR, _i,		02H,	0FFFFH,	0DH,	01H,	00H,	00H
$DGS	AUT_VAR, _symbsel,	00H,	0FFFFH,	0DH,	01H,	00H,	00H
$DGS	BEG_BLK, ??bb00_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 010H,		00H,	0266H
$DGS	BEG_BLK, ??bb01_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 013H,		00H,	0268H
$DGS	BEG_BLK, ??bb02_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 016H,		00H,	026AH
$DGS	BEG_BLK, ??bb03_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 01CH,		00H,	0272H
$DGS	END_BLK, ??eb03_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01EH
$DGS	END_BLK, ??eb02_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 01FH
$DGS	END_BLK, ??eb01_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 020H
$DGS	BEG_BLK, ??bb04_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 027H,		00H,	0274H
$DGS	BEG_BLK, ??bb05_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02AH,		00H,	0276H
$DGS	BEG_BLK, ??bb06_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 02FH,		00H,	027EH
$DGS	END_BLK, ??eb06_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 032H
$DGS	END_BLK, ??eb05_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 033H
$DGS	END_BLK, ??eb04_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 034H
$DGS	BEG_BLK, ??bb07_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 039H,		00H,	0280H
$DGS	BEG_BLK, ??bb08_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 03FH,		00H,	0282H
$DGS	BEG_BLK, ??bb09_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 045H,		00H,	0284H
$DGS	BEG_BLK, ??bb0A_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 047H,		00H,	0288H
$DGS	END_BLK, ??eb0A_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 04AH
$DGS	BEG_BLK, ??bb0B_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 04CH,		00H,	0292H
$DGS	END_BLK, ??eb0B_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 04FH
$DGS	END_BLK, ??eb09_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 050H
$DGS	END_BLK, ??eb08_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 051H
$DGS	END_BLK, ??eb07_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 052H
$DGS	BEG_BLK, ??bb0C_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 059H,		00H,	0294H
$DGS	BEG_BLK, ??bb0D_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 05BH,		00H,	0296H
$DGS	BEG_BLK, ??bb0E_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 061H,		00H,	029CH
$DGS	END_BLK, ??eb0E_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 064H
$DGS	END_BLK, ??eb0D_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 065H
$DGS	BEG_BLK, ??bb0F_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 067H,		00H,	029EH
$DGS	BEG_BLK, ??bb10_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 069H,		00H,	02A2H
$DGS	END_BLK, ??eb10_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 06CH
$DGS	BEG_BLK, ??bb11_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 06EH,		00H,	02A8H
$DGS	END_BLK, ??eb11_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 071H
$DGS	END_BLK, ??eb0F_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 072H
$DGS	BEG_BLK, ??bb12_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 074H,		00H,	02AEH
$DGS	END_BLK, ??eb12_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 07CH
$DGS	END_BLK, ??eb0C_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 07DH
$DGS	BEG_BLK, ??bb13_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 084H,		00H,	00H
$DGS	END_BLK, ??eb13_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 086H
$DGS	END_BLK, ??eb00_Display_Panel_String,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 088H
$DGS	END_FUN, ??ef_Display_Panel_String,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 089H
$DGS	GLV_SYM, _Display_Panel_Delay,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	02C2H,	01H,	00H
$DGS	BEG_FUN, ??bf_Display_Panel_Delay,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 057DH,		08H,	02BCH
$DGS	FUN_ARG, _units,	04H,	0FFFFH,	0500FH,	09H,	00H,	00H
$DGS	AUT_VAR, _counter,	00H,	0FFFFH,	0FH,	01H,	00H,	00H
$DGS	BEG_BLK, ??bb00_Display_Panel_Delay,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_BEG, 07H,		00H,	00H
$DGS	END_BLK, ??eb00_Display_Panel_Delay,	U,	U,	00H,	064H,	01H,	00H
$DGS	AUX_END, 09H
$DGS	END_FUN, ??ef_Display_Panel_Delay,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 0AH
$DGS	GLV_SYM, _LCD_ON,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	02C8H,	01H,	00H
$DGS	BEG_FUN, ??bf_LCD_ON,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 0592H,		00H,	02C8H
$DGS	END_FUN, ??ef_LCD_ON,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 01FH
$DGS	GLV_SYM, _LCD_DISPLAY_ON,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	02CEH,	01H,	00H
$DGS	BEG_FUN, ??bf_LCD_DISPLAY_ON,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 05BCH,		00H,	02CEH
$DGS	END_FUN, ??ef_LCD_DISPLAY_ON,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 029H
$DGS	GLV_SYM, _LCD_DISPLAY_OFF,	U,	U,	01H,	026H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	02D4H,	01H,	00H
$DGS	BEG_FUN, ??bf_LCD_DISPLAY_OFF,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_BEG, 05F0H,		00H,	02D4H
$DGS	END_FUN, ??ef_LCD_DISPLAY_OFF,	U,	U,	00H,	065H,	01H,	00H
$DGS	AUX_END, 029H
$DGS	STA_SYM, L0038,		?L0038,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0057,		?L0057,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0081,		?L0081,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0094,		?L0094,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0107,		?L0107,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0121,		?L0121,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0178,		?L0178,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0217,		?L0217,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0218,		?L0218,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0219,		?L0219,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0220,		?L0220,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0221,		?L0221,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0222,		?L0222,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0223,		?L0223,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0224,		?L0224,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0225,		?L0225,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0226,		?L0226,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0227,		?L0227,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0228,		?L0228,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0229,		?L0229,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0230,		?L0230,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0231,		?L0231,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0232,		?L0232,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0233,		?L0233,	U,	05002H,	03H,	00H,	03H
$DGS	STA_SYM, L0234,		?L0234,	U,	05002H,	03H,	00H,	03H
$DGS	GLV_SYM, _SECTA_map,	U,	U,	09H,	026H,	01H,	03H
$DGS	AUX_STR, 01FH,		00H,	050H,	014H,	00H,	00H,	00H,	00H
$DGS	GLV_SYM, _SECTB_map,	U,	U,	09H,	026H,	01H,	03H
$DGS	AUX_STR, 01FH,		00H,	050H,	014H,	00H,	00H,	00H,	00H
$DGS	GLV_SYM, _SECTC_map,	U,	U,	09H,	026H,	01H,	03H
$DGS	AUX_STR, 01FH,		00H,	0A4H,	029H,	00H,	00H,	00H,	00H
$DGS	GLV_SYM, _R_LCD_Start,	U,	U,	01H,	02H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	00H,	01H,	00H
$DGS	GLV_SYM, _R_LCD_Voltage_On,	U,	U,	01H,	02H,	01H,	02H
$DGS	AUX_FUN, 00H,		U,	U,	00H,	01H,	00H
$DGS	GLV_SYM, _@RTARG0,	U,	U,	00H,	02H,	00H,	00H
$DGS	GLV_SYM, _@RTARG2,	U,	U,	00H,	02H,	00H,	00H
$DGS	GLV_SYM, _@RTARG4,	U,	U,	00H,	02H,	00H,	00H
$DGS	GLV_SYM, @@lumul,	U,	U,	00H,	02H,	00H,	00H

	EXTRN	_R_LCD_Start
	EXTRN	_R_LCD_Voltage_On
	EXTRN	_@RTARG0
	EXTRN	_@RTARG2
	EXTRN	_@RTARG4
	EXTRN	@@lumul
	PUBLIC	_SECTA_map
	PUBLIC	_SECTB_map
	PUBLIC	_SECTC_map
	PUBLIC	_Init_Display_Panel
	PUBLIC	_Validate_Input
	PUBLIC	_SECTA_Glyph_Map
	PUBLIC	_SECTB_Glyph_Map
	PUBLIC	_SECTC_Glyph_Map
	PUBLIC	_SECTD_Glyph_Map
	PUBLIC	_SECTE_Glyph_Map
	PUBLIC	_SECTF_Glyph_Map
	PUBLIC	_Symbol_Map
	PUBLIC	_Clear_Display
	PUBLIC	_Init_Maps
	PUBLIC	_Display_Panel_String
	PUBLIC	_Display_Panel_Delay
	PUBLIC	_LCD_ON
	PUBLIC	_LCD_DISPLAY_ON
	PUBLIC	_LCD_DISPLAY_OFF

@@BITS	BSEG

@@CNST	CSEG	MIRRORP
?L0038:
	DW	loww (?L0032)
	DW	loww (?L0033)
	DW	loww (?L0034)
	DW	loww (?L0035)
	DB	highw (?L0032)
	DB	highw (?L0033)
	DB	highw (?L0034)
	DB	highw (?L0035)
?L0057:
	DW	loww (?L0048)
	DW	loww (?L0049)
	DW	loww (?L0050)
	DW	loww (?L0051)
	DW	loww (?L0052)
	DW	loww (?L0053)
	DW	loww (?L0054)
	DB	highw (?L0048)
	DB	highw (?L0049)
	DB	highw (?L0050)
	DB	highw (?L0051)
	DB	highw (?L0052)
	DB	highw (?L0053)
	DB	highw (?L0054)
	DB	(1)
?L0081:
	DW	loww (?L0073)
	DW	loww (?L0074)
	DW	loww (?L0075)
	DW	loww (?L0076)
	DW	loww (?L0077)
	DW	loww (?L0078)
	DB	highw (?L0073)
	DB	highw (?L0074)
	DB	highw (?L0075)
	DB	highw (?L0076)
	DB	highw (?L0077)
	DB	highw (?L0078)
?L0094:
	DW	loww (?L0087)
	DW	loww (?L0088)
	DW	loww (?L0089)
	DW	loww (?L0090)
	DW	loww (?L0091)
	DB	highw (?L0087)
	DB	highw (?L0088)
	DB	highw (?L0089)
	DB	highw (?L0090)
	DB	highw (?L0091)
	DB	(1)
?L0107:
	DW	loww (?L0098)
	DW	loww (?L0099)
	DW	loww (?L0100)
	DW	loww (?L0101)
	DW	loww (?L0102)
	DW	loww (?L0103)
	DW	loww (?L0104)
	DB	highw (?L0098)
	DB	highw (?L0099)
	DB	highw (?L0100)
	DB	highw (?L0101)
	DB	highw (?L0102)
	DB	highw (?L0103)
	DB	highw (?L0104)
	DB	(1)
?L0121:
	DW	loww (?L0111)
	DW	loww (?L0112)
	DW	loww (?L0113)
	DW	loww (?L0114)
	DW	loww (?L0115)
	DW	loww (?L0116)
	DW	loww (?L0117)
	DW	loww (?L0118)
	DB	highw (?L0111)
	DB	highw (?L0112)
	DB	highw (?L0113)
	DB	highw (?L0114)
	DB	highw (?L0115)
	DB	highw (?L0116)
	DB	highw (?L0117)
	DB	highw (?L0118)
?L0178:
	DW	loww (?L0172)
	DW	loww (?L0174)
	DW	loww (?L0173)
	DW	loww (?L0175)
	DB	highw (?L0172)
	DB	highw (?L0174)
	DB	highw (?L0173)
	DB	highw (?L0175)
?L0217:	DB	'888:88'
	DB	00H
?L0218:	DB	'888'
	DB	00H
?L0219:	DB	'88888'
	DB	00H
?L0220:	DB	'-1'
	DB	00H
?L0221:	DB	'11'
	DB	00H
?L0222:	DB	'21'
	DB	00H
?L0223:	DB	'31'
	DB	00H
?L0224:	DB	'41'
	DB	00H
?L0225:	DB	'51'
	DB	00H
?L0226:	DB	'61'
	DB	00H
?L0227:	DB	'71'
	DB	00H
?L0228:	DB	'81'
	DB	00H
?L0229:	DB	'91'
	DB	00H
?L0230:	DB	'a1'
	DB	00H
?L0231:	DB	'b1'
	DB	00H
?L0232:	DB	'c1'
	DB	00H
?L0233:	DB	'd1'
	DB	00H
?L0234:	DB	'e1'
	DB	00H

@@R_INIT	CSEG	UNIT64KP

@@INIT	DSEG	BASEP

@@DATA	DSEG	BASEP
_SECTA_map:	DS	(80)
_SECTB_map:	DS	(80)
_SECTC_map:	DS	(164)

@@R_INIS	CSEG	UNIT64KP

@@INIS	DSEG	SADDRP

@@DATS	DSEG	SADDRP

@@CNSTL	CSEG	PAGE64KP

@@RLINIT	CSEG	UNIT64KP

@@INITL	DSEG	UNIT64KP

@@DATAL	DSEG	UNIT64KP

@@CALT	CSEG	CALLT0

; line     1 : /***************************************************************
;              ********************************************************
; line     2 : * DISCLAIMER
; line     3 : * This software is supplied by Renesas Electronics Corporation a
;              nd is only 
; line     4 : * intended for use with Renesas products. No other uses are auth
;              orized. This 
; line     5 : * software is owned by Renesas Electronics Corporation and is pr
;              otected under 
; line     6 : * all applicable laws, including copyright laws.
; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
;              IES REGARDING 
; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
;              G BUT NOT 
; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
;              ULAR PURPOSE 
; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
;              AIMED.
; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
;               RENESAS 
; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
;              ALL BE LIABLE 
; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
;               DAMAGES FOR 
; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
;              FILIATES HAVE 
; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
; line    16 : * Renesas reserves the right, without notice, to make changes to
;               this software 
; line    17 : * and to discontinue the availability of this software.  By usin
;              g this software, 
; line    18 : * you agree to the additional terms and conditions found by acce
;              ssing the 
; line    19 : * following link:
; line    20 : * http://www.renesas.com/disclaimer
; line    21 : *
; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
;               reserved.
; line    23 : ****************************************************************
;              *******************************************************/
; line    24 : 
; line    25 : /***************************************************************
;              ********************************************************
; line    26 : * File Name    : r_cg_macrodriver.h
; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
;              ]
; line    28 : * Device(s)    : R5F10WMG
; line    29 : * Tool-Chain   : CA78K0R
; line    30 : * Description  : This file implements general head file.
; line    31 : * Creation Date: 05-Jun-21
; line    32 : ****************************************************************
;              *******************************************************/
; line    33 : #ifndef MODULEID_H
; line    34 : #define MODULEID_H
; line    35 : /***************************************************************
;              ********************************************************
; line    36 : Includes
; line    37 : ****************************************************************
;              *******************************************************/
; line    38 : #pragma sfr
; line    39 : #pragma DI
; line    40 : #pragma EI
; line    41 : #pragma NOP
; line    42 : #pragma HALT
; line    43 : #pragma STOP
; line    44 : 
; line    45 : /***************************************************************
;              ********************************************************
; line    46 : Macro definitions (Register bit)
; line    47 : ****************************************************************
;              *******************************************************/
; line    48 : 
; line    49 : /***************************************************************
;              ********************************************************
; line    50 : Macro definitions
; line    51 : ****************************************************************
;              *******************************************************/
; line    52 : #ifndef __TYPEDEF__
; line    53 : /* Status list definition */
; line    54 : #define MD_STATUSBASE        (0x00U)
; line    55 : #define MD_OK                (MD_STATUSBASE + 0x00U) /* register
;               setting OK */
; line    56 : #define MD_SPT               (MD_STATUSBASE + 0x01U) /* IIC stop
;               */
; line    57 : #define MD_NACK              (MD_STATUSBASE + 0x02U) /* IIC no A
;              CK */
; line    58 : #define MD_BUSY1             (MD_STATUSBASE + 0x03U) /* busy 1 *
;              /
; line    59 : #define MD_BUSY2             (MD_STATUSBASE + 0x04U) /* busy 2 *
;              /
; line    60 : 
; line    61 : /* Error list definition */
; line    62 : #define MD_ERRORBASE         (0x80U)
; line    63 : #define MD_ERROR             (MD_ERRORBASE + 0x00U)  /* error */
; line    64 : #define MD_ARGERROR          (MD_ERRORBASE + 0x01U)  /* error ag
;              rument input error */
; line    65 : #define MD_ERROR1            (MD_ERRORBASE + 0x02U)  /* error 1 
;              */
; line    66 : #define MD_ERROR2            (MD_ERRORBASE + 0x03U)  /* error 2 
;              */
; line    67 : #define MD_ERROR3            (MD_ERRORBASE + 0x04U)  /* error 3 
;              */
; line    68 : #define MD_ERROR4            (MD_ERRORBASE + 0x05U)  /* error 4 
;              */
; line    69 : #define MD_ERROR5            (MD_ERRORBASE + 0x06U)  /* error 5 
;              */
; line    70 : #endif
; line    71 : 
; line    72 : /***************************************************************
;              ********************************************************
; line    73 : Typedef definitions
; line    74 : ****************************************************************
;              *******************************************************/
; line    75 : #ifndef __TYPEDEF__
; line    76 : typedef signed char         int8_t;
; line    77 : typedef unsigned char       uint8_t;
; line    78 : typedef signed short        int16_t;
; line    79 : typedef unsigned short      uint16_t;
; line    80 : typedef signed long         int32_t;
; line    81 : typedef unsigned long       uint32_t;
; line    82 : typedef unsigned short      MD_STATUS;
; line     1 : /***************************************************************
;              ********************************************************
; line     2 : * DISCLAIMER
; line     3 : * This software is supplied by Renesas Electronics Corporation a
;              nd is only 
; line     4 : * intended for use with Renesas products. No other uses are auth
;              orized. This 
; line     5 : * software is owned by Renesas Electronics Corporation and is pr
;              otected under 
; line     6 : * all applicable laws, including copyright laws.
; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
;              IES REGARDING 
; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
;              G BUT NOT 
; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
;              ULAR PURPOSE 
; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
;              AIMED.
; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
;               RENESAS 
; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
;              ALL BE LIABLE 
; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
;               DAMAGES FOR 
; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
;              FILIATES HAVE 
; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
; line    16 : * Renesas reserves the right, without notice, to make changes to
;               this software 
; line    17 : * and to discontinue the availability of this software.  By usin
;              g this software, 
; line    18 : * you agree to the additional terms and conditions found by acce
;              ssing the 
; line    19 : * following link:
; line    20 : * http://www.renesas.com/disclaimer
; line    21 : *
; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
;               reserved.
; line    23 : ****************************************************************
;              *******************************************************/
; line    24 : 
; line    25 : /***************************************************************
;              ********************************************************
; line    26 : * File Name    : r_cg_lcd.h
; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
;              ]
; line    28 : * Device(s)    : R5F10WMG
; line    29 : * Tool-Chain   : CA78K0R
; line    30 : * Description  : This file implements device driver for LCD modu
;              le.
; line    31 : * Creation Date: 12/09/2013
; line    32 : ****************************************************************
;              *******************************************************/
; line    33 : #ifndef LCD_H
; line    34 : #define LCD_H
; line    35 : 
; line    36 : /***************************************************************
;              ********************************************************
; line    37 : Macro definitions (Register bit)
; line    38 : ****************************************************************
;              *******************************************************/
; line    39 : /*
; line    40 :     Peripheral enable register 0 (PER0)
; line    41 : */
; line    42 : /* Control of LCD input clock (RTCEN) */
; line    43 : #define _00_LCD_CLOCK_STOP                (0x00U) /* stops suppl
;              y of input clock */
; line    44 : #define _80_LCD_CLOCK_SUPPLY              (0x80U) /* supplies in
;              put clock */
; line    45 : 
; line    46 : /*
; line    47 :     LCD mode register 0 (LCDM0)
; line    48 : */
; line    49 : /* LCD drive voltage generator selection (MDSET1, MDSET0) */
; line    50 : #define _00_LCD_VOLTAGE_MODE_EXTERNAL     (0x00U) /* external re
;              sistance division method */
; line    51 : #define _40_LCD_VOLTAGE_MODE_INTERNAL     (0x40U) /* internal vo
;              ltage boosting method */
; line    52 : #define _80_LCD_VOLTAGE_MODE_CAPACITOR    (0x80U) /* capacitor s
;              plit method */
; line    53 : #define _C0_LCD_VOLTAGE_MODE_INITIALVALUE (0xC0U)
; line    54 : /* LCD display waveform selection (LWAVE) */
; line    55 : #define _00_LCD_DISPLAY_WAVEFORM_A        (0x00U) /* A waveform 
;              */
; line    56 : #define _20_LCD_DISPLAY_WAVEFORM_B        (0x20U) /* B waveform 
;              */
; line    57 : /* LCD time slices and bias mode (LDTY2 - LDTY0, LBAS1, LBAS0) *
;              /
; line    58 : #define _16_LCD_DISPLAY_MODE0             (0x16U) /* 8 time slic
;              es, 1/4 bias mode */
; line    59 : #define _0D_LCD_DISPLAY_MODE1             (0x0DU) /* 4 time slic
;              es, 1/3 bias mode */
; line    60 : #define _09_LCD_DISPLAY_MODE2             (0x09U) /* 3 time slic
;              es, 1/3 bias mode */
; line    61 : #define _08_LCD_DISPLAY_MODE3             (0x08U) /* 3 time slic
;              es, 1/2 bias mode */
; line    62 : #define _04_LCD_DISPLAY_MODE4             (0x04U) /* 2 time slic
;              es, 1/2 bias mode */
; line    63 : #define _00_LCD_DISPLAY_STATIC            (0x00U) /* A waveform 
;              external resistance division method: static */
; line    64 : 
; line    65 : /*
; line    66 :     LCD mode register 1 (LCDM1)
; line    67 : */
; line    68 : /* LCD display enable/disable (LCDON, SCOC) */
; line    69 : #define _00_LCD_DISPLAY_GROUNG            (0x00U) /* output grou
;              nd level to segment/common pin */
; line    70 : #define _40_LCD_DISPLAY_OFF               (0x40U) /* display off
;               (all segment outputs are deselected) */
; line    71 : #define _C0_LCD_DISPLAY_ON                (0xC0U) /* display on 
;              */
; line    72 : /* Voltage boost circuit and capacitor split circuit operation e
;              nable/disable (VLCON) */
; line    73 : #define _00_LCD_BOOST_CAPACITOR_DISABLE   (0x00U) /* stops volta
;              ge boost and capacitor split operation */
; line    74 : #define _20_LCD_BOOST_CAPACITOR_ENABLE    (0x20U) /* enables vol
;              tage boost and capacitor split operation */
; line    75 : /* Display data area control (BLON, LCDSEL) */
; line    76 : #define _00_LCD_DISPLAY_PATTERN_A         (0x00U) /* displaying 
;              an A-pattern area data */
; line    77 : #define _08_LCD_DISPLAY_PATTERN_B         (0x08U) /* displaying 
;              a B-pattern area data */
; line    78 : #define _10_LCD_DISPLAY_PATTERN_AB        (0x10U) /* blinking di
;              splay alternately A-pattern and B-pattern area data */
; line    79 : /* Control of default value of voltage boosting pin (LCDVLM) */
; line    80 : #define _00_LCD_VOLTAGE_HIGH              (0x00U) /* VDD voltage
;               is larger than 3.8V */
; line    81 : #define _01_LCD_VOLTAGE_LOW               (0x01U) /* VDD voltage
;               is less than 3.8V */
; line    82 : 
; line    83 : /*
; line    84 :     LCD clock control register (LCDC0)
; line    85 : */
; line    86 : /* LCD clock (LCDCL) selection (LCDC05 - LCDC00) */
; line    87 : #define _01_LCD_CLOCK_FSUB_FIL_2           (0x01U) /* fSUB/2^2 o
;              r fIL/2^2*/
; line    88 : #define _02_LCD_CLOCK_FSUB_FIL_3           (0x02U) /* fSUB/2^3 o
;              r fIL/2^3 */
; line    89 : #define _03_LCD_CLOCK_FSUB_FIL_4           (0x03U) /* fSUB/2^4 o
;              r fIL/2^4 */
; line    90 : #define _04_LCD_CLOCK_FSUB_FIL_5           (0x04U) /* fSUB/2^5 o
;              r fIL/2^5 */
; line    91 : #define _05_LCD_CLOCK_FSUB_FIL_6           (0x05U) /* fSUB/2^6 o
;              r fIL/2^6 */
; line    92 : #define _06_LCD_CLOCK_FSUB_FIL_7           (0x06U) /* fSUB/2^7 o
;              r fIL/2^7 */
; line    93 : #define _07_LCD_CLOCK_FSUB_FIL_8           (0x07U) /* fSUB/2^8 o
;              r fIL/2^8 */
; line    94 : #define _08_LCD_CLOCK_FSUB_9               (0x08U) /* fSUB/2^9 *
;              /
; line    95 : #define _09_LCD_CLOCK_FSUB_10              (0x09U) /* fSUB/2^10 
;              */
; line    96 : /* LCD clock (LCDCL) selection (LCDC05 - LCDC00) */
; line    97 : #define _11_LCD_CLOCK_FMAIN_8              (0x11U) /* fMAIN/2^8 
;              */
; line    98 : #define _12_LCD_CLOCK_FMAIN_9              (0x12U) /* fMAIN/2^9 
;              */
; line    99 : #define _13_LCD_CLOCK_FMAIN_10             (0x13U) /* fMAIN/2^10
;               */
; line   100 : #define _14_LCD_CLOCK_FMAIN_11             (0x14U) /* fMAIN/2^11
;               */
; line   101 : #define _15_LCD_CLOCK_FMAIN_12             (0x15U) /* fMAIN/2^12
;               */
; line   102 : #define _16_LCD_CLOCK_FMAIN_13             (0x16U) /* fMAIN/2^13
;               */
; line   103 : #define _17_LCD_CLOCK_FMAIN_14             (0x17U) /* fMAIN/2^14
;               */
; line   104 : #define _18_LCD_CLOCK_FMAIN_15             (0x18U) /* fMAIN/2^15
;               */
; line   105 : #define _19_LCD_CLOCK_FMAIN_16             (0x19U) /* fMAIN/2^16
;               */
; line   106 : #define _1A_LCD_CLOCK_FMAIN_17             (0x1AU) /* fMAIN/2^17
;               */
; line   107 : #define _1B_LCD_CLOCK_FMAIN_18             (0x1BU) /* fMAIN/2^18
;               */
; line   108 : #define _2B_LCD_CLOCK_FMAIN_19             (0x2BU) /* fMAIN/2^19
;               */
; line   109 : 
; line   110 : /*
; line   111 :     LCD memory liquid crystal control register (MLCD)
; line   112 : */
; line   113 : /* LCD display waveform selection (MLCDEN) */
; line   114 : #define _00_LCD_LED_WAVEFORM_UNUSED       (0x00U) /* memory liqu
;              id crystal waveform unused */
; line   115 : #define _80_LCD_LED_WAVEFORM_USED         (0x80U) /* memory liqu
;              id crystal waveform used */
; line   116 : /* SEG/COMEXP combination terminal output selection (COMEXP) */
; line   117 : #define _00_LCD_SEGMENT_OUTPUT            (0x00U) /* segment wav
;              eform output */
; line   118 : #define _40_LCD_COMEXP_OUTPUT             (0x40U) /* COMEXP wave
;              form output */
; line   119 : /* Option clock (OPTCKE) */
; line   120 : #define _00_LCD_OPTION_CLOCK_UNUSED       (0x00U) /* option cloc
;              k disabled */
; line   121 : #define _10_LCD_OPTION_CLOCK_USED         (0x10U) /* option cloc
;              k enabled */
; line   122 : /* Division ratio of LCD clock (LCDCL) selection (OPTCK2 - OPTCK
;              0) */
; line   123 : #define _00_LCD_OPTION_CLOCK_2            (0x00U) /* 2 dividing 
;              */
; line   124 : #define _01_LCD_OPTION_CLOCK_3            (0x01U) /* 3 dividing 
;              */
; line   125 : #define _02_LCD_OPTION_CLOCK_4            (0x02U) /* 4 dividing 
;              */
; line   126 : #define _03_LCD_OPTION_CLOCK_5            (0x03U) /* 5 dividing 
;              */
; line   127 : #define _04_LCD_OPTION_CLOCK_6            (0x04U) /* 6 dividing 
;              */
; line   128 : #define _05_LCD_OPTION_CLOCK_7            (0x05U) /* 7 dividing 
;              */
; line   129 : #define _06_LCD_OPTION_CLOCK_8            (0x06U) /* 8 dividing 
;              */
; line   130 : #define _07_LCD_OPTION_CLOCK_9            (0x07U) /* 9 dividing 
;              */
; line   131 : 
; line   132 : /*
; line   133 :     LCD boost level control register (VLCD)
; line   134 : */
; line   135 : /* Reference voltage selection (contrast adjustment) (VLCD4 - VL
;              CD0) */
; line   136 : #define _04_LCD_BOOST_VOLTAGE_100V        (0x04U) /* 1.00 V (1/3
;               bias: 3.00 V; 1/4 bias: 4.00 V) */
; line   137 : #define _05_LCD_BOOST_VOLTAGE_105V        (0x05U) /* 1.05 V (1/3
;               bias: 3.15 V; 1/4 bias: 4.20 V) */
; line   138 : #define _06_LCD_BOOST_VOLTAGE_110V        (0x06U) /* 1.10 V (1/3
;               bias: 3.30 V; 1/4 bias: 4.40 V) */
; line   139 : #define _07_LCD_BOOST_VOLTAGE_115V        (0x07U) /* 1.15 V (1/3
;               bias: 3.45 V; 1/4 bias: 4.60 V) */
; line   140 : #define _08_LCD_BOOST_VOLTAGE_120V        (0x08U) /* 1.20 V (1/3
;               bias: 3.60 V; 1/4 bias: 4.80 V) */
; line   141 : #define _09_LCD_BOOST_VOLTAGE_125V        (0x09U) /* 1.25 V (1/3
;               bias: 3.75 V; 1/4 bias: 5.00 V) */
; line   142 : #define _0A_LCD_BOOST_VOLTAGE_130V        (0x0AU) /* 1.30 V (1/3
;               bias: 3.90 V; 1/4 bias: 5.20 V) */
; line   143 : #define _0B_LCD_BOOST_VOLTAGE_135V        (0x0BU) /* 1.35 V (1/3
;               bias: 4.05 V; 1/4 bias: setting prohibited) */
; line   144 : #define _0C_LCD_BOOST_VOLTAGE_140V        (0x0CU) /* 1.40 V (1/3
;               bias: 4.20 V; 1/4 bias: setting prohibited) */
; line   145 : #define _0D_LCD_BOOST_VOLTAGE_145V        (0x0DU) /* 1.45 V (1/3
;               bias: 4.35 V; 1/4 bias: setting prohibited) */
; line   146 : #define _0E_LCD_BOOST_VOLTAGE_150V        (0x0EU) /* 1.50 V (1/3
;               bias: 4.50 V; 1/4 bias: setting prohibited) */
; line   147 : #define _0F_LCD_BOOST_VOLTAGE_155V        (0x0FU) /* 1.55 V (1/3
;               bias: 4.65 V; 1/4 bias: setting prohibited) */
; line   148 : #define _10_LCD_BOOST_VOLTAGE_160V        (0x10U) /* 1.60 V (1/3
;               bias: 4.80 V; 1/4 bias: setting prohibited) */
; line   149 : #define _11_LCD_BOOST_VOLTAGE_165V        (0x11U) /* 1.65 V (1/3
;               bias: 4.95 V; 1/4 bias: setting prohibited) */
; line   150 : #define _12_LCD_BOOST_VOLTAGE_170V        (0x12U) /* 1.70 V (1/3
;               bias: 5.10 V; 1/4 bias: setting prohibited) */
; line   151 : #define _13_LCD_BOOST_VOLTAGE_175V        (0x13U) /* 1.75 V (1/3
;               bias: 5.25 V; 1/4 bias: setting prohibited) */
; line   152 : 
; line   153 : /* 
; line   154 :     LCD input switch control register (ISCLCD)
; line   155 : */
; line   156 : /* VL3/P125 pin schmitt trigger buffer control (ISCVL3) */
; line   157 : #define _02_LCD_VL3_BUFFER_VALID          (0x02U) /* VL3/P125 pi
;              n buffer control valid */
; line   158 : #define _00_LCD_VL3_BUFFER_INVALID        (0x00U) /* VL3/P125 pi
;              n buffer control invalid */
; line   159 : /* CAPL/P126, CAPH/P127 pins schmitt trigger buffer control (ISC
;              CAP) */
; line   160 : #define _01_LCD_CAPLH_BUFFER_VALID        (0x01U) /* CAPL/P126, 
;              CAPH/P127 pins buffer control valid */
; line   161 : #define _00_LCD_CAPLH_BUFFER_INVALID      (0x00U) /* CAPL/P126, 
;              CAPH/P127 pins buffer control invalid */
; line   162 : 
; line   163 : /***************************************************************
;              ********************************************************
; line   164 : Macro definitions
; line   165 : ****************************************************************
;              *******************************************************/
; line   166 : #define LCD_VOLTAGE_WAITTIME              (0x30D40U) /* capacito
;              r split wait time (100 ms) */
; line   167 : 
; line   168 : /***************************************************************
;              ********************************************************
; line   169 : Typedef definitions
; line   170 : ****************************************************************
;              *******************************************************/
; line   171 : 
; line   172 : /***************************************************************
;              ********************************************************
; line   173 : Global functions
; line   174 : ****************************************************************
;              *******************************************************/
; line   175 : void R_LCD_Create(void);
; line   176 : void R_LCD_Start(void);
; line   177 : void R_LCD_Stop(void);
; line   178 : void R_LCD_Voltage_Off(void);
; line   179 : 
; line   180 : /* Start user code for function. Do not edit comment generated h
;              ere */
; line   181 : void R_LCD_Voltage_On(void);
; line     1 : /***************************************************************
;              ********************************************************
; line     2 : * DISCLAIMER
; line     3 : * This software is supplied by Renesas Electronics Corporation a
;              nd is only 
; line     4 : * intended for use with Renesas products. No other uses are auth
;              orized. This 
; line     5 : * software is owned by Renesas Electronics Corporation and is pr
;              otected under 
; line     6 : * all applicable laws, including copyright laws.
; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
;              IES REGARDING 
; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
;              G BUT NOT 
; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
;              ULAR PURPOSE 
; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
;              AIMED.
; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
;               RENESAS 
; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
;              ALL BE LIABLE 
; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
;               DAMAGES FOR 
; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
;              FILIATES HAVE 
; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
; line    16 : * Renesas reserves the right, without notice, to make changes to
;               this software 
; line    17 : * and to discontinue the availability of this software.  By usin
;              g this software, 
; line    18 : * you agree to the additional terms and conditions found by acce
;              ssing the 
; line    19 : * following link:
; line    20 : * http://www.renesas.com/disclaimer
; line    21 : *
; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
;               reserved.
; line    23 : ****************************************************************
;              *******************************************************/
; line    24 : 
; line    25 : /***************************************************************
;              ********************************************************
; line    26 : * File Name    : lcd_panel.h
; line    27 : * Version      : 1.00
; line    28 : * Device(s)    : R5F10WMG
; line    29 : * Tool-Chain   : CA78K0R
; line    30 : * Description  : This file contains functions and definitions us
;              ed in the lcd_panel.c file.
; line    31 : * Creation Date: 08/10/2013
; line    32 : ****************************************************************
;              *******************************************************/
; line    33 : 
; line    34 : #ifndef LCD_PANEL_H
; line    35 : #define LCD_PANEL_H
; line    36 : 
; line    37 : /***************************************************************
;              ********************************************************
; line    38 : Includes <System Includes> , �Project Includes
; line    39 : ****************************************************************
;              *******************************************************/
; line    40 : 
; line    41 : /***************************************************************
;              ********************************************************
; line    42 : Macro Definitions
; line    43 : ****************************************************************
;              *******************************************************/
; line    44 : /* Set to ensure base delay */
; line    45 : #define PANEL_DELAY_TIMING     0x05
; line    46 : 
; line    47 : /*  */
; line    48 : #define ENABLE_SW2_SW3         0u
; line    49 : #define DISABLE_SW2_SW3        1u
; line    50 : #define DISABLE_UART           (0u)
; line    51 : #define ENABLE_UART            (1u)
; line    52 : #define JUMPER_SET_SEG         0x60u
; line    53 : 
; line    54 : /* Unsupported Segments can be Controlled by the RSK when the un
;              connected 
; line    55 :    pins are connected to the RSK. Set the correct pin addresses 
;              to the 
; line    56 :    #defines below. */
; line    57 : #define Aux_pin5               0xFFFFu
; line    58 : #define Aux_pin6               0xFFFFu
; line    59 : #define Aux_pin47              0xFFFFu
; line    60 : #define Aux_pin48              0xFFFFu
; line    61 : 
; line    62 : /* Use the ROM area to indicate that a data pointer is not to be
;               used */
; line    63 : #define PDL_NO_PTR            (uint8_t * )0xFFFFu
; line    64 : 
; line    65 : /* Define Section Names */
; line    66 : #define EMPTY                  0
; line    67 : #define SECT1                 '1'
; line    68 : #define SECT2                 '2'
; line    69 : #define SECT3                 '3'
; line    70 : #define SECT4                 '4'
; line    71 : #define CLEAR                  0x23
; line    72 : #define ISOTEST                0x2A
; line    73 : 
; line    74 : #define PANEL_LCD_LINE1       '3'
; line    75 : #define PANEL_LCD_LINE2       '1'
; line    76 : #define PANEL_LCD_LINE3       '2'
; line    77 : #define PANEL_LCD_SYMBOL      '4'
; line    78 : 
; line    79 : /* Define Symbol Names */
; line    80 : #define LCD_HEAT_ON            0x3131u
; line    81 : #define LCD_HEAT_OFF           0x3130u
; line    82 : #define LCD_FAN_ON             0x3231u
; line    83 : #define LCD_FAN_OFF            0x3230u
; line    84 : #define LCD_ZONE_ON            0x3331u
; line    85 : #define LCD_ZONE_OFF           0x3330u
; line    86 : #define LCD_MGML_ON            0x3431u
; line    87 : #define LCD_MGML_OFF           0x3430u
; line    88 : #define LCD_MMHG_ON            0x3531u
; line    89 : #define LCD_MMHG_OFF           0x3530u
; line    90 : #define LCD_VOLTS_ON           0x3631u
; line    91 : #define LCD_VOLTS_OFF          0x3630u
; line    92 : #define LCD_HEART_ON           0x3731u
; line    93 : #define LCD_HEART_OFF          0x3730u
; line    94 : #define LCD_DEGREESC_ON        0x3831u
; line    95 : #define LCD_DEGREESC_OFF       0x3830u
; line    96 : #define LCD_DEGREESF_ON        0x3931u
; line    97 : #define LCD_DEGREESF_OFF       0x3930u
; line    98 : #define LCD_ALARM_ON           0x4131u
; line    99 : #define LCD_ALARM_OFF          0x4130u
; line   100 : #define LCD_ALARM_ON_1         0x6131u
; line   101 : #define LCD_ALARM_OFF_1        0x6130u
; line   102 : #define LCD_AM_ON              0x4231u
; line   103 : #define LCD_AM_OFF             0x4230u
; line   104 : #define LCD_AM_ON_1            0x6231u
; line   105 : #define LCD_AM_OFF_1           0x6230u
; line   106 : #define LCD_PM_ON              0x4331u
; line   107 : #define LCD_PM_OFF             0x4330u
; line   108 : #define LCD_PM_ON_1            0x6331u
; line   109 : #define LCD_PM_OFF_1           0x6330u
; line   110 : #define LCD_R_LOGO_ON          0x4431u
; line   111 : #define LCD_R_LOGO_OFF         0x4430u
; line   112 : #define LCD_R_LOGO_ON_1        0x6431u
; line   113 : #define LCD_R_LOGO_OFF_1       0x6430u
; line   114 : 
; line   115 : /***************************************************************
;              ********************************************************
; line   116 : Type definitions
; line   117 : ****************************************************************
;              *******************************************************/
; line   118 : /* Define Map Structure Used */
; line   119 : typedef union LCD_MAP
; line   120 : {    
; line   121 :     int32_t WORD;
; line   122 :     
; line   123 :     struct
; line   124 :     {
; line   125 :         int8_t ONE   : 4;
; line   126 :         int8_t TWO   : 4;
; line   127 :         int8_t THREE : 4;
; line   128 :         int8_t FOUR  : 4;
; line   129 :     } BYTE;
; line   130 : } LCDMAP;
; line   131 : 
; line   132 : /***************************************************************
;              ********************************************************
; line   133 : Function Prototypes
; line   134 : ****************************************************************
;              *******************************************************/
; line   135 : /* Clears the screen by the next LCD frame duration */
; line   136 : void Clear_Display (void);
; line   137 : 
; line   138 : /* Prepares the LCD Panel for use */
; line   139 : void Init_Display_Panel (void);
; line   140 : 
; line   141 : /* Disables the LCD Peripheral */
; line   142 : void Power_Off_Display(void);
; line   143 : 
; line   144 : /* Maps the character to a segment pattern, 
; line   145 :    to be displayed on Section A of the LCD panel */
; line   146 : void SECTA_Glyph_Map (const uint8_t glyph, const uint16_t digit)
;              ;
; line   147 : 
; line   148 : /* Maps the character to a segment pattern, 
; line   149 :    to be displayed on Section B of the LCD panel */
; line   150 : void SECTB_Glyph_Map (const uint8_t glyph, const uint16_t digit)
;              ;
; line   151 : 
; line   152 : /* Maps the character to a segment pattern, 
; line   153 :    to be displayed on Section C of the LCD panel */
; line   154 : void SECTC_Glyph_Map (const uint8_t glyph, const uint16_t digit)
;              ;
; line   155 : 
; line   156 : /* Maps the character to a segment pattern, 
; line   157 :    to be displayed on Section D of the LCD panel */
; line   158 : void SECTD_Glyph_Map (const uint8_t  level);
; line   159 : 
; line   160 : /* Maps the character to a segment pattern, 
; line   161 :    to be displayed on Section E of the LCD panel */
; line   162 : void SECTE_Glyph_Map (const uint16_t  level);
; line   163 : 
; line   164 : /* Maps the character to a segment pattern, 
; line   165 :    to be displayed on Section F of the LCD panel */
; line   166 : void SECTF_Glyph_Map (const uint8_t  day);
; line   167 : 
; line   168 : /* Turns on/off LCD Panel Symbols */
; line   169 : int8_t Symbol_Map (const uint16_t  input);
; line   170 : 
; line   171 : /* Initialises the glyph-segment maps used to display letters, 
; line   172 :    symbols and numbers */
; line   173 : void Init_Maps (void);
; line   174 : 
; line   175 : /* Validates the input for the Update_Display */
; line   176 : int16_t Validate_Input (const uint8_t input, uint8_t * const out
;              put);
; line   177 : 
; line   178 : /* Turn on RENESAS logo */
; line   179 : void set_logo (void);
; line     1 : /***************************************************************
;              ********************************************************
; line     2 : * DISCLAIMER
; line     3 : * This software is supplied by Renesas Electronics Corporation a
;              nd is only 
; line     4 : * intended for use with Renesas products. No other uses are auth
;              orized. This 
; line     5 : * software is owned by Renesas Electronics Corporation and is pr
;              otected under 
; line     6 : * all applicable laws, including copyright laws.
; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
;              IES REGARDING 
; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
;              G BUT NOT 
; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
;              ULAR PURPOSE 
; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
;              AIMED.
; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
;               RENESAS 
; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
;              ALL BE LIABLE 
; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
;               DAMAGES FOR 
; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
;              FILIATES HAVE 
; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
; line    16 : * Renesas reserves the right, without notice, to make changes to
;               this software 
; line    17 : * and to discontinue the availability of this software.  By usin
;              g this software, 
; line    18 : * you agree to the additional terms and conditions found by acce
;              ssing the 
; line    19 : * following link:
; line    20 : * http://www.renesas.com/disclaimer
; line    21 : *
; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
;               reserved.
; line    23 : ****************************************************************
;              *******************************************************/
; line    24 : 
; line    25 : /***************************************************************
;              ********************************************************
; line    26 : * File Name    : r_cg_port.h
; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
;              ]
; line    28 : * Device(s)    : R5F10WMG
; line    29 : * Tool-Chain   : CA78K0R
; line    30 : * Description  : This file implements device driver for Port mod
;              ule.
; line    31 : * Creation Date: 05-Jun-21
; line    32 : ****************************************************************
;              *******************************************************/
; line    33 : #ifndef PORT_H
; line    34 : #define PORT_H
; line    35 : 
; line    36 : /***************************************************************
;              ********************************************************
; line    37 : Macro definitions (Register bit)
; line    38 : ****************************************************************
;              *******************************************************/
; line    39 : /*
; line    40 :     Port Mode Register (PMm)
; line    41 : */
; line    42 : /* Pmn pin I/O mode selection (PMm7 - PMm0) */
; line    43 : #define _01_PMn0_NOT_USE        (0x01U) /* not use Pn0 as digita
;              l I/O */
; line    44 : #define _01_PMn0_MODE_INPUT     (0x01U) /* use Pn0 as input mode
;               */
; line    45 : #define _00_PMn0_MODE_OUTPUT    (0x00U) /* use Pn0 as output mod
;              e */
; line    46 : #define _02_PMn1_NOT_USE        (0x02U) /* not use Pn1 as digita
;              l I/O */
; line    47 : #define _02_PMn1_MODE_INPUT     (0x02U) /* use Pn1 as input mode
;               */
; line    48 : #define _00_PMn1_MODE_OUTPUT    (0x00U) /* use Pn1 as output mod
;              e */
; line    49 : #define _04_PMn2_NOT_USE        (0x04U) /* not use Pn2 as digita
;              l I/O */
; line    50 : #define _04_PMn2_MODE_INPUT     (0x04U) /* use Pn2 as input mode
;               */
; line    51 : #define _00_PMn2_MODE_OUTPUT    (0x00U) /* use Pn2 as output mod
;              e */
; line    52 : #define _08_PMn3_NOT_USE        (0x08U) /* not use Pn3 as digita
;              l I/O */
; line    53 : #define _08_PMn3_MODE_INPUT     (0x08U) /* use Pn3 as input mode
;               */
; line    54 : #define _00_PMn3_MODE_OUTPUT    (0x00U) /* use Pn3 as output mod
;              e */
; line    55 : #define _10_PMn4_NOT_USE        (0x10U) /* not use Pn4 as digita
;              l I/O */
; line    56 : #define _10_PMn4_MODE_INPUT     (0x10U) /* use Pn4 as input mode
;               */
; line    57 : #define _00_PMn4_MODE_OUTPUT    (0x00U) /* use Pn4 as output mod
;              e */
; line    58 : #define _20_PMn5_NOT_USE        (0x20U) /* not use Pn5 as digita
;              l I/O */
; line    59 : #define _20_PMn5_MODE_INPUT     (0x20U) /* use Pn5 as input mode
;               */
; line    60 : #define _00_PMn5_MODE_OUTPUT    (0x00U) /* use Pn5 as output mod
;              e */
; line    61 : #define _40_PMn6_NOT_USE        (0x40U) /* not use Pn6 as digita
;              l I/O */
; line    62 : #define _40_PMn6_MODE_INPUT     (0x40U) /* use Pn6 as input mode
;               */
; line    63 : #define _00_PMn6_MODE_OUTPUT    (0x00U) /* use Pn6 as output mod
;              e */
; line    64 : #define _80_PMn7_NOT_USE        (0x80U) /* not use Pn7 as digita
;              l I/O */
; line    65 : #define _80_PMn7_MODE_INPUT     (0x80U) /* use Pn7 as input mode
;               */
; line    66 : #define _00_PMn7_MODE_OUTPUT    (0x00U) /* use Pn7 as output mod
;              e */
; line    67 : 
; line    68 : /*
; line    69 :     Port Register (Pm)
; line    70 : */
; line    71 : /* Pmn pin data (Pm0 to Pm7) */
; line    72 : #define _00_Pn0_OUTPUT_0        (0x00U) /* Pn0 output 0 */
; line    73 : #define _01_Pn0_OUTPUT_1        (0x01U) /* Pn0 output 1 */
; line    74 : #define _00_Pn1_OUTPUT_0        (0x00U) /* Pn1 output 0 */
; line    75 : #define _02_Pn1_OUTPUT_1        (0x02U) /* Pn1 output 1 */
; line    76 : #define _00_Pn2_OUTPUT_0        (0x00U) /* Pn2 output 0 */
; line    77 : #define _04_Pn2_OUTPUT_1        (0x04U) /* Pn2 output 1 */
; line    78 : #define _00_Pn3_OUTPUT_0        (0x00U) /* Pn3 output 0 */
; line    79 : #define _08_Pn3_OUTPUT_1        (0x08U) /* Pn3 output 1 */
; line    80 : #define _00_Pn4_OUTPUT_0        (0x00U) /* Pn4 output 0 */
; line    81 : #define _10_Pn4_OUTPUT_1        (0x10U) /* Pn4 output 1 */
; line    82 : #define _00_Pn5_OUTPUT_0        (0x00U) /* Pn5 output 0 */
; line    83 : #define _20_Pn5_OUTPUT_1        (0x20U) /* Pn5 output 1 */
; line    84 : #define _00_Pn6_OUTPUT_0        (0x00U) /* Pn6 output 0 */
; line    85 : #define _40_Pn6_OUTPUT_1        (0x40U) /* Pn6 output 1 */
; line    86 : #define _00_Pn7_OUTPUT_0        (0x00U) /* Pn7 output 0 */
; line    87 : #define _80_Pn7_OUTPUT_1        (0x80U) /* Pn7 output 1 */
; line    88 : 
; line    89 : /*
; line    90 :     Pull-up Resistor Option Register (PUm)
; line    91 : */
; line    92 : /* Pmn pin on-chip pull-up resistor selection (PUmn) */
; line    93 : #define _00_PUn0_PULLUP_OFF     (0x00U) /* Pn0 pull-up resistor 
;              not connected */
; line    94 : #define _01_PUn0_PULLUP_ON      (0x01U) /* Pn0 pull-up resistor 
;              connected */
; line    95 : #define _00_PUn1_PULLUP_OFF     (0x00U) /* Pn1 pull-up resistor 
;              not connected */
; line    96 : #define _02_PUn1_PULLUP_ON      (0x02U) /* Pn1 pull-up resistor 
;              connected */
; line    97 : #define _00_PUn2_PULLUP_OFF     (0x00U) /* Pn2 Pull-up resistor 
;              not connected */
; line    98 : #define _04_PUn2_PULLUP_ON      (0x04U) /* Pn2 pull-up resistor 
;              connected */
; line    99 : #define _00_PUn3_PULLUP_OFF     (0x00U) /* Pn3 pull-up resistor 
;              not connected */
; line   100 : #define _08_PUn3_PULLUP_ON      (0x08U) /* Pn3 pull-up resistor 
;              connected */
; line   101 : #define _00_PUn4_PULLUP_OFF     (0x00U) /* Pn4 pull-up resistor 
;              not connected */
; line   102 : #define _10_PUn4_PULLUP_ON      (0x10U) /* Pn4 pull-up resistor 
;              connected */
; line   103 : #define _00_PUn5_PULLUP_OFF     (0x00U) /* Pn5 pull-up resistor 
;              not connected */
; line   104 : #define _20_PUn5_PULLUP_ON      (0x20U) /* Pn5 pull-up resistor 
;              connected */
; line   105 : #define _00_PUn6_PULLUP_OFF     (0x00U) /* Pn6 pull-up resistor 
;              not connected */
; line   106 : #define _40_PUn6_PULLUP_ON      (0x40U) /* Pn6 pull-up resistor 
;              connected */
; line   107 : #define _00_PUn7_PULLUP_OFF     (0x00U) /* Pn7 pull-up resistor 
;              not connected */
; line   108 : #define _80_PUn7_PULLUP_ON      (0x80U) /* Pn7 pull-up resistor 
;              connected */
; line   109 : 
; line   110 : /*
; line   111 :     Port Input Mode Register (PIMm)
; line   112 : */
; line   113 : /* Pmn pin input buffer selection (PIMmn) */
; line   114 : #define _00_PIMn3_TTL_OFF       (0x00U) /* set Pn3 normal input 
;              buffer */
; line   115 : #define _08_PIMn3_TTL_ON        (0x08U) /* set Pn3 TTL input buf
;              fer */
; line   116 : #define _00_PIMn4_TTL_OFF       (0x00U) /* set Pn4 normal input 
;              buffer */
; line   117 : #define _10_PIMn4_TTL_ON        (0x10U) /* set Pn4 TTL input buf
;              fer */
; line   118 : #define _00_PIMn5_TTL_OFF       (0x00U) /* set Pn5 normal input 
;              buffer */
; line   119 : #define _20_PIMn5_TTL_ON        (0x20U) /* set Pn5 TTL input buf
;              fer */
; line   120 : #define _00_PIMn6_TTL_OFF       (0x00U) /* set Pn6 normal input 
;              buffer */
; line   121 : #define _40_PIMn6_TTL_ON        (0x40U) /* set Pn6 TTL input buf
;              fer */
; line   122 : #define _00_PIMn7_TTL_OFF       (0x00U) /* set Pn7 normal input 
;              buffer */
; line   123 : #define _80_PIMn7_TTL_ON        (0x80U) /* set Pn7 TTL input buf
;              fer */
; line   124 : 
; line   125 : /*
; line   126 :     Port Output Mode Register (POMm)
; line   127 : */
; line   128 : /* Pmn pin output mode selection (POMmn) */
; line   129 : #define _00_POMn0_NCH_OFF       (0x00U) /* set Pn0 output normal
;               mode */
; line   130 : #define _01_POMn0_NCH_ON        (0x01U) /* set Pn0 output N-ch o
;              pen-drain mode */
; line   131 : #define _00_POMn2_NCH_OFF       (0x00U) /* set Pn2 output normal
;               mode */
; line   132 : #define _04_POMn2_NCH_ON        (0x04U) /* set Pn2 output N-ch o
;              pen-drain mode */
; line   133 : #define _00_POMn3_NCH_OFF       (0x00U) /* set Pn3 output normal
;               mode */
; line   134 : #define _08_POMn3_NCH_ON        (0x08U) /* set Pn3 output N-ch o
;              pen-drain mode */
; line   135 : #define _00_POMn4_NCH_OFF       (0x00U) /* set Pn4 output normal
;               mode */
; line   136 : #define _10_POMn4_NCH_ON        (0x10U) /* set Pn4 output N-ch o
;              pen-drain mode */
; line   137 : #define _00_POMn5_NCH_OFF       (0x00U) /* set Pn5 output normal
;               mode */
; line   138 : #define _20_POMn5_NCH_ON        (0x20U) /* set Pn5 output N-ch o
;              pen-drain mode */
; line   139 : #define _00_POMn6_NCH_OFF       (0x00U) /* set Pn6 output normal
;               mode */
; line   140 : #define _40_POMn6_NCH_ON        (0x40U) /* set Pn6 output N-ch o
;              pen-drain mode */
; line   141 : #define _00_POMn7_NCH_OFF       (0x00U) /* set Pn7 output normal
;               mode */
; line   142 : #define _80_POMn7_NCH_ON        (0x80U) /* set Pn7 output N-ch o
;              pen-drain mode */
; line   143 : 
; line   144 : /*
; line   145 :     Port Operation Mode Register (PMCm)
; line   146 : */
; line   147 : /* Pmn pin digital input buffer selection (PMCmn) */
; line   148 : #define _01_PMCn0_NOT_USE       (0x01U) /* not use Pn0 digital i
;              nput */
; line   149 : #define _00_PMCn0_DI_ON         (0x00U) /* enable Pn0 digital in
;              put */
; line   150 : #define _02_PMCn1_NOT_USE       (0x02U) /* not use Pn1 digital i
;              nput */
; line   151 : #define _00_PMCn1_DI_ON         (0x00U) /* enable Pn1 digital in
;              put */
; line   152 : #define _04_PMCn2_NOT_USE       (0x04U) /* not use Pn2 digital i
;              nput */
; line   153 : #define _00_PMCn2_DI_ON         (0x00U) /* enable Pn2 digital in
;              put */
; line   154 : #define _08_PMCn3_NOT_USE       (0x08U) /* not use Pn3 digital i
;              nput */
; line   155 : #define _00_PMCn3_DI_ON         (0x00U) /* enable Pn3 digital in
;              put */
; line   156 : #define _10_PMCn4_NOT_USE       (0x10U) /* not use Pn4 digital i
;              nput */
; line   157 : #define _00_PMCn4_DI_ON         (0x00U) /* enable Pn4 digital in
;              put */
; line   158 : #define _20_PMCn5_NOT_USE       (0x20U) /* not use Pn5 digital i
;              nput */
; line   159 : #define _00_PMCn5_DI_ON         (0x00U) /* enable Pn5 digital in
;              put */
; line   160 : #define _40_PMCn6_NOT_USE       (0x40U) /* not use Pn6 digital i
;              nput */
; line   161 : #define _00_PMCn6_DI_ON         (0x00U) /* enable Pn6 digital in
;              put */
; line   162 : #define _80_PMCn7_NOT_USE       (0x80U) /* not use Pn7 digital i
;              nput */
; line   163 : #define _00_PMCn7_DI_ON         (0x00U) /* enable Pn7 digital in
;              put */
; line   164 : 
; line   165 : /*
; line   166 :     AD port configuration register (ADPC)
; line   167 : */
; line   168 : #define _00_ADPC_DI_OFF         (0x00U) /* use P21, P20 as analo
;              g input */
; line   169 : #define _01_ADPC_DI_ON          (0x01U) /* use P21, P20 as digit
;              al input */
; line   170 : #define _02_ADPC_DI_ON          (0x02U) /* use P20 as digital in
;              put */
; line   171 : 
; line   172 : /*
; line   173 :     LCD port function registers 00 (PFSEG00)
; line   174 : */
; line   175 : /* Port (other than segment output)/segment outputs specificatio
;              n of Pmn pins (PFSEGxx) */
; line   176 : #define _00_PFSEG04_PORT        (0x00U) /* used the P50 pin as p
;              ort (other than segment output) */
; line   177 : #define _10_PFSEG04_SEG         (0x10U) /* used the P50 pin as s
;              egment output */
; line   178 : #define _00_PFSEG05_PORT        (0x00U) /* used the P51 pin as p
;              ort (other than segment output) */
; line   179 : #define _20_PFSEG05_SEG         (0x20U) /* used the P51 pin as s
;              egment output */
; line   180 : #define _00_PFSEG06_PORT        (0x00U) /* used the P52 pin as p
;              ort (other than segment output) */
; line   181 : #define _40_PFSEG06_SEG         (0x40U) /* used the P52 pin as s
;              egment output */
; line   182 : #define _00_PFSEG07_PORT        (0x00U) /* used the P53 pin as p
;              ort (other than segment output) */
; line   183 : #define _80_PFSEG07_SEG         (0x80U) /* used the P53 pin as s
;              egment output */
; line   184 : 
; line   185 : /*
; line   186 :     LCD port function registers 01 (PFSEG01)
; line   187 : */
; line   188 : /* Port (other than segment output)/segment outputs specificatio
;              n of Pmn pins (PFSEGxx) */
; line   189 : #define _00_PFSEG08_PORT        (0x00U) /* used the P54 pin as p
;              ort (other than segment output) */
; line   190 : #define _01_PFSEG08_SEG         (0x01U) /* used the P54 pin as s
;              egment output */
; line   191 : #define _00_PFSEG09_PORT        (0x00U) /* used the P55 pin as p
;              ort (other than segment output) */
; line   192 : #define _02_PFSEG09_SEG         (0x02U) /* used the P55 pin as s
;              egment output */
; line   193 : #define _00_PFSEG10_PORT        (0x00U) /* used the P56 pin as p
;              ort (other than segment output) */
; line   194 : #define _04_PFSEG10_SEG         (0x04U) /* used the P56 pin as s
;              egment output */
; line   195 : #define _00_PFSEG11_PORT        (0x00U) /* used the P57 pin as p
;              ort (other than segment output) */
; line   196 : #define _08_PFSEG11_SEG         (0x08U) /* used the P57 pin as s
;              egment output */
; line   197 : #define _00_PFSEG12_PORT        (0x00U) /* used the P70 pin as p
;              ort (other than segment output) */
; line   198 : #define _10_PFSEG12_SEG         (0x10U) /* used the P70 pin as s
;              egment output */
; line   199 : #define _00_PFSEG13_PORT        (0x00U) /* used the P71 pin as p
;              ort (other than segment output) */
; line   200 : #define _20_PFSEG13_SEG         (0x20U) /* used the P71 pin as s
;              egment output */
; line   201 : #define _00_PFSEG14_PORT        (0x00U) /* used the P72 pin as p
;              ort (other than segment output) */
; line   202 : #define _40_PFSEG14_SEG         (0x40U) /* used the P72 pin as s
;              egment output */
; line   203 : #define _00_PFSEG15_PORT        (0x00U) /* used the P73 pin as p
;              ort (other than segment output) */
; line   204 : #define _80_PFSEG15_SEG         (0x80U) /* used the P73 pin as s
;              egment output */
; line   205 : 
; line   206 : /*
; line   207 :     LCD port function registers 02 (PFSEG02)
; line   208 : */
; line   209 : /* Port (other than segment output)/segment outputs specificatio
;              n of Pmn pins (PFSEGxx) */
; line   210 : #define _00_PFSEG16_PORT        (0x00U) /* used the P74 pin as p
;              ort (other than segment output) */
; line   211 : #define _01_PFSEG16_SEG         (0x01U) /* used the P74 pin as s
;              egment output */
; line   212 : #define _00_PFSEG17_PORT        (0x00U) /* used the P75 pin as p
;              ort (other than segment output) */
; line   213 : #define _02_PFSEG17_SEG         (0x02U) /* used the P75 pin as s
;              egment output */
; line   214 : #define _00_PFSEG18_PORT        (0x00U) /* used the P76 pin as p
;              ort (other than segment output) */
; line   215 : #define _04_PFSEG18_SEG         (0x04U) /* used the P76 pin as s
;              egment output */
; line   216 : #define _00_PFSEG19_PORT        (0x00U) /* used the P77 pin as p
;              ort (other than segment output) */
; line   217 : #define _08_PFSEG19_SEG         (0x08U) /* used the P77 pin as s
;              egment output */
; line   218 : #define _00_PFSEG20_PORT        (0x00U) /* used the P30 pin as p
;              ort (other than segment output) */
; line   219 : #define _10_PFSEG20_SEG         (0x10U) /* used the P30 pin as s
;              egment output */
; line   220 : #define _00_PFSEG21_PORT        (0x00U) /* used the P31 pin as p
;              ort (other than segment output) */
; line   221 : #define _20_PFSEG21_SEG         (0x20U) /* used the P31 pin as s
;              egment output */
; line   222 : #define _00_PFSEG22_PORT        (0x00U) /* used the P32 pin as p
;              ort (other than segment output) */
; line   223 : #define _40_PFSEG22_SEG         (0x40U) /* used the P32 pin as s
;              egment output */
; line   224 : #define _00_PFSEG23_PORT        (0x00U) /* used the P33 pin as p
;              ort (other than segment output) */
; line   225 : #define _80_PFSEG23_SEG         (0x80U) /* used the P33 pin as s
;              egment output */
; line   226 : 
; line   227 : /*
; line   228 :     LCD port function registers 03 (PFSEG03)
; line   229 : */
; line   230 : /* Port (other than segment output)/segment outputs specificatio
;              n of Pmn pins (PFSEGxx) */
; line   231 : #define _00_PFSEG24_PORT        (0x00U) /* used the P34 pin as p
;              ort (other than segment output) */
; line   232 : #define _01_PFSEG24_SEG         (0x01U) /* used the P34 pin as s
;              egment output */
; line   233 : #define _00_PFSEG25_PORT        (0x00U) /* used the P35 pin as p
;              ort (other than segment output) */
; line   234 : #define _02_PFSEG25_SEG         (0x02U) /* used the P35 pin as s
;              egment output */
; line   235 : #define _00_PFSEG26_PORT        (0x00U) /* used the P46 pin as p
;              ort (other than segment output) */
; line   236 : #define _08_PFSEG26_SEG         (0x08U) /* used the P46 pin as s
;              egment output */
; line   237 : #define _00_PFSEG27_PORT        (0x00U) /* used the P47 pin as p
;              ort (other than segment output) */
; line   238 : #define _10_PFSEG27_SEG         (0x10U) /* used the P47 pin as s
;              egment output */
; line   239 : #define _00_PFSEG28_PORT        (0x00U) /* used the P130 pin as 
;              port (other than segment output) */
; line   240 : #define _20_PFSEG28_SEG         (0x20U) /* used the P130 pin as 
;              segment output */
; line   241 : #define _00_PFSEG29_PORT        (0x00U) /* used the P22 pin as p
;              ort (other than segment output) */
; line   242 : #define _40_PFSEG29_SEG         (0x40U) /* used the P22 pin as s
;              egment output */
; line   243 : #define _00_PFSEG30_PORT        (0x00U) /* used the P23 pin as p
;              ort (other than segment output) */
; line   244 : #define _80_PFSEG30_SEG         (0x80U) /* used the P23 pin as s
;              egment output */
; line   245 : #define _04_PFDEG_DEFAULT       (0x04U) /* PFDEG default value *
;              /
; line   246 : 
; line   247 : /*
; line   248 :     LCD port function registers 04 (PFSEG04)
; line   249 : */
; line   250 : /* Port (other than segment output)/segment outputs specificatio
;              n of Pmn pins (PFSEGxx) */
; line   251 : #define _00_PFSEG31_PORT        (0x00U) /* used the P24 pin as p
;              ort (other than segment output) */
; line   252 : #define _01_PFSEG31_SEG         (0x01U) /* used the P24 pin as s
;              egment output */
; line   253 : #define _00_PFSEG32_PORT        (0x00U) /* used the P25 pin as p
;              ort (other than segment output) */
; line   254 : #define _02_PFSEG32_SEG         (0x02U) /* used the P25 pin as s
;              egment output */
; line   255 : #define _00_PFSEG33_PORT        (0x00U) /* used the P26 pin as p
;              ort (other than segment output) */
; line   256 : #define _04_PFSEG33_SEG         (0x04U) /* used the P26 pin as s
;              egment output */
; line   257 : #define _00_PFSEG34_PORT        (0x00U) /* used the P27 pin as p
;              ort (other than segment output) */
; line   258 : #define _08_PFSEG34_SEG         (0x08U) /* used the P27 pin as s
;              egment output */
; line   259 : #define _00_PFSEG35_PORT        (0x00U) /* used the P10 pin as p
;              ort (other than segment output) */
; line   260 : #define _10_PFSEG35_SEG         (0x10U) /* used the P10 pin as s
;              egment output */
; line   261 : #define _00_PFSEG36_PORT        (0x00U) /* used the P11 pin as p
;              ort (other than segment output) */
; line   262 : #define _20_PFSEG36_SEG         (0x20U) /* used the P11 pin as s
;              egment output */
; line   263 : #define _00_PFSEG37_PORT        (0x00U) /* used the P12 pin as p
;              ort (other than segment output) */
; line   264 : #define _40_PFSEG37_SEG         (0x40U) /* used the P12 pin as s
;              egment output */
; line   265 : #define _00_PFSEG38_PORT        (0x00U) /* used the P13 pin as p
;              ort (other than segment output) */
; line   266 : #define _80_PFSEG38_SEG         (0x80U) /* used the P13 pin as s
;              egment output */
; line   267 : 
; line   268 : /*
; line   269 :     LCD port function registers 05 (PFSEG05)
; line   270 : */
; line   271 : /* Port (other than segment output)/segment outputs specificatio
;              n of Pmn pins (PFSEGxx) */
; line   272 : #define _00_PFSEG39_PORT        (0x00U) /* used the P14 pin as p
;              ort (other than segment output) */
; line   273 : #define _01_PFSEG39_SEG         (0x01U) /* used the P14 pin as s
;              egment output */
; line   274 : #define _00_PFSEG40_PORT        (0x00U) /* used the P15 pin as p
;              ort (other than segment output) */
; line   275 : #define _02_PFSEG40_SEG         (0x02U) /* used the P15 pin as s
;              egment output */
; line   276 : #define _00_PFSEG41_PORT        (0x00U) /* used the P16 pin as p
;              ort (other than segment output) */
; line   277 : #define _04_PFSEG41_SEG         (0x04U) /* used the P16 pin as s
;              egment output */
; line   278 : #define _00_PFSEG42_PORT        (0x00U) /* used the P17 pin as p
;              ort (other than segment output) */
; line   279 : #define _08_PFSEG42_SEG         (0x08U) /* used the P17 pin as s
;              egment output */
; line   280 : #define _00_PFSEG43_PORT        (0x00U) /* used the P00 pin as p
;              ort (other than segment output) */
; line   281 : #define _10_PFSEG43_SEG         (0x10U) /* used the P00 pin as s
;              egment output */
; line   282 : #define _00_PFSEG44_PORT        (0x00U) /* used the P01 pin as p
;              ort (other than segment output) */
; line   283 : #define _20_PFSEG44_SEG         (0x20U) /* used the P01 pin as s
;              egment output */
; line   284 : #define _00_PFSEG45_PORT        (0x00U) /* used the P02 pin as p
;              ort (other than segment output) */
; line   285 : #define _40_PFSEG45_SEG         (0x40U) /* used the P02 pin as s
;              egment output */
; line   286 : #define _00_PFSEG46_PORT        (0x00U) /* used the P03 pin as p
;              ort (other than segment output) */
; line   287 : #define _80_PFSEG46_SEG         (0x80U) /* used the P03 pin as s
;              egment output */
; line   288 : 
; line   289 : /*
; line   290 :     LCD port function registers 06 (PFSEG06)
; line   291 : */
; line   292 : /* Port (other than segment output)/segment outputs specificatio
;              n of Pmn pins (PFSEGxx) */
; line   293 : #define _00_PFSEG47_PORT        (0x00U) /* used the P04 pin as p
;              ort (other than segment output) */
; line   294 : #define _01_PFSEG47_SEG         (0x01U) /* used the P04 pin as s
;              egment output */
; line   295 : #define _00_PFSEG48_PORT        (0x00U) /* used the P05 pin as p
;              ort (other than segment output) */
; line   296 : #define _02_PFSEG48_SEG         (0x02U) /* used the P05 pin as s
;              egment output */
; line   297 : #define _00_PFSEG49_PORT        (0x00U) /* used the P06 pin as p
;              ort (other than segment output) */
; line   298 : #define _04_PFSEG49_SEG         (0x04U) /* used the P06 pin as s
;              egment output */
; line   299 : #define _00_PFSEG50_PORT        (0x00U) /* used the P07 pin as p
;              ort (other than segment output) */
; line   300 : #define _08_PFSEG50_SEG         (0x08U) /* used the P07 pin as s
;              egment output */
; line   301 : 
; line   302 : /*
; line   303 :     LCD input switch control register (ISCLCD)
; line   304 : */
; line   305 : /* Control of schmitt trigger buffer of CAPL/P126 and CAPH/P127 
;              pins (ISCCAP) */
; line   306 : #define _00_ISCCAP_INVALID      (0x00U) /* makes digital input i
;              nvalid */
; line   307 : #define _01_ISCCAP_VALID        (0x01U) /* makes digital input v
;              alid */
; line   308 : /* Control of schmitt trigger buffer of VL3/P125 pin (ISCVL3) */
; line   309 : #define _00_ISCVL3_INVALID      (0x00U) /* makes digital input i
;              nvalid */
; line   310 : #define _02_ISCVL3_VALID        (0x02U) /* makes digital input v
;              alid */
; line   311 : 
; line   312 : /***************************************************************
;              ********************************************************
; line   313 : Macro definitions
; line   314 : ****************************************************************
;              *******************************************************/
; line   315 : #define _C0_PM3_DEFAULT         (0xC0U) /* PM3 default value */
; line   316 : #define _FC_PM6_DEFAULT         (0xFCU) /* PM6 default value */
; line   317 : #define _1F_PM12_DEFAULT        (0x1FU) /* PM12 default value */
; line   318 : #define _FE_PM13_DEFAULT        (0xFEU) /* PM13 default value */
; line   319 : #define _F0_PMC1_DEFAULT        (0xF0U) /* PMC1 default value */
; line   320 : #define _03_PMC2_DEFAULT        (0x03U) /* PMC2 default value */
; line   321 : 
; line   322 : /***************************************************************
;              ********************************************************
; line   323 : Typedef definitions
; line   324 : ****************************************************************
;              *******************************************************/
; line   325 : 
; line   326 : /***************************************************************
;              ********************************************************
; line   327 : Global functions
; line   328 : ****************************************************************
;              *******************************************************/
; line   329 : void R_PORT_Create(void);
; line     1 : /***************************************************************
;              ********************************************************
; line     2 : * DISCLAIMER
; line     3 : * This software is supplied by Renesas Electronics Corporation a
;              nd is only 
; line     4 : * intended for use with Renesas products. No other uses are auth
;              orized. This 
; line     5 : * software is owned by Renesas Electronics Corporation and is pr
;              otected under 
; line     6 : * all applicable laws, including copyright laws.
; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
;              IES REGARDING 
; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
;              G BUT NOT 
; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
;              ULAR PURPOSE 
; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
;              AIMED.
; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
;               RENESAS 
; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
;              ALL BE LIABLE 
; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
;               DAMAGES FOR 
; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
;              FILIATES HAVE 
; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
; line    16 : * Renesas reserves the right, without notice, to make changes to
;               this software 
; line    17 : * and to discontinue the availability of this software.  By usin
;              g this software, 
; line    18 : * you agree to the additional terms and conditions found by acce
;              ssing the 
; line    19 : * following link:
; line    20 : * http://www.renesas.com/disclaimer
; line    21 : *
; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
;               reserved.
; line    23 : ****************************************************************
;              *******************************************************/
; line    24 : 
; line    25 : /***************************************************************
;              ********************************************************
; line    26 : * File Name    : lcd_panel.c
; line    27 : * Version      : 1.0
; line    28 : * Device(s)    : R5F10WMG
; line    29 : * Tool-Chain   : CA78K0R
; line    30 : * Description  : This file contains the lcd panel driver.
; line    31 : * Creation Date: 08/10/2013
; line    32 : ****************************************************************
;              *******************************************************/
; line    33 : 
; line    34 : /***************************************************************
;              ********************************************************
; line    35 : Includes <System Includes> , �Project Includes
; line    36 : ****************************************************************
;              *******************************************************/
; line    37 : /* Contains string functions used in this file */
; line    38 : #include "r_cg_macrodriver.h"
; line    39 : #include "r_cg_lcd.h"
; line    40 : 
; line    41 : /* Header file contains declarations of functions defined in thi
;              s file */
; line    42 : #include "lcd_panel.h"
; line    43 : #include "r_cg_port.h"
; line    44 : 
; line    45 : /***************************************************************
;              ********************************************************
; line    46 : Global Variables & Defined Constants 
; line    47 : ****************************************************************
;              *******************************************************/
; line    48 : /* Declare Array Maps */
; line    49 : LCDMAP SECTA_map[20];
; line    50 : LCDMAP SECTB_map[20];
; line    51 : LCDMAP SECTC_map[41];
; line    52 : 
; line    53 : /***************************************************************
;              ********************************************************
; line    54 : User Program Code
; line    55 : ****************************************************************
;              *******************************************************/
; line    56 : /***************************************************************
;              ********************************************************
; line    57 : * Function Name : Init_Display_Panel
; line    58 : * Description   : Calls functions in order to prepare the LCD Pa
;              nel for use
; line    59 : * Arguments     : None
; line    60 : * Return Value  : None
; line    61 : ****************************************************************
;              *******************************************************/
; line    62 : void Init_Display_Panel (void)
; line    63 : {    

@@CODEL	CSEG
_Init_Display_Panel:
$DGL	1,38
??bf_Init_Display_Panel:
; line    64 :     /* Load up Segment Maps */
; line    65 :     Init_Maps();
$DGL	0,3
	call	!!_Init_Maps					;[INF] 4, 3
; line    66 :      
; line    67 :     /* Clear LCD Data Registers */
; line    68 :     Clear_Display();
$DGL	0,6
	call	!!_Clear_Display				;[INF] 4, 3
; line    69 :     
; line    70 :     /* Make sure that SEG 48 is not used as this is used for LED
;               0 */
; line    71 :     PFSEG6 &= (uint8_t)~_02_PFSEG48_SEG;
$DGL	0,9
	mov	a,!PFSEG6					;[INF] 3, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	!PFSEG6,a					;[INF] 3, 1
; line    72 : 
; line    73 :     /* Make sure that IVERF0 is not used as this is used for LED
;               1 */
; line    74 :     PFSEG3 &= (uint8_t)~_04_PFDEG_DEFAULT;
$DGL	0,12
	mov	a,!PFSEG3					;[INF] 3, 1
	and	a,#0FBH	; 251 					;[INF] 2, 1
	mov	!PFSEG3,a					;[INF] 3, 1
; line    75 : 
; line    76 :     /* Enable the LCD */
; line    77 :     R_LCD_Start();
$DGL	0,15
	call	!!_R_LCD_Start					;[INF] 4, 3
; line    78 :     
; line    79 :     /* Enable the voltage boost circuit */
; line    80 :     R_LCD_Voltage_On();
$DGL	0,18
	call	!!_R_LCD_Voltage_On				;[INF] 4, 3
; line    81 :     
; line    82 : }
$DGL	0,20
??ef_Init_Display_Panel:
	ret							;[INF] 1, 6
??ee_Init_Display_Panel:
; line    83 : /***************************************************************
;              ********************************************************
; line    84 : End of function Init_Display_Panel
; line    85 : ****************************************************************
;              *******************************************************/
; line    86 : 
; line    87 : 
; line    88 : /***************************************************************
;              ********************************************************
; line    89 : * Function Name : Validate_Input
; line    90 : * Description   : Takes any char and validates the input for the
;               Update_Display 
; line    91 : *                 function. Capitalises all letters, and remaps 
;              symbols. Outputs
; line    92 : *                 to a variable specified by the pointer paramet
;              er passed.
; line    93 : * Arguments     : uint8_t input
; line    94 : *                         to be validated
; line    95 : *                 uint8_t * output
; line    96 : *                         pointer to output buffer
; line    97 : * Return Value  : 0: Unsupported Character
; line    98 : *                 1: Number (or space)
; line    99 : *                 2: Letter A-F
; line   100 : *                 3: Letter G-Z
; line   101 : *                 4: Supported Symbol
; line   102 : ****************************************************************
;              *******************************************************/
; line   103 : int16_t Validate_Input (const uint8_t input, uint8_t * const out
;              put)
; line   104 : {
_Validate_Input:
$DGL	1,44
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	movw	hl,sp						;[INF] 3, 1
??bf_Validate_Input:
; line   105 :     /* Is space or Carriage Return? */
; line   106 :     if ((input == ' ') || (input == 0x0D))
$DGL	0,3
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#020H	; 32 					;[INF] 2, 1
	bz	$?L0007						;[INF] 2, 4
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#0DH	; 13 					;[INF] 2, 1
	bnz	$?L0005						;[INF] 2, 4
?L0007:
; line   107 :     {
??bb00_Validate_Input:
; line   108 :         *output = 0x29U;
$DGL	0,5
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#029H	; 41 				;[INF] 3, 1
; line   109 :         return 1;
$DGL	0,6
	onew	bc						;[INF] 1, 1
	br	$!?L0004					;[INF] 3, 3
??eb00_Validate_Input:
; line   110 :     }
; line   111 : 
; line   112 :     /* Is Number? */
; line   113 :     else if ((input < 0x3AU) && (input > 0x2FU))
$DGL	0,10
	br	$!?L0006					;[INF] 3, 3
?L0005:
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#03AH	; 58 					;[INF] 2, 1
	bnc	$?L0008						;[INF] 2, 4
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#030H	; 48 					;[INF] 2, 1
	bc	$?L0008						;[INF] 2, 4
; line   114 :     {
??bb01_Validate_Input:
; line   115 :         /* Convert from ASCII */
; line   116 :         *output = (uint8_t)(input - 0x30U);
$DGL	0,13
	mov	a,[hl]	; input 				;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	subw	ax,#030H	; 48 				;[INF] 3, 1
	xch	a,x						;[INF] 1, 1
	mov	c,a						;[INF] 1, 1
	xch	a,x						;[INF] 1, 1
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,c						;[INF] 1, 1
	mov	[de],a						;[INF] 1, 1
; line   117 :         return 1;
$DGL	0,14
	onew	bc						;[INF] 1, 1
	br	$!?L0004					;[INF] 3, 3
??eb01_Validate_Input:
; line   118 :     }
; line   119 :     
; line   120 :     /* Is Uppercase Alpha A-F ? */
; line   121 :     else if ((input < 0x47U) && (input > 0x40U))
$DGL	0,18
	br	$!?L0009					;[INF] 3, 3
?L0008:
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#047H	; 71 					;[INF] 2, 1
	bnc	$?L0010						;[INF] 2, 4
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#041H	; 65 					;[INF] 2, 1
	bc	$?L0010						;[INF] 2, 4
; line   122 :     {
??bb02_Validate_Input:
; line   123 :         /* Convert from ASCII */
; line   124 :         *output = (uint8_t)(input - 0x33U);
$DGL	0,21
	mov	a,[hl]	; input 				;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	subw	ax,#033H	; 51 				;[INF] 3, 1
	xch	a,x						;[INF] 1, 1
	mov	c,a						;[INF] 1, 1
	xch	a,x						;[INF] 1, 1
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,c						;[INF] 1, 1
	mov	[de],a						;[INF] 1, 1
; line   125 :         return 2;        
$DGL	0,22
	movw	bc,#02H	; 2 					;[INF] 3, 1
	br	$!?L0004					;[INF] 3, 3
??eb02_Validate_Input:
; line   126 :     }
; line   127 :     
; line   128 :     /* Is Lowercase Alpha A-F */
; line   129 :     else if ((input < 0x67) && (input > 0x60))
$DGL	0,26
	br	$!?L0011					;[INF] 3, 3
?L0010:
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#067H	; 103 					;[INF] 2, 1
	bnc	$?L0012						;[INF] 2, 4
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#061H	; 97 					;[INF] 2, 1
	bc	$?L0012						;[INF] 2, 4
; line   130 :     {
??bb03_Validate_Input:
; line   131 :         /* Shift Case & Convert from ASCII */
; line   132 :         *output = (uint8_t)(input - 0x53);
$DGL	0,29
	mov	a,[hl]	; input 				;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	subw	ax,#053H	; 83 				;[INF] 3, 1
	xch	a,x						;[INF] 1, 1
	mov	c,a						;[INF] 1, 1
	xch	a,x						;[INF] 1, 1
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,c						;[INF] 1, 1
	mov	[de],a						;[INF] 1, 1
; line   133 :         return 2;
$DGL	0,30
	movw	bc,#02H	; 2 					;[INF] 3, 1
	br	$!?L0004					;[INF] 3, 3
??eb03_Validate_Input:
; line   134 :     }
; line   135 :     
; line   136 :     /* Is Uppercase Alpha G-Z ? */
; line   137 :     else if ((input > 0x46) && (input < 0x5B))
$DGL	0,34
	br	$!?L0013					;[INF] 3, 3
?L0012:
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#047H	; 71 					;[INF] 2, 1
	bc	$?L0014						;[INF] 2, 4
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#05BH	; 91 					;[INF] 2, 1
	bnc	$?L0014						;[INF] 2, 4
; line   138 :     {
??bb04_Validate_Input:
; line   139 :         /* Convert from ASCII */
; line   140 :         *output = (uint8_t)(input - 0x33);
$DGL	0,37
	mov	a,[hl]	; input 				;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	subw	ax,#033H	; 51 				;[INF] 3, 1
	xch	a,x						;[INF] 1, 1
	mov	c,a						;[INF] 1, 1
	xch	a,x						;[INF] 1, 1
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,c						;[INF] 1, 1
	mov	[de],a						;[INF] 1, 1
; line   141 :         return 3;
$DGL	0,38
	movw	bc,#03H	; 3 					;[INF] 3, 1
	br	$!?L0004					;[INF] 3, 3
??eb04_Validate_Input:
; line   142 :     }
; line   143 :     
; line   144 :     /* Is Lowercase Alpha G-Z ? */
; line   145 :     else if ((input > 0x66) && (input < 0x7B))
$DGL	0,42
	br	$!?L0015					;[INF] 3, 3
?L0014:
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#067H	; 103 					;[INF] 2, 1
	bc	$?L0016						;[INF] 2, 4
	mov	a,[hl]	; input 				;[INF] 1, 1
	cmp	a,#07BH	; 123 					;[INF] 2, 1
	bnc	$?L0016						;[INF] 2, 4
; line   146 :     {
??bb05_Validate_Input:
; line   147 :         /* Shift Case & Convert from ASCII */
; line   148 :         *output = (uint8_t)(input - 0x53);
$DGL	0,45
	mov	a,[hl]	; input 				;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	subw	ax,#053H	; 83 				;[INF] 3, 1
	xch	a,x						;[INF] 1, 1
	mov	c,a						;[INF] 1, 1
	xch	a,x						;[INF] 1, 1
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,c						;[INF] 1, 1
	mov	[de],a						;[INF] 1, 1
; line   149 :         return 3;
$DGL	0,46
	movw	bc,#03H	; 3 					;[INF] 3, 1
	br	$?L0004						;[INF] 2, 3
??eb05_Validate_Input:
; line   150 :     }
; line   151 :     
; line   152 :     /* Is Symbol? */
; line   153 :     else
$DGL	0,50
	br	$?L0017						;[INF] 2, 3
?L0016:
; line   154 :     {
??bb06_Validate_Input:
; line   155 :         /* Check input against supported symbols */
; line   156 :         switch (input)
$DGL	0,53
	mov	a,[hl]	; input 				;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	subw	ax,#02AH	; 42 				;[INF] 3, 1
	bz	$?L0025						;[INF] 2, 4
	subw	ax,#01H	; 1 					;[INF] 3, 1
	bz	$?L0019						;[INF] 2, 4
	subw	ax,#02H	; 2 					;[INF] 3, 1
	bz	$?L0020						;[INF] 2, 4
	subw	ax,#01H	; 1 					;[INF] 3, 1
	bz	$?L0023						;[INF] 2, 4
	subw	ax,#01H	; 1 					;[INF] 3, 1
	bz	$?L0021						;[INF] 2, 4
	subw	ax,#0BH	; 11 					;[INF] 3, 1
	bz	$?L0024						;[INF] 2, 4
	subw	ax,#022H	; 34 				;[INF] 3, 1
	bz	$?L0022						;[INF] 2, 4
	br	$?L0026						;[INF] 2, 3
; line   157 :         {
??bb07_Validate_Input:
; line   158 :             /* Is Plus */
; line   159 :             case 0x2B:
?L0019:
; line   160 :             {
??bb08_Validate_Input:
; line   161 :                 *output = 0x0A;
$DGL	0,58
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#0AH	; 10 				;[INF] 3, 1
??eb08_Validate_Input:
; line   162 :             }
; line   163 :             break;
$DGL	0,60
	br	$?L0018						;[INF] 2, 3
; line   164 :             
; line   165 :             /* Is Minus */
; line   166 :             case 0x2D:
?L0020:
; line   167 :             {
??bb09_Validate_Input:
; line   168 :                 *output = 0x0B;
$DGL	0,65
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#0BH	; 11 				;[INF] 3, 1
??eb09_Validate_Input:
; line   169 :             }
; line   170 :             break;
$DGL	0,67
	br	$?L0018						;[INF] 2, 3
; line   171 :             
; line   172 :             /* Is Forward Slash */
; line   173 :             case 0x2F:
?L0021:
; line   174 :             {
??bb0A_Validate_Input:
; line   175 :                 *output = 0x0C;
$DGL	0,72
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#0CH	; 12 				;[INF] 3, 1
??eb0A_Validate_Input:
; line   176 :             }
; line   177 :             break;
$DGL	0,74
	br	$?L0018						;[INF] 2, 3
; line   178 :             
; line   179 :             /* Is Back Slash */
; line   180 :             case 0x5C:
?L0022:
; line   181 :             {
??bb0B_Validate_Input:
; line   182 :                 *output = 0x0D;
$DGL	0,79
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#0DH	; 13 				;[INF] 3, 1
??eb0B_Validate_Input:
; line   183 :             }
; line   184 :             break;
$DGL	0,81
	br	$?L0018						;[INF] 2, 3
; line   185 :             
; line   186 :             /* Is full stop */
; line   187 :             case 0x2E:
?L0023:
; line   188 :             {
??bb0C_Validate_Input:
; line   189 :                 *output = 0x2E;
$DGL	0,86
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#02EH	; 46 				;[INF] 3, 1
??eb0C_Validate_Input:
; line   190 :             }
; line   191 :             break;
$DGL	0,88
	br	$?L0018						;[INF] 2, 3
; line   192 :             
; line   193 :             /* Is colon */
; line   194 :             case 0x3A:
?L0024:
; line   195 :             {
??bb0D_Validate_Input:
; line   196 :                 *output = 0x3A;
$DGL	0,93
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#03AH	; 58 				;[INF] 3, 1
??eb0D_Validate_Input:
; line   197 :             }
; line   198 :             break;
$DGL	0,95
	br	$?L0018						;[INF] 2, 3
; line   199 :             
; line   200 :             case 0x2A:
?L0025:
; line   201 :             {
??bb0E_Validate_Input:
; line   202 :                 *output = 0x28;
$DGL	0,99
	movw	ax,[hl+8]	; output 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#028H	; 40 				;[INF] 3, 1
??eb0E_Validate_Input:
; line   203 :             }
; line   204 :             break;
$DGL	0,101
	br	$?L0018						;[INF] 2, 3
; line   205 : 
; line   206 :             /* Unsupported Character */
; line   207 :             default:
?L0026:
; line   208 :             {
??bb0F_Validate_Input:
; line   209 :                 return 0;
$DGL	0,106
	clrw	bc						;[INF] 1, 1
	br	$?L0004						;[INF] 2, 3
??eb0F_Validate_Input:
; line   210 :             }
??eb07_Validate_Input:
; line   211 :         }
?L0018:
; line   212 :         return 4;
$DGL	0,109
	movw	bc,#04H	; 4 					;[INF] 3, 1
??eb06_Validate_Input:
; line   213 :     }
?L0017:
?L0015:
?L0013:
?L0011:
?L0009:
?L0006:
; line   214 : }
?L0004:
$DGL	0,111
??ef_Validate_Input:
	pop	ax						;[INF] 1, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_Validate_Input:
; line   215 : /***************************************************************
;              ********************************************************
; line   216 : End of function Validate_Input
; line   217 : ****************************************************************
;              *******************************************************/
; line   218 : 
; line   219 : /***************************************************************
;              ********************************************************
; line   220 : * Function Name: SECTA_Glyph_Map
; line   221 : * Description  : Takes a validated char input and maps the chara
;              cter to a 
; line   222 : *                segment pattern, to be displayed on Section A o
;              f the LCD panel.
; line   223 : * Arguments    : character to be displayed, digit position of ch
;              aracter
; line   224 : * Return Value : none
; line   225 : ****************************************************************
;              *******************************************************/
; line   226 : void SECTA_Glyph_Map (const uint8_t glyph, const uint16_t digit)
; line   227 : {
_SECTA_Glyph_Map:
$DGL	1,117
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	subw	sp,#04H						;[INF] 2, 1
	movw	hl,sp						;[INF] 3, 1
??bf_SECTA_Glyph_Map:
; line   228 :     volatile uint8_t * PinPtr1 = PDL_NO_PTR;
$DGL	0,2
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   229 :     volatile uint8_t * PinPtr2 = PDL_NO_PTR;
$DGL	0,3
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
; line   230 :     
; line   231 :     /* Set Pointers to Correct Segments */
; line   232 :     switch (digit)
$DGL	0,6
	movw	ax,[hl+12]	; digit 			;[INF] 2, 1
	cmpw	ax,#04H	; 4 					;[INF] 3, 1
	bnc	$?L0036						;[INF] 2, 4
	movw	bc,ax						;[INF] 1, 1
	mov	a,?L0038+8[bc]					;[INF] 3, 1
	shlw	bc,1						;[INF] 2, 1
	mov	CS,a						;[INF] 2, 1
	movw	ax,?L0038[bc]					;[INF] 3, 1
	br	ax						;[INF] 2, 3
; line   233 :     {
??bb00_SECTA_Glyph_Map:
; line   234 :         /* First Digit */
; line   235 :         case 0:
?L0032:
; line   236 :         {
??bb01_SECTA_Glyph_Map:
; line   237 :             PinPtr1 = &SEG11_DEF;
$DGL	0,11
	movw	ax,#040BH	; 1035 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   238 :             PinPtr2 = &SEG10_DEF;
$DGL	0,12
	decw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb01_SECTA_Glyph_Map:
; line   239 :         }
; line   240 :         break;
$DGL	0,14
	br	$?L0031						;[INF] 2, 3
; line   241 :         
; line   242 :         /* Second Digit */
; line   243 :         case 1:
?L0033:
; line   244 :         {
??bb02_SECTA_Glyph_Map:
; line   245 :             PinPtr1 = &SEG13_DEF;
$DGL	0,19
	movw	ax,#040DH	; 1037 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   246 :             PinPtr2 = &SEG12_DEF;
$DGL	0,20
	decw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb02_SECTA_Glyph_Map:
; line   247 :         }    
; line   248 :         break;
$DGL	0,22
	br	$?L0031						;[INF] 2, 3
; line   249 :         
; line   250 :         /* Decimal Point */
; line   251 :         case 2:
?L0034:
; line   252 :         {
??bb03_SECTA_Glyph_Map:
; line   253 :             PinPtr1 = &SEG14_DEF;
$DGL	0,27
	movw	ax,#040EH	; 1038 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   254 :             PinPtr2 = PDL_NO_PTR;
$DGL	0,28
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb03_SECTA_Glyph_Map:
; line   255 :         }
; line   256 :         break;
$DGL	0,30
	br	$?L0031						;[INF] 2, 3
; line   257 : 
; line   258 :         /* Third Digit */
; line   259 :         case 3:
?L0035:
; line   260 :         {
??bb04_SECTA_Glyph_Map:
; line   261 :             PinPtr1 = &SEG15_DEF;
$DGL	0,35
	movw	ax,#040FH	; 1039 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   262 :             PinPtr2 = &SEG14_DEF;
$DGL	0,36
	decw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb04_SECTA_Glyph_Map:
; line   263 :         }    
; line   264 :         break;
; line   265 :         
; line   266 :         default:
?L0036:
; line   267 :         {
??bb05_SECTA_Glyph_Map:
??eb05_SECTA_Glyph_Map:
; line   268 :             /* nothing */
; line   269 :         }    
; line   270 :         break;
??eb00_SECTA_Glyph_Map:
; line   271 :     }
?L0031:
; line   272 :         
; line   273 :     /* Bit Mask Segments */
; line   274 :     *PinPtr1 &= 0xF0U;
$DGL	0,48
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   275 :     *PinPtr2 &= 0xF8U;
$DGL	0,49
	movw	ax,[hl]	; PinPtr2 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F8H	; 248 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   276 :     
; line   277 :     /* decimal point? */
; line   278 :     if (digit == 2)
$DGL	0,52
	movw	ax,#02H	; 2 					;[INF] 3, 1
	cmpw	ax,[hl+12]	; digit 			;[INF] 3, 1
	bnz	$?L0039						;[INF] 2, 4
; line   279 :     {
??bb06_SECTA_Glyph_Map:
; line   280 :         if (glyph == '.')
$DGL	0,54
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	cmp	a,#02EH	; 46 					;[INF] 2, 1
	bnz	$?L0041						;[INF] 2, 4
; line   281 :         {
??bb07_SECTA_Glyph_Map:
; line   282 :             /* Turn on Decimal Point */
; line   283 :             *PinPtr1 |= 0x08U;
$DGL	0,57
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb07_SECTA_Glyph_Map:
; line   284 :         }
; line   285 :         else
$DGL	0,59
	br	$?L0042						;[INF] 2, 3
?L0041:
; line   286 :         {
??bb08_SECTA_Glyph_Map:
; line   287 :             /* Turn off Decimal Point */
; line   288 :             *PinPtr1 &= 0xF7U;
$DGL	0,62
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F7H	; 247 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb08_SECTA_Glyph_Map:
; line   289 :         }
?L0042:
??eb06_SECTA_Glyph_Map:
; line   290 :     }
; line   291 :     else if (glyph != 0x29)
$DGL	0,65
	br	$?L0040						;[INF] 2, 3
?L0039:
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	cmp	a,#029H	; 41 					;[INF] 2, 1
	bz	$?L0043						;[INF] 2, 4
; line   292 :     { 
??bb09_SECTA_Glyph_Map:
; line   293 :         /* Digit-Segment Mapping */
; line   294 :         *PinPtr1 |= (uint8_t)SECTA_map[glyph].BYTE.TWO;
$DGL	0,68
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTA_map[bc]				;[INF] 3, 1
	shr	a,4						;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   295 :         *PinPtr2 |= (uint8_t)SECTA_map[glyph].BYTE.ONE;
$DGL	0,69
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTA_map[bc]				;[INF] 3, 1
	and	a,#0FH	; 15 					;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl]	; PinPtr2 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb09_SECTA_Glyph_Map:
; line   296 :     }
; line   297 :     else
?L0043:
; line   298 :     {
??bb0A_SECTA_Glyph_Map:
??eb0A_SECTA_Glyph_Map:
; line   299 :         /* Do nothing */
; line   300 :     }
?L0044:
?L0040:
; line   301 : 
; line   302 : }
$DGL	0,76
??ef_SECTA_Glyph_Map:
	addw	sp,#06H						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_SECTA_Glyph_Map:
; line   303 : /***************************************************************
;              ********************************************************
; line   304 : End of function SECTA_Glyph_Map
; line   305 : ****************************************************************
;              *******************************************************/
; line   306 : /***************************************************************
;              ********************************************************
; line   307 : * Function Name : SECTB_Glyph_Map
; line   308 : * Description   : Takes a validated char input and maps the char
;              acter to a 
; line   309 : *                 segment pattern, to be displayed on Section B 
;              of the LCD panel.
; line   310 : * Arguments     : character to be displayed, digit position of c
;              haracter
; line   311 : * Return Value  : none
; line   312 : ****************************************************************
;              *******************************************************/
; line   313 : void SECTB_Glyph_Map (const uint8_t glyph, const uint16_t digit)
; line   314 : {
_SECTB_Glyph_Map:
$DGL	1,173
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	subw	sp,#04H						;[INF] 2, 1
	movw	hl,sp						;[INF] 3, 1
??bf_SECTB_Glyph_Map:
; line   315 :     /* Declare Pointers */
; line   316 :     volatile uint8_t * PinPtr1 = PDL_NO_PTR;
$DGL	0,3
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   317 :     volatile uint8_t * PinPtr2 = PDL_NO_PTR;
$DGL	0,4
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
; line   318 :     
; line   319 :     /* Set Pointers to Current Digit Pins */
; line   320 :     switch (digit)
$DGL	0,7
	movw	ax,[hl+12]	; digit 			;[INF] 2, 1
	cmpw	ax,#07H	; 7 					;[INF] 3, 1
	skc							;[INF] 2, 1
	br	$!?L0055					;[INF] 3, 3
	movw	bc,ax						;[INF] 1, 1
	mov	a,?L0057+14[bc]					;[INF] 3, 1
	shlw	bc,1						;[INF] 2, 1
	mov	CS,a						;[INF] 2, 1
	movw	ax,?L0057[bc]					;[INF] 3, 1
	br	ax						;[INF] 2, 3
; line   321 :     {
??bb00_SECTB_Glyph_Map:
; line   322 :         /* First Digit */    
; line   323 :         case 0:
?L0048:
; line   324 :         {
??bb01_SECTB_Glyph_Map:
; line   325 :             PinPtr1 = &SEG28_DEF;
$DGL	0,12
	movw	ax,#041DH	; 1053 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   326 :             PinPtr2 = &SEG29_DEF;
$DGL	0,13
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb01_SECTB_Glyph_Map:
; line   327 :         }
; line   328 :         break;
$DGL	0,15
	br	$?L0047						;[INF] 2, 3
; line   329 : 
; line   330 :         /* Second Digit */        
; line   331 :         case 1:
?L0049:
; line   332 :         {
??bb02_SECTB_Glyph_Map:
; line   333 :             PinPtr1 = &SEG26_DEF;
$DGL	0,20
	movw	ax,#041BH	; 1051 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   334 :             PinPtr2 = &SEG27_DEF;
$DGL	0,21
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb02_SECTB_Glyph_Map:
; line   335 :         }    
; line   336 :         break;
$DGL	0,23
	br	$?L0047						;[INF] 2, 3
; line   337 :         
; line   338 :         /* Third Digit */
; line   339 :         case 2:
?L0050:
; line   340 :         {
??bb03_SECTB_Glyph_Map:
; line   341 :             PinPtr1 = &SEG24_DEF;
$DGL	0,28
	movw	ax,#0418H	; 1048 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   342 :             PinPtr2 = &SEG25_DEF;
$DGL	0,29
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb03_SECTB_Glyph_Map:
; line   343 :         }    
; line   344 :         break;
$DGL	0,31
	br	$?L0047						;[INF] 2, 3
; line   345 :         
; line   346 :         /* Colon/Decimal Point */
; line   347 :         case 3:
?L0051:
; line   348 :         {
??bb04_SECTB_Glyph_Map:
; line   349 :             PinPtr1 = &SEG23_DEF;
$DGL	0,36
	movw	ax,#0417H	; 1047 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   350 :             PinPtr2 = PDL_NO_PTR;
$DGL	0,37
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb04_SECTB_Glyph_Map:
; line   351 :         }    
; line   352 :         break;
$DGL	0,39
	br	$?L0047						;[INF] 2, 3
; line   353 :         
; line   354 :         /* Fourth Digit */        
; line   355 :         case 4:
?L0052:
; line   356 :         {
??bb05_SECTB_Glyph_Map:
; line   357 :             PinPtr1 = &SEG21_DEF;
$DGL	0,44
	movw	ax,#0415H	; 1045 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   358 :             PinPtr2 = &SEG22_DEF;
$DGL	0,45
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb05_SECTB_Glyph_Map:
; line   359 :         }    
; line   360 :         break;
$DGL	0,47
	br	$?L0047						;[INF] 2, 3
; line   361 : 
; line   362 :         /* Fifth Digit */        
; line   363 :         case 5:
?L0053:
; line   364 :         {
??bb06_SECTB_Glyph_Map:
; line   365 :             PinPtr1 = &SEG19_DEF;
$DGL	0,52
	movw	ax,#0413H	; 1043 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   366 :             PinPtr2 = &SEG20_DEF;
$DGL	0,53
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
??eb06_SECTB_Glyph_Map:
; line   367 :         }    
; line   368 :         break;
$DGL	0,55
	br	$?L0047						;[INF] 2, 3
; line   369 :         
; line   370 :         /* AM/PM Indicator */
; line   371 :         case 6:
?L0054:
; line   372 :         {
??bb07_SECTB_Glyph_Map:
; line   373 :             /* Nullify Pointers */
; line   374 :             PinPtr1 = PDL_NO_PTR;
$DGL	0,61
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl+2],ax	; PinPtr1 			;[INF] 2, 1
; line   375 :             PinPtr2 = PDL_NO_PTR;
$DGL	0,62
	movw	[hl],ax	; PinPtr2 				;[INF] 1, 1
; line   376 :             
; line   377 :             /* If last digit is A */
; line   378 :             if (glyph == 0x0E)
$DGL	0,65
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	cmp	a,#0EH	; 14 					;[INF] 2, 1
	bnz	$?L0058						;[INF] 2, 4
; line   379 :             {
??bb08_SECTB_Glyph_Map:
; line   380 :                /* AM Indicator On */
; line   381 :                 SEG18_DEF |= 0x01U;
$DGL	0,68
	mov	a,!SEG18					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
; line   382 :                 
; line   383 :                 /* PM Indicator Off */
; line   384 :                 SEG16_DEF &= 0xFDU;
$DGL	0,71
	mov	a,!SEG16					;[INF] 3, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb08_SECTB_Glyph_Map:
; line   385 :             }
; line   386 : 
; line   387 :             /* If last digit is P */
; line   388 :             else if (glyph == 0x1DU)
$DGL	0,75
	br	$?L0059						;[INF] 2, 3
?L0058:
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	cmp	a,#01DH	; 29 					;[INF] 2, 1
	bnz	$?L0060						;[INF] 2, 4
; line   389 :             {
??bb09_SECTB_Glyph_Map:
; line   390 :                 /* AM Indicator Off */
; line   391 :                 SEG18_DEF &= 0xFEU;
$DGL	0,78
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
; line   392 :                 
; line   393 :                 /* PM Indicator On */
; line   394 :                 SEG16_DEF |= 0x02U;
$DGL	0,81
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#02H	; 2 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb09_SECTB_Glyph_Map:
; line   395 :             }
; line   396 :             
; line   397 :             /* If last digit is other */
; line   398 :             else
$DGL	0,85
	br	$?L0061						;[INF] 2, 3
?L0060:
; line   399 :             {
??bb0A_SECTB_Glyph_Map:
; line   400 :                 /* AM Indicator Off */
; line   401 :                 SEG18_DEF &= 0xFEU;
$DGL	0,88
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
; line   402 :                 
; line   403 :                 /* PM Indicator Off */
; line   404 :                 SEG16_DEF &= 0xFDU;
$DGL	0,91
	mov	a,!SEG16					;[INF] 3, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb0A_SECTB_Glyph_Map:
; line   405 :             }
?L0061:
?L0059:
??eb07_SECTB_Glyph_Map:
; line   406 :         }    
; line   407 :         break;
; line   408 :         
; line   409 :         /* Handles undefined cases */
; line   410 :         default:
?L0055:
; line   411 :         {
??bb0B_SECTB_Glyph_Map:
??eb0B_SECTB_Glyph_Map:
; line   412 :             /* Do nothing */
; line   413 :         }
; line   414 :         break;
??eb00_SECTB_Glyph_Map:
; line   415 :     }
?L0047:
; line   416 : 
; line   417 :     /* Bit Mask Segments */
; line   418 :     *PinPtr1 &= 0xF0U;
$DGL	0,105
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   419 :     *PinPtr2 &= 0xF1U;
$DGL	0,106
	movw	ax,[hl]	; PinPtr2 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F1H	; 241 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   420 :         
; line   421 :     /* Is colon/decimal point ? */
; line   422 :     if (digit == 3)
$DGL	0,109
	movw	ax,#03H	; 3 					;[INF] 3, 1
	cmpw	ax,[hl+12]	; digit 			;[INF] 3, 1
	bnz	$?L0062						;[INF] 2, 4
; line   423 :     {    
??bb0C_SECTB_Glyph_Map:
; line   424 :         /* Is Colon? */
; line   425 :         if (glyph == ':')
$DGL	0,112
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	cmp	a,#03AH	; 58 					;[INF] 2, 1
	bnz	$?L0064						;[INF] 2, 4
; line   426 :         {
??bb0D_SECTB_Glyph_Map:
; line   427 :             /* Turn on Colon */
; line   428 :             *PinPtr1 |= 0x02U;
$DGL	0,115
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#02H	; 2 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb0D_SECTB_Glyph_Map:
; line   429 :         }
; line   430 : 
; line   431 :         /* Is Decimal Point? */
; line   432 :         else if (glyph == '.')
$DGL	0,119
	br	$?L0065						;[INF] 2, 3
?L0064:
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	cmp	a,#02EH	; 46 					;[INF] 2, 1
	bnz	$?L0066						;[INF] 2, 4
; line   433 :         {
??bb0E_SECTB_Glyph_Map:
; line   434 :             /* Turn off Colon */
; line   435 :             *PinPtr1 &= 0xFDU;
$DGL	0,122
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb0E_SECTB_Glyph_Map:
; line   436 :         }
; line   437 :         
; line   438 :         /* Is neither? */
; line   439 :         else
$DGL	0,126
	br	$?L0067						;[INF] 2, 3
?L0066:
; line   440 :         {
??bb0F_SECTB_Glyph_Map:
; line   441 :            /* Turn off Decimal Point & Colon */
; line   442 :             *PinPtr1 &= 0xFCU;
$DGL	0,129
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0FCH	; 252 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb0F_SECTB_Glyph_Map:
; line   443 :         }
?L0067:
?L0065:
??eb0C_SECTB_Glyph_Map:
; line   444 :     }
; line   445 :     else if (glyph != 0x29)
$DGL	0,132
	br	$?L0063						;[INF] 2, 3
?L0062:
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	cmp	a,#029H	; 41 					;[INF] 2, 1
	bz	$?L0068						;[INF] 2, 4
; line   446 :     {
??bb10_SECTB_Glyph_Map:
; line   447 :         /* Map Glyph to Segments */
; line   448 :         *PinPtr1 |= (uint8_t)SECTB_map[glyph].BYTE.TWO;
$DGL	0,135
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTB_map[bc]				;[INF] 3, 1
	shr	a,4						;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl+2]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   449 :         *PinPtr2 |= (uint8_t)SECTB_map[glyph].BYTE.ONE;
$DGL	0,136
	mov	a,[hl+4]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTB_map[bc]				;[INF] 3, 1
	and	a,#0FH	; 15 					;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl]	; PinPtr2 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb10_SECTB_Glyph_Map:
; line   450 :     }
; line   451 :     else
?L0068:
; line   452 :     {
??bb11_SECTB_Glyph_Map:
??eb11_SECTB_Glyph_Map:
; line   453 :         /* Do nothing */
; line   454 :     }
?L0069:
?L0063:
; line   455 : }
$DGL	0,142
??ef_SECTB_Glyph_Map:
	addw	sp,#06H						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_SECTB_Glyph_Map:
; line   456 : /***************************************************************
;              ********************************************************
; line   457 : End of function SECTB_Glyph_Map
; line   458 : ****************************************************************
;              *******************************************************/
; line   459 : 
; line   460 : /***************************************************************
;              ********************************************************
; line   461 : * Function Name : SECTC_Glyph_Map
; line   462 : * Description   : Takes a validated char input and maps the char
;              acter to a 
; line   463 : *                 segment pattern, to be displayed on Section C 
;              of the LCD panel.
; line   464 : * Arguments     : uint8_t glyph 
; line   465 : *                            - character to be displayed, 
; line   466 :                   uint16_t digit 
; line   467 : *                            - position of character
; line   468 : * Return Value  : none
; line   469 : ****************************************************************
;              *******************************************************/
; line   470 : void SECTC_Glyph_Map (const uint8_t glyph, const uint16_t digit)
; line   471 : {
_SECTC_Glyph_Map:
$DGL	1,257
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	subw	sp,#08H						;[INF] 2, 1
	movw	hl,sp						;[INF] 3, 1
??bf_SECTC_Glyph_Map:
; line   472 :     /* Declare Pin Address Pointers */
; line   473 :     volatile uint8_t * PinPtr1 = PDL_NO_PTR;
$DGL	0,3
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl+6],ax	; PinPtr1 			;[INF] 2, 1
; line   474 :     volatile uint8_t * PinPtr2 = PDL_NO_PTR;
$DGL	0,4
	movw	[hl+4],ax	; PinPtr2 			;[INF] 2, 1
; line   475 :     volatile uint8_t * PinPtr3 = PDL_NO_PTR;
$DGL	0,5
	movw	[hl+2],ax	; PinPtr3 			;[INF] 2, 1
; line   476 :     volatile uint8_t * PinPtr4 = PDL_NO_PTR;
$DGL	0,6
	movw	[hl],ax	; PinPtr4 				;[INF] 1, 1
; line   477 :     
; line   478 :     /* Set Pointers to Current Digit Pin Addresses */
; line   479 :     switch (digit)
$DGL	0,9
	movw	ax,[hl+16]	; digit 			;[INF] 2, 1
	cmpw	ax,#06H	; 6 					;[INF] 3, 1
	bnc	$?L0079						;[INF] 2, 4
	movw	bc,ax						;[INF] 1, 1
	mov	a,?L0081+12[bc]					;[INF] 3, 1
	shlw	bc,1						;[INF] 2, 1
	mov	CS,a						;[INF] 2, 1
	movw	ax,?L0081[bc]					;[INF] 3, 1
	br	ax						;[INF] 2, 3
; line   480 :     {    
??bb00_SECTC_Glyph_Map:
; line   481 :         /* First Digit (Specify Aux pins in order to use) */
; line   482 :         case 0:
?L0073:
; line   483 :         {
??bb01_SECTC_Glyph_Map:
; line   484 :             PinPtr1 = (uint8_t *)Aux_pin5;
$DGL	0,14
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl+6],ax	; PinPtr1 			;[INF] 2, 1
; line   485 :             PinPtr2 = (uint8_t *)Aux_pin6;
$DGL	0,15
	movw	[hl+4],ax	; PinPtr2 			;[INF] 2, 1
; line   486 :             PinPtr3 = (uint8_t *)Aux_pin47;
$DGL	0,16
	movw	[hl+2],ax	; PinPtr3 			;[INF] 2, 1
; line   487 :             PinPtr4 = (uint8_t *)Aux_pin48;
$DGL	0,17
	movw	[hl],ax	; PinPtr4 				;[INF] 1, 1
??eb01_SECTC_Glyph_Map:
; line   488 :         }
; line   489 :         break;
$DGL	0,19
	br	$?L0072						;[INF] 2, 3
; line   490 : 
; line   491 :         /* Second Digit */    
; line   492 :         case 1:
?L0074:
; line   493 :         {
??bb02_SECTC_Glyph_Map:
; line   494 :             PinPtr1 = &SEG0_DEF;
$DGL	0,24
	movw	ax,#0400H	; 1024 				;[INF] 3, 1
	movw	[hl+6],ax	; PinPtr1 			;[INF] 2, 1
; line   495 :             PinPtr2 = &SEG1_DEF;
$DGL	0,25
	incw	ax						;[INF] 1, 1
	movw	[hl+4],ax	; PinPtr2 			;[INF] 2, 1
; line   496 :             PinPtr3 = &SEG38_DEF;
$DGL	0,26
	mov	x,#027H	; 39 					;[INF] 2, 1
	movw	[hl+2],ax	; PinPtr3 			;[INF] 2, 1
??eb02_SECTC_Glyph_Map:
; line   497 :         }
; line   498 :         break;
$DGL	0,28
	br	$?L0072						;[INF] 2, 3
; line   499 :         
; line   500 :         /* Third Digit */    
; line   501 :         case 2:
?L0075:
; line   502 :         {
??bb03_SECTC_Glyph_Map:
; line   503 :             PinPtr1 = &SEG2_DEF;
$DGL	0,33
	movw	ax,#0402H	; 1026 				;[INF] 3, 1
	movw	[hl+6],ax	; PinPtr1 			;[INF] 2, 1
; line   504 :             PinPtr2 = &SEG3_DEF;
$DGL	0,34
	incw	ax						;[INF] 1, 1
	movw	[hl+4],ax	; PinPtr2 			;[INF] 2, 1
; line   505 :             PinPtr3 = &SEG36_DEF;
$DGL	0,35
	mov	x,#025H	; 37 					;[INF] 2, 1
	movw	[hl+2],ax	; PinPtr3 			;[INF] 2, 1
; line   506 :             PinPtr4 = &SEG37_DEF;
$DGL	0,36
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr4 				;[INF] 1, 1
??eb03_SECTC_Glyph_Map:
; line   507 :         }
; line   508 :         break;
$DGL	0,38
	br	$?L0072						;[INF] 2, 3
; line   509 :         
; line   510 :         /* Four Digit */    
; line   511 :         case 3:
?L0076:
; line   512 :         {
??bb04_SECTC_Glyph_Map:
; line   513 :             PinPtr1 = &SEG4_DEF;
$DGL	0,43
	movw	ax,#0404H	; 1028 				;[INF] 3, 1
	movw	[hl+6],ax	; PinPtr1 			;[INF] 2, 1
; line   514 :             PinPtr2 = &SEG5_DEF;
$DGL	0,44
	incw	ax						;[INF] 1, 1
	movw	[hl+4],ax	; PinPtr2 			;[INF] 2, 1
; line   515 :             PinPtr3 = &SEG34_DEF;
$DGL	0,45
	mov	x,#023H	; 35 					;[INF] 2, 1
	movw	[hl+2],ax	; PinPtr3 			;[INF] 2, 1
; line   516 :             PinPtr4 = &SEG35_DEF;
$DGL	0,46
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr4 				;[INF] 1, 1
??eb04_SECTC_Glyph_Map:
; line   517 :         }
; line   518 :         break;
$DGL	0,48
	br	$?L0072						;[INF] 2, 3
; line   519 :         
; line   520 :         /* Fifth Digit */
; line   521 :         case 4:
?L0077:
; line   522 :         {
??bb05_SECTC_Glyph_Map:
; line   523 :             PinPtr1 = &SEG6_DEF;
$DGL	0,53
	movw	ax,#0406H	; 1030 				;[INF] 3, 1
	movw	[hl+6],ax	; PinPtr1 			;[INF] 2, 1
; line   524 :             PinPtr2 = &SEG7_DEF;
$DGL	0,54
	incw	ax						;[INF] 1, 1
	movw	[hl+4],ax	; PinPtr2 			;[INF] 2, 1
; line   525 :             PinPtr3 = &SEG32_DEF;
$DGL	0,55
	mov	x,#021H	; 33 					;[INF] 2, 1
	movw	[hl+2],ax	; PinPtr3 			;[INF] 2, 1
; line   526 :             PinPtr4 = &SEG33_DEF;
$DGL	0,56
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr4 				;[INF] 1, 1
??eb05_SECTC_Glyph_Map:
; line   527 :         }
; line   528 :         break;
$DGL	0,58
	br	$?L0072						;[INF] 2, 3
; line   529 :         
; line   530 :         /* Sixth Digit */
; line   531 :         case 5:
?L0078:
; line   532 :         {
??bb06_SECTC_Glyph_Map:
; line   533 :             PinPtr1 = &SEG8_DEF;
$DGL	0,63
	movw	ax,#0408H	; 1032 				;[INF] 3, 1
	movw	[hl+6],ax	; PinPtr1 			;[INF] 2, 1
; line   534 :             PinPtr2 = &SEG9_DEF;
$DGL	0,64
	incw	ax						;[INF] 1, 1
	movw	[hl+4],ax	; PinPtr2 			;[INF] 2, 1
; line   535 :             PinPtr3 = &SEG30_DEF;
$DGL	0,65
	mov	x,#01FH	; 31 					;[INF] 2, 1
	movw	[hl+2],ax	; PinPtr3 			;[INF] 2, 1
; line   536 :             PinPtr4 = &SEG31_DEF;
$DGL	0,66
	incw	ax						;[INF] 1, 1
	movw	[hl],ax	; PinPtr4 				;[INF] 1, 1
??eb06_SECTC_Glyph_Map:
; line   537 :         }
; line   538 :         break;
; line   539 :         
; line   540 :         /* LCD display only has 6 alpha-numeric segments */
; line   541 :         default:
?L0079:
; line   542 :         {
??bb07_SECTC_Glyph_Map:
??eb07_SECTC_Glyph_Map:
; line   543 :             /* Bad Selection */
; line   544 :         }
; line   545 :         break;
??eb00_SECTC_Glyph_Map:
; line   546 :     }
?L0072:
; line   547 :     
; line   548 :     /* Bit Mask All Segments */
; line   549 :     *PinPtr1 &= 0xF0U;
$DGL	0,79
	movw	ax,[hl+6]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   550 :     *PinPtr2 &= 0xF0U;
$DGL	0,80
	movw	ax,[hl+4]	; PinPtr2 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   551 :     *PinPtr3 &= 0xF1U;
$DGL	0,81
	movw	ax,[hl+2]	; PinPtr3 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F1H	; 241 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   552 :     *PinPtr4 &= 0xF0U;
$DGL	0,82
	movw	ax,[hl]	; PinPtr4 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   553 :     
; line   554 :     /* Check if glyph is not 0x29 */
; line   555 :     if (glyph != 0x29)   /* LA8A is 0x28 */
$DGL	0,85
	mov	a,[hl+8]	; glyph 			;[INF] 2, 1
	cmp	a,#029H	; 41 					;[INF] 2, 1
	bz	$?L0082						;[INF] 2, 4
; line   556 :     {
??bb08_SECTC_Glyph_Map:
; line   557 :         /* Map Glyph To Segments */
; line   558 :         *PinPtr4 |= (uint8_t)SECTC_map[glyph].BYTE.ONE;
$DGL	0,88
	mov	a,[hl+8]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTC_map[bc]				;[INF] 3, 1
	and	a,#0FH	; 15 					;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl]	; PinPtr4 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   559 :         *PinPtr3 |= (uint8_t)SECTC_map[glyph].BYTE.TWO;
$DGL	0,89
	mov	a,[hl+8]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTC_map[bc]				;[INF] 3, 1
	shr	a,4						;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl+2]	; PinPtr3 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   560 :         *PinPtr2 |= (uint8_t)SECTC_map[glyph].BYTE.THREE;
$DGL	0,90
	mov	a,[hl+8]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTC_map+1[bc]				;[INF] 3, 1
	and	a,#0FH	; 15 					;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl+4]	; PinPtr2 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   561 :         *PinPtr1 |= (uint8_t)SECTC_map[glyph].BYTE.FOUR;
$DGL	0,91
	mov	a,[hl+8]	; glyph 			;[INF] 2, 1
	clrb	x						;[INF] 1, 1
	shrw	ax,6						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,_SECTC_map+1[bc]				;[INF] 3, 1
	shr	a,4						;[INF] 2, 1
	mov	c,a						;[INF] 1, 1
	movw	ax,[hl+6]	; PinPtr1 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
??eb08_SECTC_Glyph_Map:
; line   562 :     }
?L0082:
?L0083:
; line   563 : }
$DGL	0,93
??ef_SECTC_Glyph_Map:
	addw	sp,#0AH						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_SECTC_Glyph_Map:
; line   564 : /***************************************************************
;              ********************************************************
; line   565 : End of function SECTC_Glyph_Map
; line   566 : ****************************************************************
;              *******************************************************/
; line   567 : 
; line   568 : 
; line   569 : /***************************************************************
;              ********************************************************
; line   570 : Function Name : SECTD_Glyph_Map
; line   571 : Description   : Takes a number input, and sets the level of the 
;              battery indicator (section D)
; line   572 : Argument      : uint8_t level 
; line   573 : *                  - Indicator Level (char)
; line   574 : Return Values : None
; line   575 : ****************************************************************
;              *******************************************************/
; line   576 : void SECTD_Glyph_Map (const uint8_t level)
; line   577 : {
_SECTD_Glyph_Map:
$DGL	1,309
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	movw	hl,sp						;[INF] 3, 1
??bf_SECTD_Glyph_Map:
; line   578 :     /* Switch to segment option */
; line   579 :     switch (level)
$DGL	0,3
	mov	a,[hl]	; level 				;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	cmpw	ax,#05H	; 5 					;[INF] 3, 1
	skc							;[INF] 2, 1
	br	$!?L0092					;[INF] 3, 3
	movw	bc,ax						;[INF] 1, 1
	mov	a,?L0094+10[bc]					;[INF] 3, 1
	shlw	bc,1						;[INF] 2, 1
	mov	CS,a						;[INF] 2, 1
	movw	ax,?L0094[bc]					;[INF] 3, 1
	br	ax						;[INF] 2, 3
; line   580 :     {    
??bb00_SECTD_Glyph_Map:
; line   581 :         /* Battery Outline On */    
; line   582 :         case 0:
?L0087:
; line   583 :         {
??bb01_SECTD_Glyph_Map:
; line   584 :             SEG17_DEF &= 0xF0U;
$DGL	0,8
	mov	a,!SEG17					;[INF] 3, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   585 :             SEG16_DEF |= 0x01U;
$DGL	0,9
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb01_SECTD_Glyph_Map:
; line   586 :         }
; line   587 :         break;
$DGL	0,11
	br	$?L0086						;[INF] 2, 3
; line   588 :         
; line   589 :         /* Battery Outline & 1 Level */
; line   590 :         case 1:
?L0088:
; line   591 :         {
??bb02_SECTD_Glyph_Map:
; line   592 :             SEG17_DEF &= 0xF0U;
$DGL	0,16
	mov	a,!SEG17					;[INF] 3, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   593 :             SEG17_DEF |= 0x08U;
$DGL	0,17
	mov	a,!SEG17					;[INF] 3, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   594 :             SEG16_DEF |= 0x01U;
$DGL	0,18
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb02_SECTD_Glyph_Map:
; line   595 :         }
; line   596 :         break; 
$DGL	0,20
	br	$?L0086						;[INF] 2, 3
; line   597 :         
; line   598 :         /* Battery Outline & 2 Levels */
; line   599 :         case 2:
?L0089:
; line   600 :         {
??bb03_SECTD_Glyph_Map:
; line   601 :             SEG17_DEF &= 0xF0U;
$DGL	0,25
	mov	a,!SEG17					;[INF] 3, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   602 :             SEG17_DEF |= 0x0CU;
$DGL	0,26
	mov	a,!SEG17					;[INF] 3, 1
	or	a,#0CH	; 12 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   603 :             SEG16_DEF |= 0x01U;
$DGL	0,27
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb03_SECTD_Glyph_Map:
; line   604 :         }
; line   605 :         break;
$DGL	0,29
	br	$?L0086						;[INF] 2, 3
; line   606 :         
; line   607 :         /* Battery Outline & 3 Levels */
; line   608 :         case 3:
?L0090:
; line   609 :         {
??bb04_SECTD_Glyph_Map:
; line   610 :             SEG17_DEF &= 0xF0U;
$DGL	0,34
	mov	a,!SEG17					;[INF] 3, 1
	and	a,#0F0H	; 240 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   611 :             SEG17_DEF |= 0x0EU;
$DGL	0,35
	mov	a,!SEG17					;[INF] 3, 1
	or	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   612 :             SEG16_DEF |= 0x01U;
$DGL	0,36
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb04_SECTD_Glyph_Map:
; line   613 :         }
; line   614 :         break;    
$DGL	0,38
	br	$?L0086						;[INF] 2, 3
; line   615 :         
; line   616 :         /* Battery Outline & All Levels */
; line   617 :         case 4:
?L0091:
; line   618 :         {
??bb05_SECTD_Glyph_Map:
; line   619 :             SEG17_DEF |= 0x0FU;
$DGL	0,43
	mov	a,!SEG17					;[INF] 3, 1
	or	a,#0FH	; 15 					;[INF] 2, 1
	mov	!SEG17,a					;[INF] 3, 1
; line   620 :             SEG16_DEF |= 0x01U;
$DGL	0,44
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb05_SECTD_Glyph_Map:
; line   621 :         }
; line   622 :         break;
; line   623 :         
; line   624 :         default:
?L0092:
; line   625 :         {
??bb06_SECTD_Glyph_Map:
??eb06_SECTD_Glyph_Map:
; line   626 :             /* Bad Selection */
; line   627 :         }
; line   628 :         break;
??eb00_SECTD_Glyph_Map:
; line   629 :     }
?L0086:
; line   630 : }
$DGL	0,54
??ef_SECTD_Glyph_Map:
	pop	ax						;[INF] 1, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_SECTD_Glyph_Map:
; line   631 : /***************************************************************
;              ********************************************************
; line   632 : End of function SECTD_Glyph_Map
; line   633 : ****************************************************************
;              *******************************************************/
; line   634 : 
; line   635 : /***************************************************************
;              ********************************************************
; line   636 : * Function Name : SECTE_Glyph_Map
; line   637 : * Description    : Takes a number input, and sets the level of t
;              he bar graph (Section E)
; line   638 : * Argument      : int16_t Bar Graph Level
; line   639 : * Return Values : None
; line   640 : ****************************************************************
;              *******************************************************/
; line   641 : void SECTE_Glyph_Map (const uint16_t level)
; line   642 : {
_SECTE_Glyph_Map:
$DGL	1,344
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	subw	sp,#04H						;[INF] 2, 1
	movw	hl,sp						;[INF] 3, 1
??bf_SECTE_Glyph_Map:
; line   643 :     /* Initialise Missing Pin Pointers */
; line   644 :     uint8_t * const Pin47Ptr = (uint8_t *)Aux_pin47;
$DGL	0,3
	movw	ax,#0FFFFH	; -1 				;[INF] 3, 1
	movw	[hl+2],ax	; Pin47Ptr 			;[INF] 2, 1
; line   645 :     uint8_t * const Pin48Ptr = (uint8_t *)Aux_pin48;
$DGL	0,4
	movw	[hl],ax	; Pin48Ptr 				;[INF] 1, 1
; line   646 :     
; line   647 :     /* Switch to segment option */
; line   648 :     switch (level)
$DGL	0,7
	movw	ax,[hl+4]	; level 			;[INF] 2, 1
	cmpw	ax,#07H	; 7 					;[INF] 3, 1
	skc							;[INF] 2, 1
	br	$!?L0105					;[INF] 3, 3
	movw	bc,ax						;[INF] 1, 1
	mov	a,?L0107+14[bc]					;[INF] 3, 1
	shlw	bc,1						;[INF] 2, 1
	mov	CS,a						;[INF] 2, 1
	movw	ax,?L0107[bc]					;[INF] 3, 1
	br	ax						;[INF] 2, 3
; line   649 :     {
??bb00_SECTE_Glyph_Map:
; line   650 :         /* All Bars Off */
; line   651 :         case 0:
?L0098:
; line   652 :         {
??bb01_SECTE_Glyph_Map:
; line   653 :             *Pin47Ptr &= 0xFEU;
$DGL	0,12
	movw	ax,[hl+2]	; Pin47Ptr 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   654 :             *Pin48Ptr &= 0xFEU;
$DGL	0,13
	movw	ax,[hl]	; Pin48Ptr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   655 :             SEG38_DEF &= 0xFEU;
$DGL	0,14
	mov	a,!SEG38					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG38,a					;[INF] 3, 1
; line   656 :             SEG37_DEF &= 0xFEU;
$DGL	0,15
	mov	a,!SEG37					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG37,a					;[INF] 3, 1
; line   657 :             SEG36_DEF &= 0xFEU;
$DGL	0,16
	mov	a,!SEG36					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG36,a					;[INF] 3, 1
??eb01_SECTE_Glyph_Map:
; line   658 :         }
; line   659 :         break;
$DGL	0,18
	br	$!?L0097					;[INF] 3, 3
; line   660 :         
; line   661 :         /* First Bar Only */
; line   662 :         case 1:
?L0099:
; line   663 :         {
??bb02_SECTE_Glyph_Map:
; line   664 :             *Pin47Ptr |= 0x01U;
$DGL	0,23
	movw	ax,[hl+2]	; Pin47Ptr 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   665 :             *Pin48Ptr &= 0xFEU;
$DGL	0,24
	movw	ax,[hl]	; Pin48Ptr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   666 :             SEG38_DEF &= 0xFEU;
$DGL	0,25
	mov	a,!SEG38					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG38,a					;[INF] 3, 1
; line   667 :             SEG37_DEF &= 0xFEU;
$DGL	0,26
	mov	a,!SEG37					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG37,a					;[INF] 3, 1
; line   668 :             SEG36_DEF &= 0xFEU;
$DGL	0,27
	mov	a,!SEG36					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG36,a					;[INF] 3, 1
??eb02_SECTE_Glyph_Map:
; line   669 :         }
; line   670 :         break;
$DGL	0,29
	br	$!?L0097					;[INF] 3, 3
; line   671 :         
; line   672 :         /* Bars 1 - 2 */
; line   673 :         case 2:
?L0100:
; line   674 :         {
??bb03_SECTE_Glyph_Map:
; line   675 :             *Pin47Ptr |= 0x01U;
$DGL	0,34
	movw	ax,[hl+2]	; Pin47Ptr 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   676 :             *Pin48Ptr |= 0x01U;
$DGL	0,35
	movw	ax,[hl]	; Pin48Ptr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   677 :             SEG38_DEF &= 0xFEU;
$DGL	0,36
	mov	a,!SEG38					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG38,a					;[INF] 3, 1
; line   678 :             SEG37_DEF &= 0xFEU;
$DGL	0,37
	mov	a,!SEG37					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG37,a					;[INF] 3, 1
; line   679 :             SEG36_DEF &= 0xFEU;
$DGL	0,38
	mov	a,!SEG36					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG36,a					;[INF] 3, 1
??eb03_SECTE_Glyph_Map:
; line   680 :         }
; line   681 :         break;
$DGL	0,40
	br	$!?L0097					;[INF] 3, 3
; line   682 :         
; line   683 :         /* Bars 1 - 3 */
; line   684 :         case 3:
?L0101:
; line   685 :         {
??bb04_SECTE_Glyph_Map:
; line   686 :             *Pin47Ptr |= 0x01U;
$DGL	0,45
	movw	ax,[hl+2]	; Pin47Ptr 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   687 :             *Pin48Ptr |= 0x01U;
$DGL	0,46
	movw	ax,[hl]	; Pin48Ptr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   688 :             SEG38_DEF &= 0xFEU;
$DGL	0,47
	mov	a,!SEG38					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG38,a					;[INF] 3, 1
; line   689 :             SEG37_DEF &= 0xFEU;
$DGL	0,48
	mov	a,!SEG37					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG37,a					;[INF] 3, 1
; line   690 :             SEG36_DEF &= 0xFEU;
$DGL	0,49
	mov	a,!SEG36					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG36,a					;[INF] 3, 1
??eb04_SECTE_Glyph_Map:
; line   691 :         }
; line   692 :         break;
$DGL	0,51
	br	$?L0097						;[INF] 2, 3
; line   693 :         
; line   694 :         /* Bars 1 - 4 */
; line   695 :         case 4:
?L0102:
; line   696 :         {
??bb05_SECTE_Glyph_Map:
; line   697 :             *Pin47Ptr |= 0x01U;
$DGL	0,56
	movw	ax,[hl+2]	; Pin47Ptr 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   698 :             *Pin48Ptr |= 0x01U;
$DGL	0,57
	movw	ax,[hl]	; Pin48Ptr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   699 :             SEG38_DEF |= 0x01U;
$DGL	0,58
	mov	a,!SEG38					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG38,a					;[INF] 3, 1
; line   700 :             SEG37_DEF &= 0xFEU;
$DGL	0,59
	mov	a,!SEG37					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG37,a					;[INF] 3, 1
; line   701 :             SEG36_DEF &= 0xFEU;
$DGL	0,60
	mov	a,!SEG36					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG36,a					;[INF] 3, 1
??eb05_SECTE_Glyph_Map:
; line   702 :         }
; line   703 :         break;
$DGL	0,62
	br	$?L0097						;[INF] 2, 3
; line   704 :         
; line   705 :         /* Bars 1 - 5 */
; line   706 :         case 5:
?L0103:
; line   707 :         {
??bb06_SECTE_Glyph_Map:
; line   708 :             *Pin47Ptr |= 0x01U;
$DGL	0,67
	movw	ax,[hl+2]	; Pin47Ptr 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   709 :             *Pin48Ptr |= 0x01U;
$DGL	0,68
	movw	ax,[hl]	; Pin48Ptr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   710 :             SEG38_DEF |= 0x01U;
$DGL	0,69
	mov	a,!SEG38					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG38,a					;[INF] 3, 1
; line   711 :             SEG37_DEF |= 0x01U;
$DGL	0,70
	mov	a,!SEG37					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG37,a					;[INF] 3, 1
; line   712 :             SEG36_DEF &= 0xFEU;
$DGL	0,71
	mov	a,!SEG36					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG36,a					;[INF] 3, 1
??eb06_SECTE_Glyph_Map:
; line   713 :         }
; line   714 :         break; 
$DGL	0,73
	br	$?L0097						;[INF] 2, 3
; line   715 :         
; line   716 :         /* All Levels */
; line   717 :         case 6:
?L0104:
; line   718 :         {
??bb07_SECTE_Glyph_Map:
; line   719 :             *Pin47Ptr |= 0x01U;
$DGL	0,78
	movw	ax,[hl+2]	; Pin47Ptr 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   720 :             *Pin48Ptr |= 0x01U;
$DGL	0,79
	movw	ax,[hl]	; Pin48Ptr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	[de],a						;[INF] 1, 1
; line   721 :             SEG38_DEF |= 0x01U;
$DGL	0,80
	mov	a,!SEG38					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG38,a					;[INF] 3, 1
; line   722 :             SEG37_DEF |= 0x01U;
$DGL	0,81
	mov	a,!SEG37					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG37,a					;[INF] 3, 1
; line   723 :             SEG36_DEF |= 0x01U;
$DGL	0,82
	mov	a,!SEG36					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG36,a					;[INF] 3, 1
??eb07_SECTE_Glyph_Map:
; line   724 :         }
; line   725 :         break;
; line   726 :         
; line   727 :         default:
?L0105:
; line   728 :         {
??bb08_SECTE_Glyph_Map:
??eb08_SECTE_Glyph_Map:
; line   729 :             /* Bad Selection */
; line   730 :         }
; line   731 :         break;
??eb00_SECTE_Glyph_Map:
; line   732 :     }
?L0097:
; line   733 : }
$DGL	0,92
??ef_SECTE_Glyph_Map:
	addw	sp,#06H						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_SECTE_Glyph_Map:
; line   734 : /***************************************************************
;              ********************************************************
; line   735 : End of function SECTE_Glyph_Map
; line   736 : ****************************************************************
;              *******************************************************/
; line   737 : 
; line   738 : /***************************************************************
;              ********************************************************
; line   739 : * Function Name : SECTF_Glyph_Map
; line   740 : * Description   : Sets the week calendar (Section F) based on a 
;              number input
; line   741 : *                 0: OFF            4: Thursday
; line   742 : *                 1: Monday         5: Friday    
; line   743 : *                 2: Tuesday        6: Saturday
; line   744 : *                 3: Wednesday      7: Sunday
; line   745 : * Arguments     : uint8_t day - character to be displayed, digit
;               position of character
; line   746 : * Return Value  : None
; line   747 : ****************************************************************
;              *******************************************************/
; line   748 : void SECTF_Glyph_Map (const uint8_t day)
; line   749 : {    
_SECTF_Glyph_Map:
$DGL	1,391
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	movw	hl,sp						;[INF] 3, 1
??bf_SECTF_Glyph_Map:
; line   750 :    /* Switch to segment option */
; line   751 :     switch (day)
$DGL	0,3
	mov	a,[hl]	; day 					;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	cmpw	ax,#08H	; 8 					;[INF] 3, 1
	skc							;[INF] 2, 1
	br	$!?L0119					;[INF] 3, 3
	movw	bc,ax						;[INF] 1, 1
	mov	a,?L0121+16[bc]					;[INF] 3, 1
	shlw	bc,1						;[INF] 2, 1
	mov	CS,a						;[INF] 2, 1
	movw	ax,?L0121[bc]					;[INF] 3, 1
	br	ax						;[INF] 2, 3
; line   752 :     {
??bb00_SECTF_Glyph_Map:
; line   753 :          /* All Days Off */
; line   754 :         case 0:
?L0111:
; line   755 :         {    
??bb01_SECTF_Glyph_Map:
; line   756 :             SEG25_DEF &= 0x0EU;
$DGL	0,8
	mov	a,!SEG25					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   757 :             SEG23_DEF &= 0x03U;
$DGL	0,9
	mov	a,!SEG23					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   758 :             SEG22_DEF &= 0x0EU;
$DGL	0,10
	mov	a,!SEG22					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   759 :             SEG20_DEF &= 0x0EU;
$DGL	0,11
	mov	a,!SEG20					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   760 :             SEG18_DEF &= 0x03U;
$DGL	0,12
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb01_SECTF_Glyph_Map:
; line   761 :         }    
; line   762 :         break;
$DGL	0,14
	br	$!?L0110					;[INF] 3, 3
; line   763 :         
; line   764 :         /* Monday Lit */
; line   765 :         case 1:
?L0112:
; line   766 :         {    
??bb02_SECTF_Glyph_Map:
; line   767 :             SEG25_DEF &= 0x0EU;
$DGL	0,19
	mov	a,!SEG25					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   768 :             SEG23_DEF &= 0x03U;
$DGL	0,20
	mov	a,!SEG23					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   769 :             SEG23_DEF |= 0x08U;
$DGL	0,21
	mov	a,!SEG23					;[INF] 3, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   770 :             SEG22_DEF &= 0x0EU;
$DGL	0,22
	mov	a,!SEG22					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   771 :             SEG20_DEF &= 0x0EU;
$DGL	0,23
	mov	a,!SEG20					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   772 :             SEG18_DEF &= 0x03U;
$DGL	0,24
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb02_SECTF_Glyph_Map:
; line   773 :         }    
; line   774 :         break;
$DGL	0,26
	br	$!?L0110					;[INF] 3, 3
; line   775 :         
; line   776 :         /* Tuesday Lit */
; line   777 :         case 2:
?L0113:
; line   778 :         {   
??bb03_SECTF_Glyph_Map:
; line   779 :             SEG25_DEF &= 0x0EU;
$DGL	0,31
	mov	a,!SEG25					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   780 :             SEG23_DEF &= 0x03U;
$DGL	0,32
	mov	a,!SEG23					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   781 :             SEG23_DEF |= 0x04U;
$DGL	0,33
	mov	a,!SEG23					;[INF] 3, 1
	or	a,#04H	; 4 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   782 :             SEG22_DEF &= 0x0EU;
$DGL	0,34
	mov	a,!SEG22					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   783 :             SEG20_DEF &= 0x0EU;
$DGL	0,35
	mov	a,!SEG20					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   784 :             SEG18_DEF &= 0x03U;
$DGL	0,36
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb03_SECTF_Glyph_Map:
; line   785 :         }   
; line   786 :         break;
$DGL	0,38
	br	$!?L0110					;[INF] 3, 3
; line   787 :         
; line   788 :         /* Wednesday Lit */
; line   789 :         case 3:
?L0114:
; line   790 :         {    
??bb04_SECTF_Glyph_Map:
; line   791 :             SEG25_DEF &= 0x0EU;
$DGL	0,43
	mov	a,!SEG25					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   792 :             SEG31_DEF &= 0x03U;
$DGL	0,44
	mov	a,!SEG31					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG31,a					;[INF] 3, 1
; line   793 :             SEG22_DEF |= 0x01U;
$DGL	0,45
	mov	a,!SEG22					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   794 :             SEG20_DEF &= 0x0EU;
$DGL	0,46
	mov	a,!SEG20					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   795 :             SEG18_DEF &= 0x03U;
$DGL	0,47
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb04_SECTF_Glyph_Map:
; line   796 :         }    
; line   797 :         break;
$DGL	0,49
	br	$!?L0110					;[INF] 3, 3
; line   798 : 
; line   799 :         /* Thursday Lit */
; line   800 :         case 4:
?L0115:
; line   801 :         {   
??bb05_SECTF_Glyph_Map:
; line   802 :             SEG25_DEF &= 0x0EU;
$DGL	0,54
	mov	a,!SEG25					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   803 :             SEG23_DEF &= 0x03U;
$DGL	0,55
	mov	a,!SEG23					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   804 :             SEG22_DEF &= 0x0EU;
$DGL	0,56
	mov	a,!SEG22					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   805 :             SEG20_DEF |= 0x01U;
$DGL	0,57
	mov	a,!SEG20					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   806 :             SEG18_DEF &= 0x03U;
$DGL	0,58
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb05_SECTF_Glyph_Map:
; line   807 :         }    
; line   808 :         break;
$DGL	0,60
	br	$!?L0110					;[INF] 3, 3
; line   809 :     
; line   810 :         /* Friday Lit */
; line   811 :         case 5:
?L0116:
; line   812 :         {    
??bb06_SECTF_Glyph_Map:
; line   813 :             SEG25_DEF &= 0x0EU;
$DGL	0,65
	mov	a,!SEG25					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   814 :             SEG23_DEF &= 0x03U;
$DGL	0,66
	mov	a,!SEG23					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   815 :             SEG22_DEF &= 0x0EU;
$DGL	0,67
	mov	a,!SEG22					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   816 :             SEG20_DEF &= 0x0EU;
$DGL	0,68
	mov	a,!SEG20					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   817 :             SEG18_DEF &= 0x03U;
$DGL	0,69
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
; line   818 :             SEG18_DEF |= 0x08U;
$DGL	0,70
	mov	a,!SEG18					;[INF] 3, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb06_SECTF_Glyph_Map:
; line   819 :         }
; line   820 :         break;
$DGL	0,72
	br	$?L0110						;[INF] 2, 3
; line   821 :         
; line   822 :         /* Saturday Lit */
; line   823 :         case 6:
?L0117:
; line   824 :         {    
??bb07_SECTF_Glyph_Map:
; line   825 :             SEG25_DEF &= 0x0EU;
$DGL	0,77
	mov	a,!SEG25					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   826 :             SEG23_DEF &= 0x03U;
$DGL	0,78
	mov	a,!SEG23					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   827 :             SEG22_DEF &= 0x0EU;
$DGL	0,79
	mov	a,!SEG22					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   828 :             SEG20_DEF &= 0x0EU;
$DGL	0,80
	mov	a,!SEG20					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   829 :             SEG18_DEF &= 0x03U;
$DGL	0,81
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
; line   830 :             SEG18_DEF |= 0x04U;
$DGL	0,82
	mov	a,!SEG18					;[INF] 3, 1
	or	a,#04H	; 4 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb07_SECTF_Glyph_Map:
; line   831 :         }    
; line   832 :         break;
$DGL	0,84
	br	$?L0110						;[INF] 2, 3
; line   833 :         
; line   834 :         /* Sunday Lit */
; line   835 :         case 7:
?L0118:
; line   836 :         {    
??bb08_SECTF_Glyph_Map:
; line   837 :             SEG25_DEF |= 0x01U;
$DGL	0,89
	mov	a,!SEG25					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG25,a					;[INF] 3, 1
; line   838 :             SEG23_DEF &= 0x03U;
$DGL	0,90
	mov	a,!SEG23					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG23,a					;[INF] 3, 1
; line   839 :             SEG22_DEF &= 0x0EU;
$DGL	0,91
	mov	a,!SEG22					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG22,a					;[INF] 3, 1
; line   840 :             SEG20_DEF &= 0x0EU;
$DGL	0,92
	mov	a,!SEG20					;[INF] 3, 1
	and	a,#0EH	; 14 					;[INF] 2, 1
	mov	!SEG20,a					;[INF] 3, 1
; line   841 :             SEG18_DEF &= 0x03U;
$DGL	0,93
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#03H	; 3 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb08_SECTF_Glyph_Map:
; line   842 :         }
; line   843 :         break;
; line   844 :         
; line   845 :         default:
?L0119:
; line   846 :         {
??bb09_SECTF_Glyph_Map:
??eb09_SECTF_Glyph_Map:
; line   847 :             /* Bad Selection */
; line   848 :         }
; line   849 :         break;
??eb00_SECTF_Glyph_Map:
; line   850 :     }
?L0110:
; line   851 : }
$DGL	0,103
??ef_SECTF_Glyph_Map:
	pop	ax						;[INF] 1, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_SECTF_Glyph_Map:
; line   852 : /***************************************************************
;              ********************************************************
; line   853 : End of function SECTF_Glyph_Map
; line   854 : ****************************************************************
;              *******************************************************/
; line   855 : 
; line   856 : /***************************************************************
;              ********************************************************
; line   857 : * Function Name : Symbol_Map
; line   858 : * Description   : Takes a symbol code and turns on/off LCD Panel
;               Symbols. The 
; line   859 : *                 first digit should be which symbol to control 
;              (see symbols 
; line   860 : *                 listed below) 
; line   861 : *                 The second should be either a 1 or a 0. 
; line   862 : *                 (1 - Turn on, 0 - Turn Off)
; line   863 : *                 1 - Heat         5 - mmHg             9 - Degr
;              ees F
; line   864 : *                 2 - Fan          6 - Volts            A - Alar
;              m
; line   865 : *                 3 - Zone         7 - Heart            B - AM
; line   866 : *                 4 - mg/ml        8 - Degrees C        C - PM
; line   867 : *                 For example '61' would turn on the Volts symbo
;              l and 
; line   868 : *                 C0 would turn off the PM symbol.
; line   869 : * Arguments     : int16_t input 
; line   870 : *                           0 - valid input
; line   871 : *                          -1 - invalid input
; line   872 : * Return Value  : int8_t
; line   873 : ****************************************************************
;              *******************************************************/
; line   874 : int8_t Symbol_Map (const uint16_t input)
; line   875 : {
_Symbol_Map:
$DGL	1,438
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	movw	hl,sp						;[INF] 3, 1
??bf_Symbol_Map:
; line   876 :     /* Declare a status variable */
; line   877 :     int8_t status = 0;
$DGL	0,3
	mov	[hl+1],#00H	; status,0 			;[INF] 3, 1
; line   878 :     
; line   879 :     switch (input)
$DGL	0,5
	movw	ax,[hl+2]	; input 			;[INF] 2, 1
	subw	ax,#03130H	; 12592 			;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0126					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0125					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0128					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0127					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0130					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0129					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0132					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0131					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0134					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0133					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0136					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0135					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0138					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0137					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0140					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0139					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0142					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0141					;[INF] 3, 3
	subw	ax,#07FFH	; 2047 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0144					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0143					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0148					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0147					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0152					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0151					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0156					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0155					;[INF] 3, 3
	subw	ax,#01CFFH	; 7423 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0146					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0145					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0150					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0149					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0154					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0153					;[INF] 3, 3
	subw	ax,#0FFH	; 255 				;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0158					;[INF] 3, 3
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknz							;[INF] 2, 1
	br	$!?L0157					;[INF] 3, 3
	br	$!?L0159					;[INF] 3, 3
; line   880 :     {
??bb00_Symbol_Map:
; line   881 :         /* Heat Symbol On/Off */
; line   882 :         case LCD_HEAT_ON:
?L0125:
; line   883 :         {
??bb01_Symbol_Map:
; line   884 :             SEG27_DEF |= 0x01U;
$DGL	0,10
	mov	a,!SEG27					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG27,a					;[INF] 3, 1
??eb01_Symbol_Map:
; line   885 :         }
; line   886 :         break;
$DGL	0,12
	br	$!?L0124					;[INF] 3, 3
; line   887 :         
; line   888 :         case LCD_HEAT_OFF:
?L0126:
; line   889 :         {
??bb02_Symbol_Map:
; line   890 :             SEG27_DEF &= 0xFEU;
$DGL	0,16
	mov	a,!SEG27					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG27,a					;[INF] 3, 1
??eb02_Symbol_Map:
; line   891 :         }    
; line   892 :         break;
$DGL	0,18
	br	$!?L0124					;[INF] 3, 3
; line   893 : 
; line   894 :         /* Fan Symbol On/Off */
; line   895 :         case LCD_FAN_ON:
?L0127:
; line   896 :         {
??bb03_Symbol_Map:
; line   897 :             SEG33_DEF |= 0x01U;
$DGL	0,23
	mov	a,!SEG33					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG33,a					;[INF] 3, 1
??eb03_Symbol_Map:
; line   898 :         }    
; line   899 :         break;
$DGL	0,25
	br	$!?L0124					;[INF] 3, 3
; line   900 :         
; line   901 :         case LCD_FAN_OFF:
?L0128:
; line   902 :         {
??bb04_Symbol_Map:
; line   903 :             SEG33_DEF &= 0xFEU;
$DGL	0,29
	mov	a,!SEG33					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG33,a					;[INF] 3, 1
??eb04_Symbol_Map:
; line   904 :         }    
; line   905 :         break;
$DGL	0,31
	br	$!?L0124					;[INF] 3, 3
; line   906 :         
; line   907 :         /* Zone Symbol On/Off */
; line   908 :         case LCD_ZONE_ON:
?L0129:
; line   909 :         {
??bb05_Symbol_Map:
; line   910 :             SEG32_DEF |= 0x01U;
$DGL	0,36
	mov	a,!SEG32					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG32,a					;[INF] 3, 1
??eb05_Symbol_Map:
; line   911 :         }   
; line   912 :         break;
$DGL	0,38
	br	$!?L0124					;[INF] 3, 3
; line   913 :         
; line   914 :         case LCD_ZONE_OFF:
?L0130:
; line   915 :         {
??bb06_Symbol_Map:
; line   916 :             SEG32_DEF &= 0xFEU;
$DGL	0,42
	mov	a,!SEG32					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG32,a					;[INF] 3, 1
??eb06_Symbol_Map:
; line   917 :         }    
; line   918 :         break;
$DGL	0,44
	br	$!?L0124					;[INF] 3, 3
; line   919 :         
; line   920 :         /* MGML Symbol On/Off */
; line   921 :         case LCD_MGML_ON:
?L0131:
; line   922 :         {
??bb07_Symbol_Map:
; line   923 :             SEG34_DEF |= 0x01U;
$DGL	0,49
	mov	a,!SEG34					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG34,a					;[INF] 3, 1
??eb07_Symbol_Map:
; line   924 :         }    
; line   925 :         break;
$DGL	0,51
	br	$!?L0124					;[INF] 3, 3
; line   926 : 
; line   927 :         case LCD_MGML_OFF:
?L0132:
; line   928 :         {
??bb08_Symbol_Map:
; line   929 :             SEG34_DEF &= 0xFEU;
$DGL	0,55
	mov	a,!SEG34					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG34,a					;[INF] 3, 1
??eb08_Symbol_Map:
; line   930 :         }    
; line   931 :         break;    
$DGL	0,57
	br	$!?L0124					;[INF] 3, 3
; line   932 :         
; line   933 :         /* MMHG Symbol On/Off */
; line   934 :         case LCD_MMHG_ON:
?L0133:
; line   935 :         {
??bb09_Symbol_Map:
; line   936 :             SEG35_DEF |= 0x01U;
$DGL	0,62
	mov	a,!SEG35					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG35,a					;[INF] 3, 1
??eb09_Symbol_Map:
; line   937 :         }    
; line   938 :         break;
$DGL	0,64
	br	$!?L0124					;[INF] 3, 3
; line   939 :         
; line   940 :         case LCD_MMHG_OFF:
?L0134:
; line   941 :         {
??bb0A_Symbol_Map:
; line   942 :             SEG35_DEF &= 0xFEU;
$DGL	0,68
	mov	a,!SEG35					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG35,a					;[INF] 3, 1
??eb0A_Symbol_Map:
; line   943 :         }    
; line   944 :         break;
$DGL	0,70
	br	$!?L0124					;[INF] 3, 3
; line   945 :         
; line   946 :         /* Volts Symbol On/Off */
; line   947 :         case LCD_VOLTS_ON:
?L0135:
; line   948 :         {
??bb0B_Symbol_Map:
; line   949 :             SEG31_DEF |= 0x01U;
$DGL	0,75
	mov	a,!SEG31					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG31,a					;[INF] 3, 1
??eb0B_Symbol_Map:
; line   950 :         }    
; line   951 :         break;
$DGL	0,77
	br	$!?L0124					;[INF] 3, 3
; line   952 :         
; line   953 :         case LCD_VOLTS_OFF:
?L0136:
; line   954 :         {
??bb0C_Symbol_Map:
; line   955 :             SEG31_DEF &= 0xFEU;
$DGL	0,81
	mov	a,!SEG31					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG31,a					;[INF] 3, 1
??eb0C_Symbol_Map:
; line   956 :         }    
; line   957 :         break;
$DGL	0,83
	br	$!?L0124					;[INF] 3, 3
; line   958 :                 
; line   959 :         /* Heart Symbol On/Off */
; line   960 :         case LCD_HEART_ON:
?L0137:
; line   961 :         {
??bb0D_Symbol_Map:
; line   962 :             SEG30_DEF |= 0x01U;
$DGL	0,88
	mov	a,!SEG30					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG30,a					;[INF] 3, 1
??eb0D_Symbol_Map:
; line   963 :         }    
; line   964 :         break;
$DGL	0,90
	br	$!?L0124					;[INF] 3, 3
; line   965 :         
; line   966 :         case LCD_HEART_OFF:
?L0138:
; line   967 :         {
??bb0E_Symbol_Map:
; line   968 :             SEG30_DEF &= 0xFEU;
$DGL	0,94
	mov	a,!SEG30					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG30,a					;[INF] 3, 1
??eb0E_Symbol_Map:
; line   969 :         }    
; line   970 :         break;
$DGL	0,96
	br	$!?L0124					;[INF] 3, 3
; line   971 :         
; line   972 :         /* Degrees C Symbol On/Off */
; line   973 :         case LCD_DEGREESC_ON:
?L0139:
; line   974 :             SEG16_DEF |= 0x04U;
$DGL	0,100
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#04H	; 4 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
; line   975 :         break;
$DGL	0,101
	br	$!?L0124					;[INF] 3, 3
; line   976 : 
; line   977 :         case LCD_DEGREESC_OFF:
?L0140:
; line   978 :         {
??bb0F_Symbol_Map:
; line   979 :             SEG16_DEF &= 0xFBU;
$DGL	0,105
	mov	a,!SEG16					;[INF] 3, 1
	and	a,#0FBH	; 251 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb0F_Symbol_Map:
; line   980 :         }    
; line   981 :         break;
$DGL	0,107
	br	$!?L0124					;[INF] 3, 3
; line   982 :         
; line   983 :         /* Degrees F Symbol On/Off */
; line   984 :         case LCD_DEGREESF_ON:
?L0141:
; line   985 :         {
??bb10_Symbol_Map:
; line   986 :             SEG16_DEF |= 0x08U;
$DGL	0,112
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb10_Symbol_Map:
; line   987 :         }    
; line   988 :         break;
$DGL	0,114
	br	$!?L0124					;[INF] 3, 3
; line   989 :  
; line   990 :         case LCD_DEGREESF_OFF:
?L0142:
; line   991 :         {
??bb11_Symbol_Map:
; line   992 :             SEG16_DEF &= 0xF7U;
$DGL	0,118
	mov	a,!SEG16					;[INF] 3, 1
	and	a,#0F7H	; 247 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb11_Symbol_Map:
; line   993 :         }    
; line   994 :         break;            
$DGL	0,120
	br	$!?L0124					;[INF] 3, 3
; line   995 :         
; line   996 :         /* Alarm Symbol On/Off */
; line   997 :         case LCD_ALARM_ON:
?L0143:
; line   998 :         {
??bb12_Symbol_Map:
; line   999 :             SEG18_DEF |= 0x02U;
$DGL	0,125
	mov	a,!SEG18					;[INF] 3, 1
	or	a,#02H	; 2 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb12_Symbol_Map:
; line  1000 :         }    
; line  1001 :         break;
$DGL	0,127
	br	$!?L0124					;[INF] 3, 3
; line  1002 : 
; line  1003 :         case LCD_ALARM_OFF:
?L0144:
; line  1004 :         {
??bb13_Symbol_Map:
; line  1005 :             SEG18_DEF &= 0xFDU;
$DGL	0,131
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb13_Symbol_Map:
; line  1006 :         }
; line  1007 :         break;
$DGL	0,133
	br	$!?L0124					;[INF] 3, 3
; line  1008 : 
; line  1009 :         /* Alarm Symbol On/Off */
; line  1010 :         case LCD_ALARM_ON_1:
?L0145:
; line  1011 :             SEG18_DEF |= 0x02U;
$DGL	0,137
	mov	a,!SEG18					;[INF] 3, 1
	or	a,#02H	; 2 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
; line  1012 :         break;
$DGL	0,138
	br	$!?L0124					;[INF] 3, 3
; line  1013 :  
; line  1014 :         case LCD_ALARM_OFF_1:
?L0146:
; line  1015 :         {
??bb14_Symbol_Map:
; line  1016 :             SEG18_DEF &= 0xFDU;
$DGL	0,142
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb14_Symbol_Map:
; line  1017 :         }    
; line  1018 :        break;    
$DGL	0,144
	br	$?L0124						;[INF] 2, 3
; line  1019 :         
; line  1020 :         /* AM Symbol On/Off */
; line  1021 :         case LCD_AM_ON:
?L0147:
; line  1022 :         {
??bb15_Symbol_Map:
; line  1023 :             SEG18_DEF |= 0x01U;
$DGL	0,149
	mov	a,!SEG18					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb15_Symbol_Map:
; line  1024 :         }
; line  1025 :         break;
$DGL	0,151
	br	$?L0124						;[INF] 2, 3
; line  1026 :  
; line  1027 :         case LCD_AM_OFF:
?L0148:
; line  1028 :         {
??bb16_Symbol_Map:
; line  1029 :             SEG18_DEF &= 0xFEU;
$DGL	0,155
	mov	a,!SEG18					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb16_Symbol_Map:
; line  1030 :         }    
; line  1031 :         break;    
$DGL	0,157
	br	$?L0124						;[INF] 2, 3
; line  1032 : 
; line  1033 :         /* AM Symbol On/Off */
; line  1034 :         case LCD_AM_ON_1:
?L0149:
; line  1035 :         {
??bb17_Symbol_Map:
; line  1036 :             SEG18_DEF |= 0x01U;
$DGL	0,162
	mov	a,!SEG18					;[INF] 3, 1
	or	a,#01H	; 1 					;[INF] 2, 1
	mov	!SEG18,a					;[INF] 3, 1
??eb17_Symbol_Map:
; line  1037 :         }
; line  1038 :         break;
$DGL	0,164
	br	$?L0124						;[INF] 2, 3
; line  1039 :         
; line  1040 :         case LCD_AM_OFF_1:
?L0150:
; line  1041 :         {
??bb18_Symbol_Map:
; line  1042 :             SEG27_DEF &= 0xFEU;
$DGL	0,168
	mov	a,!SEG27					;[INF] 3, 1
	and	a,#0FEH	; 254 					;[INF] 2, 1
	mov	!SEG27,a					;[INF] 3, 1
??eb18_Symbol_Map:
; line  1043 :         }    
; line  1044 :         break;    
$DGL	0,170
	br	$?L0124						;[INF] 2, 3
; line  1045 :         
; line  1046 :         /* PM Symbol On/Off */
; line  1047 :         case LCD_PM_ON:
?L0151:
; line  1048 :         {
??bb19_Symbol_Map:
; line  1049 :             SEG16_DEF |= 0x02U;
$DGL	0,175
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#02H	; 2 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb19_Symbol_Map:
; line  1050 :         }    
; line  1051 :         break;
$DGL	0,177
	br	$?L0124						;[INF] 2, 3
; line  1052 :         
; line  1053 :         case LCD_PM_OFF:
?L0152:
; line  1054 :         {
??bb1A_Symbol_Map:
; line  1055 :             SEG16_DEF &= 0xFDU;
$DGL	0,181
	mov	a,!SEG16					;[INF] 3, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb1A_Symbol_Map:
; line  1056 :         }    
; line  1057 :         break;
$DGL	0,183
	br	$?L0124						;[INF] 2, 3
; line  1058 :         
; line  1059 :         /* PM Symbol On/Off */
; line  1060 :         case LCD_PM_ON_1:
?L0153:
; line  1061 :         {
??bb1B_Symbol_Map:
; line  1062 :            SEG16_DEF |= 0x02U;
$DGL	0,188
	mov	a,!SEG16					;[INF] 3, 1
	or	a,#02H	; 2 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb1B_Symbol_Map:
; line  1063 :         }    
; line  1064 :         break;
$DGL	0,190
	br	$?L0124						;[INF] 2, 3
; line  1065 :         
; line  1066 :         case LCD_PM_OFF_1:
?L0154:
; line  1067 :         {
??bb1C_Symbol_Map:
; line  1068 :             SEG16_DEF &= 0xFDU;
$DGL	0,194
	mov	a,!SEG16					;[INF] 3, 1
	and	a,#0FDH	; 253 					;[INF] 2, 1
	mov	!SEG16,a					;[INF] 3, 1
??eb1C_Symbol_Map:
; line  1069 :         }
; line  1070 :         break;
$DGL	0,196
	br	$?L0124						;[INF] 2, 3
; line  1071 :         
; line  1072 :         /* Renesas Logo On/Off */
; line  1073 :         case LCD_R_LOGO_ON:
?L0155:
; line  1074 :         {
??bb1D_Symbol_Map:
; line  1075 :             SEG12_DEF |= 0x08U;
$DGL	0,201
	mov	a,!SEG12					;[INF] 3, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	!SEG12,a					;[INF] 3, 1
??eb1D_Symbol_Map:
; line  1076 :         }    
; line  1077 :         break;
$DGL	0,203
	br	$?L0124						;[INF] 2, 3
; line  1078 :         
; line  1079 :         case LCD_R_LOGO_OFF:
?L0156:
; line  1080 :         {
??bb1E_Symbol_Map:
; line  1081 :             SEG12_DEF &= 0xF7U;
$DGL	0,207
	mov	a,!SEG12					;[INF] 3, 1
	and	a,#0F7H	; 247 					;[INF] 2, 1
	mov	!SEG12,a					;[INF] 3, 1
??eb1E_Symbol_Map:
; line  1082 :         }
; line  1083 :         break;
$DGL	0,209
	br	$?L0124						;[INF] 2, 3
; line  1084 :         
; line  1085 :         /* Renesas Logo On/Off */
; line  1086 :         case LCD_R_LOGO_ON_1:
?L0157:
; line  1087 :         {
??bb1F_Symbol_Map:
; line  1088 :             SEG12_DEF |= 0x08U;
$DGL	0,214
	mov	a,!SEG12					;[INF] 3, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	!SEG12,a					;[INF] 3, 1
??eb1F_Symbol_Map:
; line  1089 :         }    
; line  1090 :         break;
$DGL	0,216
	br	$?L0124						;[INF] 2, 3
; line  1091 :         
; line  1092 :         case LCD_R_LOGO_OFF_1:
?L0158:
; line  1093 :         {
??bb20_Symbol_Map:
; line  1094 :             SEG12_DEF &= 0xF7U;
$DGL	0,220
	mov	a,!SEG12					;[INF] 3, 1
	and	a,#0F7H	; 247 					;[INF] 2, 1
	mov	!SEG12,a					;[INF] 3, 1
??eb20_Symbol_Map:
; line  1095 :         }    
; line  1096 :         break;
$DGL	0,222
	br	$?L0124						;[INF] 2, 3
; line  1097 :         
; line  1098 :         default:
?L0159:
; line  1099 :         {
??bb21_Symbol_Map:
; line  1100 :             /* Bad Selection */
; line  1101 :             status = 1;
$DGL	0,227
	mov	[hl+1],#01H	; status,1 			;[INF] 3, 1
??eb21_Symbol_Map:
; line  1102 :         }    
; line  1103 :         break;
??eb00_Symbol_Map:
; line  1104 :     }
?L0124:
; line  1105 :     return status;
$DGL	0,231
	mov	a,[hl+1]	; status 			;[INF] 2, 1
	sarw	ax,8						;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
; line  1106 : }
?L0123:
$DGL	0,232
??ef_Symbol_Map:
	addw	sp,#04H						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_Symbol_Map:
; line  1107 : /***************************************************************
;              ********************************************************
; line  1108 : End of function Symbol_Map
; line  1109 : ****************************************************************
;              *******************************************************/
; line  1110 : 
; line  1111 : 
; line  1112 : /***************************************************************
;              ********************************************************
; line  1113 : * Function Name : Clear_Display
; line  1114 : * Description   : Clears all the segment data registers, thereby
;               clearing the screen by the next LCD frame duration.
; line  1115 : * Arguments     : none
; line  1116 : * Return Value  : none
; line  1117 : ****************************************************************
;              *******************************************************/
; line  1118 : void Clear_Display (void)
; line  1119 : {
_Clear_Display:
$DGL	1,582
	push	hl						;[INF] 1, 1
	subw	sp,#04H						;[INF] 2, 1
	movw	hl,sp						;[INF] 3, 1
??bf_Clear_Display:
; line  1120 :     /* Declare a loop count variable */
; line  1121 :     unsigned char      i;
; line  1122 :      
; line  1123 :      /* Initialise pointer to start of registers */
; line  1124 :     volatile uint8_t * RegPtr = &SEG0_DEF;
$DGL	0,6
	movw	ax,#0400H	; 1024 				;[INF] 3, 1
	movw	[hl],ax	; RegPtr 				;[INF] 1, 1
; line  1125 : 
; line  1126 :     /* Execute the instructions in the loop 40 times */
; line  1127 :     for (i = 0; i < 40; i++)
$DGL	0,9
	mov	[hl+3],#00H	; i,0 				;[INF] 3, 1
?L0164:
	mov	a,[hl+3]	; i 				;[INF] 2, 1
	cmp	a,#028H	; 40 					;[INF] 2, 1
	bnc	$?L0165						;[INF] 2, 4
; line  1128 :     {
??bb00_Clear_Display:
; line  1129 :         /* Write 0 to the register being pointed to.*/
; line  1130 :         *RegPtr = 0;
$DGL	0,12
	movw	ax,[hl]	; RegPtr 				;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	[de+0],#00H	; 0 				;[INF] 3, 1
; line  1131 :         
; line  1132 :         /* Increment the pointer */
; line  1133 :         RegPtr++;
$DGL	0,15
	incw	[hl+0]	; RegPtr 				;[INF] 3, 2
??eb00_Clear_Display:
; line  1134 :     }
$DGL	0,16
?L0166:
	inc	[hl+3]	; i 					;[INF] 3, 2
	br	$?L0164						;[INF] 2, 3
?L0165:
; line  1135 : }
$DGL	0,17
??ef_Clear_Display:
	addw	sp,#04H						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_Clear_Display:
; line  1136 : /***************************************************************
;              ********************************************************
; line  1137 : End of function Clear_Display
; line  1138 : ****************************************************************
;              *******************************************************/
; line  1139 : 
; line  1140 : /***************************************************************
;              ********************************************************
; line  1141 : * Function Name : Init_Maps
; line  1142 : * Description   : Initialises the glyph-segment maps used to dis
;              play letters, symbols and numbers.
; line  1143 : * Arguments     : none
; line  1144 : * Return Value  : none
; line  1145 : ****************************************************************
;              *******************************************************/
; line  1146 : void Init_Maps (void)
; line  1147 :  {
_Init_Maps:
$DGL	1,595
??bf_Init_Maps:
; line  1148 :      /* Section A maps START */
; line  1149 :      SECTA_map[0x0].WORD = 0x00F5u; /* 0 */
$DGL	0,3
	movw	ax,#0F5H	; 245 				;[INF] 3, 1
	movw	!_SECTA_map,ax					;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+2,ax				;[INF] 3, 1
; line  1150 :      SECTA_map[0x1].WORD = 0x0060u; /* 1 */
$DGL	0,4
	mov	x,#060H	; 96 					;[INF] 2, 1
	movw	!_SECTA_map+4,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+6,ax				;[INF] 3, 1
; line  1151 :      SECTA_map[0x2].WORD = 0x00B6u; /* 2 */
$DGL	0,5
	mov	x,#0B6H	; 182 					;[INF] 2, 1
	movw	!_SECTA_map+8,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+10,ax				;[INF] 3, 1
; line  1152 :      SECTA_map[0x3].WORD = 0x00F2u; /* 3 */ 
$DGL	0,6
	mov	x,#0F2H	; 242 					;[INF] 2, 1
	movw	!_SECTA_map+12,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+14,ax				;[INF] 3, 1
; line  1153 :      SECTA_map[0x4].WORD = 0x0063u; /* 4 */
$DGL	0,7
	mov	x,#063H	; 99 					;[INF] 2, 1
	movw	!_SECTA_map+16,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+18,ax				;[INF] 3, 1
; line  1154 :      SECTA_map[0x5].WORD = 0x00D3u; /* 5 */
$DGL	0,8
	mov	x,#0D3H	; 211 					;[INF] 2, 1
	movw	!_SECTA_map+20,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+22,ax				;[INF] 3, 1
; line  1155 :      SECTA_map[0x6].WORD = 0x00D7u; /* 6 */
$DGL	0,9
	mov	x,#0D7H	; 215 					;[INF] 2, 1
	movw	!_SECTA_map+24,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+26,ax				;[INF] 3, 1
; line  1156 :      SECTA_map[0x7].WORD = 0x0070u; /* 7 */
$DGL	0,10
	mov	x,#070H	; 112 					;[INF] 2, 1
	movw	!_SECTA_map+28,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+30,ax				;[INF] 3, 1
; line  1157 :      SECTA_map[0x8].WORD = 0x00F7u; /* 8 */
$DGL	0,11
	mov	x,#0F7H	; 247 					;[INF] 2, 1
	movw	!_SECTA_map+32,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+34,ax				;[INF] 3, 1
; line  1158 :      SECTA_map[0x9].WORD = 0x00F3u; /* 9 */
$DGL	0,12
	mov	x,#0F3H	; 243 					;[INF] 2, 1
	movw	!_SECTA_map+36,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+38,ax				;[INF] 3, 1
; line  1159 :      SECTB_map[0xA].WORD = 0x0000u; /* dummy */
$DGL	0,13
	movw	!_SECTB_map+40,ax				;[INF] 3, 1
	movw	!_SECTB_map+42,ax				;[INF] 3, 1
; line  1160 :      SECTB_map[0xB].WORD = 0x0000u; /* dummy */
$DGL	0,14
	movw	!_SECTB_map+44,ax				;[INF] 3, 1
	movw	!_SECTB_map+46,ax				;[INF] 3, 1
; line  1161 :      SECTB_map[0xC].WORD = 0x0000u; /* dummy */
$DGL	0,15
	movw	!_SECTB_map+48,ax				;[INF] 3, 1
	movw	!_SECTB_map+50,ax				;[INF] 3, 1
; line  1162 :      SECTB_map[0xD].WORD = 0x0000u; /* dummy */
$DGL	0,16
	movw	!_SECTB_map+52,ax				;[INF] 3, 1
	movw	!_SECTB_map+54,ax				;[INF] 3, 1
; line  1163 :      SECTA_map[0xE].WORD = 0x0077u; /* A */
$DGL	0,17
	mov	x,#077H	; 119 					;[INF] 2, 1
	movw	!_SECTA_map+56,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+58,ax				;[INF] 3, 1
; line  1164 :      SECTA_map[0xF].WORD = 0x00C7u; /* B */
$DGL	0,18
	mov	x,#0C7H	; 199 					;[INF] 2, 1
	movw	!_SECTA_map+60,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+62,ax				;[INF] 3, 1
; line  1165 :      SECTA_map[0x10].WORD = 0x0095u; /* C */
$DGL	0,19
	mov	x,#095H	; 149 					;[INF] 2, 1
	movw	!_SECTA_map+64,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+66,ax				;[INF] 3, 1
; line  1166 :      SECTA_map[0x11].WORD = 0x00E6u; /* D */
$DGL	0,20
	mov	x,#0E6H	; 230 					;[INF] 2, 1
	movw	!_SECTA_map+68,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+70,ax				;[INF] 3, 1
; line  1167 :      SECTA_map[0x12].WORD = 0x0097u; /* E */
$DGL	0,21
	mov	x,#097H	; 151 					;[INF] 2, 1
	movw	!_SECTA_map+72,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+74,ax				;[INF] 3, 1
; line  1168 :      SECTA_map[0x13].WORD = 0x0017u; /* F */
$DGL	0,22
	mov	x,#017H	; 23 					;[INF] 2, 1
	movw	!_SECTA_map+76,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTA_map+78,ax				;[INF] 3, 1
; line  1169 :      /* Section A maps END */
; line  1170 : 
; line  1171 :      /* Section B maps START */
; line  1172 :      SECTB_map[0x0].WORD = 0x00FAu; /* 0 */
$DGL	0,26
	mov	x,#0FAH	; 250 					;[INF] 2, 1
	movw	!_SECTB_map,ax					;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+2,ax				;[INF] 3, 1
; line  1173 :      SECTB_map[0x1].WORD = 0x0060u; /* 1 */
$DGL	0,27
	mov	x,#060H	; 96 					;[INF] 2, 1
	movw	!_SECTB_map+4,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+6,ax				;[INF] 3, 1
; line  1174 :      SECTB_map[0x2].WORD = 0x00D6u; /* 2 */
$DGL	0,28
	mov	x,#0D6H	; 214 					;[INF] 2, 1
	movw	!_SECTB_map+8,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+10,ax				;[INF] 3, 1
; line  1175 :      SECTB_map[0x3].WORD = 0x00F4u; /* 3 */
$DGL	0,29
	mov	x,#0F4H	; 244 					;[INF] 2, 1
	movw	!_SECTB_map+12,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+14,ax				;[INF] 3, 1
; line  1176 :      SECTB_map[0x4].WORD = 0x006Cu; /* 4 */
$DGL	0,30
	mov	x,#06CH	; 108 					;[INF] 2, 1
	movw	!_SECTB_map+16,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+18,ax				;[INF] 3, 1
; line  1177 :      SECTB_map[0x5].WORD = 0x00BCu; /* 5 */
$DGL	0,31
	mov	x,#0BCH	; 188 					;[INF] 2, 1
	movw	!_SECTB_map+20,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+22,ax				;[INF] 3, 1
; line  1178 :      SECTB_map[0x6].WORD = 0x00BEu; /* 6 */
$DGL	0,32
	mov	x,#0BEH	; 190 					;[INF] 2, 1
	movw	!_SECTB_map+24,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+26,ax				;[INF] 3, 1
; line  1179 :      SECTB_map[0x7].WORD = 0x00E0u; /* 7 */
$DGL	0,33
	mov	x,#0E0H	; 224 					;[INF] 2, 1
	movw	!_SECTB_map+28,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+30,ax				;[INF] 3, 1
; line  1180 :      SECTB_map[0x8].WORD = 0x00FEu; /* 8 */
$DGL	0,34
	mov	x,#0FEH	; 254 					;[INF] 2, 1
	movw	!_SECTB_map+32,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+34,ax				;[INF] 3, 1
; line  1181 :      SECTB_map[0x9].WORD = 0x00FCu; /* 9 */
$DGL	0,35
	mov	x,#0FCH	; 252 					;[INF] 2, 1
	movw	!_SECTB_map+36,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+38,ax				;[INF] 3, 1
; line  1182 :      SECTB_map[0xA].WORD = 0x0000u; /* dummy */
$DGL	0,36
	movw	!_SECTB_map+40,ax				;[INF] 3, 1
	movw	!_SECTB_map+42,ax				;[INF] 3, 1
; line  1183 :      SECTB_map[0xB].WORD = 0x0000u; /* dummy */
$DGL	0,37
	movw	!_SECTB_map+44,ax				;[INF] 3, 1
	movw	!_SECTB_map+46,ax				;[INF] 3, 1
; line  1184 :      SECTB_map[0xC].WORD = 0x0000u; /* dummy */
$DGL	0,38
	movw	!_SECTB_map+48,ax				;[INF] 3, 1
	movw	!_SECTB_map+50,ax				;[INF] 3, 1
; line  1185 :      SECTB_map[0xD].WORD = 0x0000u; /* dummy */
$DGL	0,39
	movw	!_SECTB_map+52,ax				;[INF] 3, 1
	movw	!_SECTB_map+54,ax				;[INF] 3, 1
; line  1186 :      SECTB_map[0xE].WORD = 0x00EEu; /* A */
$DGL	0,40
	mov	x,#0EEH	; 238 					;[INF] 2, 1
	movw	!_SECTB_map+56,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+58,ax				;[INF] 3, 1
; line  1187 :      SECTB_map[0xF].WORD = 0x003Eu; /* B */
$DGL	0,41
	mov	x,#03EH	; 62 					;[INF] 2, 1
	movw	!_SECTB_map+60,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+62,ax				;[INF] 3, 1
; line  1188 :      SECTB_map[0x10].WORD = 0x009Au; /* C */
$DGL	0,42
	mov	x,#09AH	; 154 					;[INF] 2, 1
	movw	!_SECTB_map+64,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+66,ax				;[INF] 3, 1
; line  1189 :      SECTB_map[0x11].WORD = 0x0076u; /* D */
$DGL	0,43
	mov	x,#076H	; 118 					;[INF] 2, 1
	movw	!_SECTB_map+68,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+70,ax				;[INF] 3, 1
; line  1190 :      SECTB_map[0x12].WORD = 0x009Eu; /* E */
$DGL	0,44
	mov	x,#09EH	; 158 					;[INF] 2, 1
	movw	!_SECTB_map+72,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+74,ax				;[INF] 3, 1
; line  1191 :      SECTB_map[0x13].WORD = 0x008Eu; /* F */
$DGL	0,45
	mov	x,#08EH	; 142 					;[INF] 2, 1
	movw	!_SECTB_map+76,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTB_map+78,ax				;[INF] 3, 1
; line  1192 :      /* Section B maps END */
; line  1193 : 
; line  1194 :      /* Section C maps START */
; line  1195 :      /* Numbers */
; line  1196 :      SECTC_map[0].WORD = 0xC3AAu; /* 0 */
$DGL	0,50
	movw	ax,#0C3AAH	; -15446 			;[INF] 3, 1
	movw	!_SECTC_map,ax					;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+2,ax				;[INF] 3, 1
; line  1197 :      SECTC_map[1].WORD = 0x00A0u; /* 1 */
$DGL	0,51
	mov	x,#0A0H	; 160 					;[INF] 2, 1
	movw	!_SECTC_map+4,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+6,ax				;[INF] 3, 1
; line  1198 :      SECTC_map[2].WORD = 0x816Cu; /* 2 */
$DGL	0,52
	movw	ax,#0816CH	; -32404 			;[INF] 3, 1
	movw	!_SECTC_map+8,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+10,ax				;[INF] 3, 1
; line  1199 :      SECTC_map[3].WORD = 0x81E4u; /* 3 */
$DGL	0,53
	movw	ax,#081E4H	; -32284 			;[INF] 3, 1
	movw	!_SECTC_map+12,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+14,ax				;[INF] 3, 1
; line  1200 :      SECTC_map[4].WORD = 0x00E6u; /* 4 */
$DGL	0,54
	mov	x,#0E6H	; 230 					;[INF] 2, 1
	movw	!_SECTC_map+16,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+18,ax				;[INF] 3, 1
; line  1201 :      SECTC_map[5].WORD = 0x81C6u; /* 5 */
$DGL	0,55
	movw	ax,#081C6H	; -32314 			;[INF] 3, 1
	movw	!_SECTC_map+20,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+22,ax				;[INF] 3, 1
; line  1202 :      SECTC_map[6].WORD = 0x81CEu; /* 6 */
$DGL	0,56
	movw	ax,#081CEH	; -32306 			;[INF] 3, 1
	movw	!_SECTC_map+24,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+26,ax				;[INF] 3, 1
; line  1203 :      SECTC_map[7].WORD = 0x01A0u; /* 7 */
$DGL	0,57
	movw	ax,#01A0H	; 416 				;[INF] 3, 1
	movw	!_SECTC_map+28,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+30,ax				;[INF] 3, 1
; line  1204 :      SECTC_map[8].WORD = 0x81EEu; /* 8 */
$DGL	0,58
	movw	ax,#081EEH	; -32274 			;[INF] 3, 1
	movw	!_SECTC_map+32,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+34,ax				;[INF] 3, 1
; line  1205 :      SECTC_map[9].WORD = 0x81E6u; /* 9 */
$DGL	0,59
	movw	ax,#081E6H	; -32282 			;[INF] 3, 1
	movw	!_SECTC_map+36,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+38,ax				;[INF] 3, 1
; line  1206 :      
; line  1207 :      /* Symbols */
; line  1208 :      SECTC_map[10].WORD = 0x2444u; /* + */
$DGL	0,62
	movw	ax,#02444H	; 9284 				;[INF] 3, 1
	movw	!_SECTC_map+40,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+42,ax				;[INF] 3, 1
; line  1209 :      SECTC_map[11].WORD = 0x0044u; /* - */
$DGL	0,63
	mov	x,#044H	; 68 					;[INF] 2, 1
	movw	!_SECTC_map+44,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+46,ax				;[INF] 3, 1
; line  1210 :      SECTC_map[12].WORD = 0x4200u; /* / */
$DGL	0,64
	mov	a,#042H	; 66 					;[INF] 2, 1
	movw	!_SECTC_map+48,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+50,ax				;[INF] 3, 1
; line  1211 :      SECTC_map[13].WORD = 0x1800u; /* \ */
$DGL	0,65
	mov	a,#018H	; 24 					;[INF] 2, 1
	movw	!_SECTC_map+52,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+54,ax				;[INF] 3, 1
; line  1212 :      SECTC_map[40].WORD = 0x7e44u; /* * */
$DGL	0,66
	movw	ax,#07E44H	; 32324 			;[INF] 3, 1
	movw	!_SECTC_map+160,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+162,ax				;[INF] 3, 1
; line  1213 :      
; line  1214 :      /* Letters */
; line  1215 :      SECTC_map[14].WORD = 0x01EEu; /* A */
$DGL	0,69
	movw	ax,#01EEH	; 494 				;[INF] 3, 1
	movw	!_SECTC_map+56,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+58,ax				;[INF] 3, 1
; line  1216 :      SECTC_map[15].WORD = 0xA5E0u; /* B */
$DGL	0,70
	movw	ax,#0A5E0H	; -23072 			;[INF] 3, 1
	movw	!_SECTC_map+60,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+62,ax				;[INF] 3, 1
; line  1217 :      SECTC_map[16].WORD = 0x810Au; /* C */
$DGL	0,71
	movw	ax,#0810AH	; -32502 			;[INF] 3, 1
	movw	!_SECTC_map+64,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+66,ax				;[INF] 3, 1
; line  1218 :      SECTC_map[17].WORD = 0xA5A0u; /* D */
$DGL	0,72
	movw	ax,#0A5A0H	; -23136 			;[INF] 3, 1
	movw	!_SECTC_map+68,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+70,ax				;[INF] 3, 1
; line  1219 :      SECTC_map[18].WORD = 0x814Eu; /* E */
$DGL	0,73
	movw	ax,#0814EH	; -32434 			;[INF] 3, 1
	movw	!_SECTC_map+72,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+74,ax				;[INF] 3, 1
; line  1220 :      SECTC_map[19].WORD = 0x014Eu; /* F */
$DGL	0,74
	movw	ax,#014EH	; 334 				;[INF] 3, 1
	movw	!_SECTC_map+76,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+78,ax				;[INF] 3, 1
; line  1221 :      SECTC_map[20].WORD = 0x81CAu; /* G */
$DGL	0,75
	movw	ax,#081CAH	; -32310 			;[INF] 3, 1
	movw	!_SECTC_map+80,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+82,ax				;[INF] 3, 1
; line  1222 :      SECTC_map[21].WORD = 0x00EEu; /* H */
$DGL	0,76
	mov	x,#0EEH	; 238 					;[INF] 2, 1
	movw	!_SECTC_map+84,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+86,ax				;[INF] 3, 1
; line  1223 :      SECTC_map[22].WORD = 0xA500u; /* I */
$DGL	0,77
	mov	a,#0A5H	; 165 					;[INF] 2, 1
	movw	!_SECTC_map+88,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+90,ax				;[INF] 3, 1
; line  1224 :      SECTC_map[23].WORD = 0x80A0u; /* J */
$DGL	0,78
	movw	ax,#080A0H	; -32608 			;[INF] 3, 1
	movw	!_SECTC_map+92,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+94,ax				;[INF] 3, 1
; line  1225 :      SECTC_map[24].WORD = 0x0A0Eu; /* K */
$DGL	0,79
	movw	ax,#0A0EH	; 2574 				;[INF] 3, 1
	movw	!_SECTC_map+96,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+98,ax				;[INF] 3, 1
; line  1226 :      SECTC_map[25].WORD = 0X800Au; /* L */
$DGL	0,80
	movw	ax,#0800AH	; -32758 			;[INF] 3, 1
	movw	!_SECTC_map+100,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+102,ax				;[INF] 3, 1
; line  1227 :      SECTC_map[26].WORD = 0x12AAu; /* M */
$DGL	0,81
	movw	ax,#012AAH	; 4778 				;[INF] 3, 1
	movw	!_SECTC_map+104,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+106,ax				;[INF] 3, 1
; line  1228 :      SECTC_map[27].WORD = 0x18AAu; /* N */
$DGL	0,82
	movw	ax,#018AAH	; 6314 				;[INF] 3, 1
	movw	!_SECTC_map+108,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+110,ax				;[INF] 3, 1
; line  1229 :      SECTC_map[28].WORD = 0x81AAu; /* O */
$DGL	0,83
	movw	ax,#081AAH	; -32342 			;[INF] 3, 1
	movw	!_SECTC_map+112,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+114,ax				;[INF] 3, 1
; line  1230 :      SECTC_map[29].WORD = 0x016Eu; /* P */
$DGL	0,84
	movw	ax,#016EH	; 366 				;[INF] 3, 1
	movw	!_SECTC_map+116,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+118,ax				;[INF] 3, 1
; line  1231 :      SECTC_map[30].WORD = 0x89AAu; /* Q */
$DGL	0,85
	movw	ax,#089AAH	; -30294 			;[INF] 3, 1
	movw	!_SECTC_map+120,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+122,ax				;[INF] 3, 1
; line  1232 :      SECTC_map[31].WORD = 0x096Eu; /* R */
$DGL	0,86
	movw	ax,#096EH	; 2414 				;[INF] 3, 1
	movw	!_SECTC_map+124,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+126,ax				;[INF] 3, 1
; line  1233 :      SECTC_map[32].WORD = 0x81C6u; /* S */
$DGL	0,87
	movw	ax,#081C6H	; -32314 			;[INF] 3, 1
	movw	!_SECTC_map+128,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+130,ax				;[INF] 3, 1
; line  1234 :      SECTC_map[33].WORD = 0x2500u; /* T */
$DGL	0,88
	mov	a,#025H	; 37 					;[INF] 2, 1
	movw	!_SECTC_map+132,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+134,ax				;[INF] 3, 1
; line  1235 :      SECTC_map[34].WORD = 0x80AAu; /* U */
$DGL	0,89
	movw	ax,#080AAH	; -32598 			;[INF] 3, 1
	movw	!_SECTC_map+136,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+138,ax				;[INF] 3, 1
; line  1236 :      SECTC_map[35].WORD = 0x420Au; /* V */
$DGL	0,90
	movw	ax,#0420AH	; 16906 			;[INF] 3, 1
	movw	!_SECTC_map+140,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+142,ax				;[INF] 3, 1
; line  1237 :      SECTC_map[36].WORD = 0x48AAu; /* W */
$DGL	0,91
	movw	ax,#048AAH	; 18602 			;[INF] 3, 1
	movw	!_SECTC_map+144,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+146,ax				;[INF] 3, 1
; line  1238 :      SECTC_map[37].WORD = 0x5A00u; /* X */ 
$DGL	0,92
	mov	a,#05AH	; 90 					;[INF] 2, 1
	movw	!_SECTC_map+148,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+150,ax				;[INF] 3, 1
; line  1239 :      SECTC_map[38].WORD = 0x1600u; /* Y */
$DGL	0,93
	mov	a,#016H	; 22 					;[INF] 2, 1
	movw	!_SECTC_map+152,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+154,ax				;[INF] 3, 1
; line  1240 :      SECTC_map[39].WORD = 0xC300u; /* Z */
$DGL	0,94
	mov	a,#0C3H	; 195 					;[INF] 2, 1
	movw	!_SECTC_map+156,ax				;[INF] 3, 1
	clrw	ax						;[INF] 1, 1
	movw	!_SECTC_map+158,ax				;[INF] 3, 1
; line  1241 : 
; line  1242 :      /* Section C maps END */
; line  1243 :  }
$DGL	0,97
??ef_Init_Maps:
	ret							;[INF] 1, 6
??ee_Init_Maps:
; line  1244 : /***************************************************************
;              ********************************************************
; line  1245 : End of function Init_Maps
; line  1246 : ****************************************************************
;              *******************************************************/
; line  1247 : 
; line  1248 : /***************************************************************
;              ********************************************************
; line  1249 : * Function Name : Display_Panel_String
; line  1250 : * Description     This function writes to line 1, line 2 or 3 of
;               the LCD. You need to use the defines LCD_LINE1, 
; line  1251 :                   LCD_LINE2 and LCD_LINE3 in order to specify th
;              e starting position. 
; line  1252 : * Arguments     : (uint8_t) position - LCD row (symbol) number.
; line  1253 : *                 (char*) string - pointer to data to be written
;               to display (up to 8 chars).
; line  1254 : * Return Value  : None
; line  1255 : ****************************************************************
;              *******************************************************/
; line  1256 : void Display_Panel_String (const uint8_t position, const char * 
;              const string)
; line  1257 : {
_Display_Panel_String:
$DGL	1,601
	push	hl						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	subw	sp,#08H						;[INF] 2, 1
	movw	hl,sp						;[INF] 3, 1
??bf_Display_Panel_String:
; line  1258 :     /* Declare variable to hold the output data */
; line  1259 :     uint8_t     output_buf = 0;
$DGL	0,3
	mov	[hl+7],#00H	; output_buf,0 			;[INF] 3, 1
; line  1260 :     
; line  1261 :     /* Declare a variable flag to hold the input validation resu
;              lt */
; line  1262 :     int16_t     flag = 0;
$DGL	0,6
	clrw	ax						;[INF] 1, 1
	movw	[hl+4],ax	; flag 				;[INF] 2, 1
; line  1263 :     
; line  1264 :     /* Declare a loop count variable */
; line  1265 :     uint16_t    i = 0;
$DGL	0,9
	movw	[hl+2],ax	; i 				;[INF] 2, 1
; line  1266 :     
; line  1267 :     /* Declare a symbol select variable */
; line  1268 :     uint16_t    symbsel = 0;
$DGL	0,12
	movw	[hl],ax	; symbsel 				;[INF] 1, 1
; line  1269 : 
; line  1270 :     /* Display input onto LCD */
; line  1271 :     switch (position)
$DGL	0,15
	mov	a,[hl+8]	; position 			;[INF] 2, 1
	shrw	ax,8						;[INF] 2, 1
	subw	ax,#031H	; 49 				;[INF] 3, 1
	cmpw	ax,#04H	; 4 					;[INF] 3, 1
	skc							;[INF] 2, 1
	br	$!?L0176					;[INF] 3, 3
	movw	bc,ax						;[INF] 1, 1
	mov	a,?L0178+8[bc]					;[INF] 3, 1
	shlw	bc,1						;[INF] 2, 1
	mov	CS,a						;[INF] 2, 1
	movw	ax,?L0178[bc]					;[INF] 3, 1
	br	ax						;[INF] 2, 3
; line  1272 :     {        
??bb00_Display_Panel_String:
; line  1273 :         /* Start Section 1, Numerical */
; line  1274 :         case PANEL_LCD_LINE2:
?L0172:
; line  1275 :         {
??bb01_Display_Panel_String:
; line  1276 :              /* Cycle Through Each Digit */
; line  1277 :             for (i = 0; i < 6; i++)
$DGL	0,21
	clrw	ax						;[INF] 1, 1
	movw	[hl+2],ax	; i 				;[INF] 2, 1
?L0179:
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	cmpw	ax,#06H	; 6 					;[INF] 3, 1
	bnc	$?L0180						;[INF] 2, 4
; line  1278 :             {
??bb02_Display_Panel_String:
; line  1279 :                 /* Validate Input */
; line  1280 :                 flag = Validate_Input((const uint8_t) string[i],
;               &output_buf);
$DGL	0,24
	movw	ax,hl						;[INF] 1, 1
	addw	ax,#07H						;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	addw	ax,[hl+16]	; string 			;[INF] 3, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_Validate_Input				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
	movw	ax,bc						;[INF] 1, 1
	movw	[hl+4],ax	; flag 				;[INF] 2, 1
; line  1281 :                 
; line  1282 :                 /* Is Hex Number? */
; line  1283 :                 if ((flag == 1) || (flag == 2) || ((i == 3) && (
;              flag == 4)) || ((i == 6) && (flag == 3)))
$DGL	0,27
	onew	ax						;[INF] 1, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bz	$?L0184						;[INF] 2, 4
	incw	ax						;[INF] 1, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bz	$?L0184						;[INF] 2, 4
	incw	ax						;[INF] 1, 1
	cmpw	ax,[hl+2]	; i 				;[INF] 3, 1
	bnz	$?L0185						;[INF] 2, 4
	incw	ax						;[INF] 1, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bz	$?L0184						;[INF] 2, 4
?L0185:
	movw	ax,#06H	; 6 					;[INF] 3, 1
	cmpw	ax,[hl+2]	; i 				;[INF] 3, 1
	bnz	$?L0182						;[INF] 2, 4
	mov	x,#03H	; 3 					;[INF] 2, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bnz	$?L0182						;[INF] 2, 4
?L0184:
; line  1284 :                 {
??bb03_Display_Panel_String:
; line  1285 :                     SECTB_Glyph_Map (output_buf, i);
$DGL	0,29
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	push	ax						;[INF] 1, 1
	mov	a,[hl+7]	; output_buf 			;[INF] 2, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_SECTB_Glyph_Map				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
??eb03_Display_Panel_String:
; line  1286 :                 }
?L0182:
?L0183:
??eb02_Display_Panel_String:
; line  1287 :             }
$DGL	0,31
?L0181:
	incw	[hl+2]	; i 					;[INF] 3, 2
	br	$?L0179						;[INF] 2, 3
?L0180:
??eb01_Display_Panel_String:
; line  1288 :         }    
; line  1289 :         break;
$DGL	0,33
	br	$!?L0171					;[INF] 3, 3
; line  1290 : 
; line  1291 :         /* End Section 1 */
; line  1292 : 
; line  1293 :         /* Start Section C, Alphanumeric */
; line  1294 :         case PANEL_LCD_LINE1:
?L0173:
; line  1295 :         {
??bb04_Display_Panel_String:
; line  1296 :             /* Cycle through Each Section */
; line  1297 :             for (i = 0; i < 5; i++)
$DGL	0,41
	clrw	ax						;[INF] 1, 1
	movw	[hl+2],ax	; i 				;[INF] 2, 1
?L0186:
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	cmpw	ax,#05H	; 5 					;[INF] 3, 1
	bnc	$?L0187						;[INF] 2, 4
; line  1298 :             {
??bb05_Display_Panel_String:
; line  1299 :                 flag = Validate_Input((const uint8_t)string[i], 
;              &output_buf);
$DGL	0,43
	movw	ax,hl						;[INF] 1, 1
	addw	ax,#07H						;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	addw	ax,[hl+16]	; string 			;[INF] 3, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_Validate_Input				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
	movw	ax,bc						;[INF] 1, 1
	movw	[hl+4],ax	; flag 				;[INF] 2, 1
; line  1300 :                 
; line  1301 :                 /* Is Alphanumeric or Supported Symbol? */
; line  1302 :                 if (flag)
$DGL	0,46
	clrw	ax						;[INF] 1, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bz	$?L0189						;[INF] 2, 4
; line  1303 :                 {
??bb06_Display_Panel_String:
; line  1304 :                     /* Map Glyph to Segment Pattern */
; line  1305 :                     SECTC_Glyph_Map(output_buf, i + 1);
$DGL	0,49
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	incw	ax						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	mov	a,[hl+7]	; output_buf 			;[INF] 2, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_SECTC_Glyph_Map				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
??eb06_Display_Panel_String:
; line  1306 :                 }
?L0189:
?L0190:
??eb05_Display_Panel_String:
; line  1307 :             }
$DGL	0,51
?L0188:
	incw	[hl+2]	; i 					;[INF] 3, 2
	br	$?L0186						;[INF] 2, 3
?L0187:
??eb04_Display_Panel_String:
; line  1308 :         }    
; line  1309 :         break;
$DGL	0,53
	br	$!?L0171					;[INF] 3, 3
; line  1310 :         
; line  1311 :         /* Start Section 2, Signed Numerical */
; line  1312 :         case PANEL_LCD_LINE3:
?L0174:
; line  1313 :         {
??bb07_Display_Panel_String:
; line  1314 :             /* Turn off minus symbol */
; line  1315 :             SEG10_DEF &= 0xF7U;
$DGL	0,59
	mov	a,!SEG10					;[INF] 3, 1
	and	a,#0F7H	; 247 					;[INF] 2, 1
	mov	!SEG10,a					;[INF] 3, 1
; line  1316 :             
; line  1317 :             /* Cycle through each digit */
; line  1318 :             for (i = 0; i < 4; i++)
$DGL	0,62
	clrw	ax						;[INF] 1, 1
	movw	[hl+2],ax	; i 				;[INF] 2, 1
?L0191:
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	cmpw	ax,#04H	; 4 					;[INF] 3, 1
	bnc	$?L0192						;[INF] 2, 4
; line  1319 :             {
??bb08_Display_Panel_String:
; line  1320 :                 /* Validate Input */
; line  1321 :                 flag = Validate_Input((const uint8_t)string[i], 
;              &output_buf);
$DGL	0,65
	movw	ax,hl						;[INF] 1, 1
	addw	ax,#07H						;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	addw	ax,[hl+16]	; string 			;[INF] 3, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_Validate_Input				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
	movw	ax,bc						;[INF] 1, 1
	movw	[hl+4],ax	; flag 				;[INF] 2, 1
; line  1322 :             
; line  1323 :                 /* Is Number? */
; line  1324 :                 if ((flag == 1) || (flag == 2) || (flag == 4))
$DGL	0,68
	onew	ax						;[INF] 1, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bz	$?L0196						;[INF] 2, 4
	incw	ax						;[INF] 1, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bz	$?L0196						;[INF] 2, 4
	movw	ax,#04H	; 4 					;[INF] 3, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bnz	$?L0194						;[INF] 2, 4
?L0196:
; line  1325 :                 {
??bb09_Display_Panel_String:
; line  1326 :                     if ((i > 1) && (string[2] != '.'))
$DGL	0,70
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	cmpw	ax,#02H	; 2 					;[INF] 3, 1
	bc	$?L0197						;[INF] 2, 4
	movw	ax,[hl+16]	; string 			;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	mov	a,2[bc]						;[INF] 3, 1
	cmp	a,#02EH	; 46 					;[INF] 2, 1
	bz	$?L0197						;[INF] 2, 4
; line  1327 :                     {
??bb0A_Display_Panel_String:
; line  1328 :                         /* Map Glyph to Segment Pattern */
; line  1329 :                         SECTA_Glyph_Map(output_buf, i + 1);
$DGL	0,73
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	incw	ax						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	mov	a,[hl+7]	; output_buf 			;[INF] 2, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_SECTA_Glyph_Map				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
??eb0A_Display_Panel_String:
; line  1330 :                     }
; line  1331 :                     else
$DGL	0,75
	br	$?L0198						;[INF] 2, 3
?L0197:
; line  1332 :                     {
??bb0B_Display_Panel_String:
; line  1333 :                         /* Map Glyph to Segment Pattern */
; line  1334 :                         SECTA_Glyph_Map(output_buf, i);
$DGL	0,78
	movw	ax,[hl+2]	; i 				;[INF] 2, 1
	push	ax						;[INF] 1, 1
	mov	a,[hl+7]	; output_buf 			;[INF] 2, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_SECTA_Glyph_Map				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
??eb0B_Display_Panel_String:
; line  1335 :                     }
?L0198:
??eb09_Display_Panel_String:
; line  1336 :                 }
?L0194:
?L0195:
??eb08_Display_Panel_String:
; line  1337 :             }
$DGL	0,81
?L0193:
	incw	[hl+2]	; i 					;[INF] 3, 2
	br	$?L0191						;[INF] 2, 3
?L0192:
??eb07_Display_Panel_String:
; line  1338 :         }
; line  1339 :         break;
$DGL	0,83
	br	$?L0171						;[INF] 2, 3
; line  1340 : 
; line  1341 :         /* End Section 2 */
; line  1342 : 
; line  1343 :         /* Start Symbol Section */
; line  1344 :         case PANEL_LCD_SYMBOL:
?L0175:
; line  1345 :         {
??bb0C_Display_Panel_String:
; line  1346 :             if ((string[0] == 'F') || (string[0] == 'f'))
$DGL	0,90
	movw	ax,[hl+16]	; string 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	cmp	a,#046H	; 70 					;[INF] 2, 1
	bz	$?L0201						;[INF] 2, 4
	mov	a,[de]						;[INF] 1, 1
	cmp	a,#066H	; 102 					;[INF] 2, 1
	bnz	$?L0199						;[INF] 2, 4
?L0201:
; line  1347 :             {
??bb0D_Display_Panel_String:
; line  1348 :                 /* Validate Input */
; line  1349 :                 flag = Validate_Input((const uint8_t)string[1], 
;              &output_buf);
$DGL	0,93
	movw	ax,hl						;[INF] 1, 1
	addw	ax,#07H						;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,[hl+16]	; string 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de+1]					;[INF] 2, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_Validate_Input				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
	movw	ax,bc						;[INF] 1, 1
	movw	[hl+4],ax	; flag 				;[INF] 2, 1
; line  1350 :             
; line  1351 :                 /* Is Number ? */
; line  1352 :                 if (flag == 1)
$DGL	0,96
	onew	ax						;[INF] 1, 1
	cmpw	ax,[hl+4]	; flag 				;[INF] 3, 1
	bnz	$?L0202						;[INF] 2, 4
; line  1353 :                 {        
??bb0E_Display_Panel_String:
; line  1354 :                     /* Map Glyph to Segment Pattern */
; line  1355 :                     SECTF_Glyph_Map(output_buf);
$DGL	0,99
	mov	a,[hl+7]	; output_buf 			;[INF] 2, 1
	shrw	ax,8						;[INF] 2, 1
	call	!!_SECTF_Glyph_Map				;[INF] 4, 3
??eb0E_Display_Panel_String:
; line  1356 :                 }
?L0202:
?L0203:
??eb0D_Display_Panel_String:
; line  1357 :             }
; line  1358 :             else if (string[0] ==  '-')
$DGL	0,102
	br	$?L0200						;[INF] 2, 3
?L0199:
	movw	ax,[hl+16]	; string 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	cmp	a,#02DH	; 45 					;[INF] 2, 1
	bnz	$?L0204						;[INF] 2, 4
; line  1359 :             {
??bb0F_Display_Panel_String:
; line  1360 :                 if (string[1])
$DGL	0,104
	mov	a,[de+1]					;[INF] 2, 1
	cmp0	a						;[INF] 1, 1
	bz	$?L0206						;[INF] 2, 4
; line  1361 :                 {
??bb10_Display_Panel_String:
; line  1362 :                     /* Turn on minus symbol */
; line  1363 :                     SEG10_DEF/*lra10l*/ |= 0x08U;
$DGL	0,107
	mov	a,!SEG10					;[INF] 3, 1
	or	a,#08H	; 8 					;[INF] 2, 1
	mov	!SEG10,a					;[INF] 3, 1
??eb10_Display_Panel_String:
; line  1364 :                 }
; line  1365 :                 else
$DGL	0,109
	br	$?L0207						;[INF] 2, 3
?L0206:
; line  1366 :                 {
??bb11_Display_Panel_String:
; line  1367 :                     /* Turn off minus symbol */
; line  1368 :                     SEG10_DEF/*lra10l*/ &= 0xF7U;
$DGL	0,112
	mov	a,!SEG10					;[INF] 3, 1
	and	a,#0F7H	; 247 					;[INF] 2, 1
	mov	!SEG10,a					;[INF] 3, 1
??eb11_Display_Panel_String:
; line  1369 :                 }
?L0207:
??eb0F_Display_Panel_String:
; line  1370 :             }
; line  1371 :             else
$DGL	0,115
	br	$?L0205						;[INF] 2, 3
?L0204:
; line  1372 :             {
??bb12_Display_Panel_String:
; line  1373 :                 /* Convert To Symbol Code */
; line  1374 :                 symbsel = (uint8_t)string[0];
$DGL	0,118
	movw	ax,[hl+16]	; string 			;[INF] 2, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	shrw	ax,8						;[INF] 2, 1
	movw	[hl],ax	; symbsel 				;[INF] 1, 1
; line  1375 :                 symbsel = symbsel << 8;
$DGL	0,119
	shlw	ax,8						;[INF] 2, 1
	movw	[hl],ax	; symbsel 				;[INF] 1, 1
; line  1376 :                 symbsel |= (uint8_t)string[1];
$DGL	0,120
	movw	ax,[hl+16]	; string 			;[INF] 2, 1
	incw	ax						;[INF] 1, 1
	movw	de,ax						;[INF] 1, 1
	mov	a,[de]						;[INF] 1, 1
	mov	c,a						;[INF] 1, 1
	mov	a,[hl]	; symbsel 				;[INF] 1, 1
	or	a,c						;[INF] 2, 1
	mov	x,a						;[INF] 1, 1
	mov	a,[hl+1]	; symbsel 			;[INF] 2, 1
	movw	[hl],ax	; symbsel 				;[INF] 1, 1
; line  1377 :             
; line  1378 :                 /* Map Symbol to Segment */
; line  1379 :                 Symbol_Map(symbsel);
$DGL	0,123
	call	!!_Symbol_Map					;[INF] 4, 3
??eb12_Display_Panel_String:
; line  1380 :             }
?L0205:
?L0200:
??eb0C_Display_Panel_String:
; line  1381 :         }    
; line  1382 :         break;
; line  1383 :         
; line  1384 :         /* End Symbol Section */
; line  1385 : 
; line  1386 :         /* Do nothing for undefined selections */
; line  1387 :         default:
?L0176:
; line  1388 :         {
??bb13_Display_Panel_String:
??eb13_Display_Panel_String:
; line  1389 :             /* Bad Selection */
; line  1390 :         }    
; line  1391 :         break;
??eb00_Display_Panel_String:
; line  1392 :     }
?L0171:
; line  1393 : }
$DGL	0,137
??ef_Display_Panel_String:
	addw	sp,#0AH						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_Display_Panel_String:
; line  1394 : /***************************************************************
;              ********************************************************
; line  1395 : End of function Display_Panel_String
; line  1396 : ****************************************************************
;              *******************************************************/
; line  1397 : 
; line  1398 : /***************************************************************
;              ********************************************************
; line  1399 : * Function Name : Display_Panel_Delay
; line  1400 : * Description   : Delay routine for LCD or any other devices.
; line  1401 : * Arguments     :(uint32_t) units - time in, approximately, micr
;              osec
; line  1402 : * Return Value  : None
; line  1403 : ****************************************************************
;              *******************************************************/
; line  1404 : void Display_Panel_Delay (const uint32_t units)
; line  1405 : {
_Display_Panel_Delay:
$DGL	1,694
	push	hl						;[INF] 1, 1
	push	bc						;[INF] 1, 1
	push	ax						;[INF] 1, 1
	subw	sp,#04H						;[INF] 2, 1
	movw	hl,sp						;[INF] 3, 1
??bf_Display_Panel_Delay:
; line  1406 :     /* Declare a delay count */
; line  1407 :     uint32_t counter = units * PANEL_DELAY_TIMING;
$DGL	0,3
	movw	ax,[hl+4]	; units 			;[INF] 2, 1
	movw	_@RTARG0,ax					;[INF] 2, 1
	movw	ax,[hl+6]	; units 			;[INF] 2, 1
	movw	_@RTARG2,ax					;[INF] 2, 1
	movw	_@RTARG4,#05H	; 5 				;[INF] 4, 1
	clrw	ax						;[INF] 1, 1
	call	!@@lumul					;[INF] 3, 3
	movw	ax,_@RTARG2					;[INF] 2, 1
	movw	[hl+2],ax	; counter 			;[INF] 2, 1
	movw	ax,_@RTARG0					;[INF] 2, 1
	movw	[hl],ax	; counter 				;[INF] 1, 1
; line  1408 :     
; line  1409 :     /* Execute a NOP instruction */
; line  1410 :     while (counter--)
$DGL	0,6
?L0210:
	movw	ax,[hl+2]	; counter 			;[INF] 2, 1
	movw	bc,ax						;[INF] 1, 1
	movw	ax,[hl]	; counter 				;[INF] 1, 1
	subw	ax,#01H	; 1 					;[INF] 3, 1
	sknc							;[INF] 2, 1
	decw	bc						;[INF] 1, 1
?L0212:
	movw	[hl],ax	; counter 				;[INF] 1, 1
	xchw	ax,bc						;[INF] 1, 1
	movw	[hl+2],ax	; counter 			;[INF] 2, 1
	xchw	ax,bc						;[INF] 1, 1
	addw	ax,#01H	; 1 					;[INF] 3, 1
	sknc							;[INF] 2, 1
	incw	bc						;[INF] 1, 1
?L0213:
	addw	ax,bc						;[INF] 1, 1
	skc							;[INF] 2, 1
	bz	$?L0211						;[INF] 2, 4
?L0214:
; line  1411 :     {
??bb00_Display_Panel_Delay:
; line  1412 :         NOP();
$DGL	0,8
	nop							;[INF] 1, 1
??eb00_Display_Panel_Delay:
; line  1413 :     }
$DGL	0,9
	br	$?L0210						;[INF] 2, 3
?L0211:
; line  1414 : }
$DGL	0,10
??ef_Display_Panel_Delay:
	addw	sp,#08H						;[INF] 2, 1
	pop	hl						;[INF] 1, 1
	ret							;[INF] 1, 6
??ee_Display_Panel_Delay:
; line  1415 : /***************************************************************
;              ********************************************************
; line  1416 : End of function Display_Panel_Delay
; line  1417 : ****************************************************************
;              *******************************************************/
; line  1418 : 
; line  1419 : /***************************************************************
;              ********************************************************
; line  1420 : Function Name : LCD_ON
; line  1421 : Description   : Lights up all the segments of the Renesas LCD Pa
;              nel.
; line  1422 : Parameters    : None
; line  1423 : Return Value  : None
; line  1424 : ****************************************************************
;              *******************************************************/
; line  1425 : void LCD_ON (void)
; line  1426 : {
_LCD_ON:
$DGL	1,706
??bf_LCD_ON:
; line  1427 :     Display_Panel_String(PANEL_LCD_LINE2, "888:88");
$DGL	0,2
	movw	ax,#mirlw (?L0217)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#031H	; 49 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1428 :     Display_Panel_String(PANEL_LCD_LINE3, "888");
$DGL	0,3
	movw	ax,#mirlw (?L0218)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#032H	; 50 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1429 :     Display_Panel_String(PANEL_LCD_LINE1, "88888");
$DGL	0,4
	movw	ax,#mirlw (?L0219)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#033H	; 51 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1430 :     
; line  1431 :     
; line  1432 :     Display_Panel_String(PANEL_LCD_SYMBOL, "-1");
$DGL	0,7
	movw	ax,#mirlw (?L0220)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1433 :     Display_Panel_String(PANEL_LCD_SYMBOL, "11");
$DGL	0,8
	movw	ax,#mirlw (?L0221)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1434 :     Display_Panel_String(PANEL_LCD_SYMBOL, "21");
$DGL	0,9
	movw	ax,#mirlw (?L0222)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1435 :     Display_Panel_String(PANEL_LCD_SYMBOL, "31");
$DGL	0,10
	movw	ax,#mirlw (?L0223)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1436 :     Display_Panel_String(PANEL_LCD_SYMBOL, "41");
$DGL	0,11
	movw	ax,#mirlw (?L0224)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1437 :     Display_Panel_String(PANEL_LCD_SYMBOL, "51");
$DGL	0,12
	movw	ax,#mirlw (?L0225)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1438 :     Display_Panel_String(PANEL_LCD_SYMBOL, "61");
$DGL	0,13
	movw	ax,#mirlw (?L0226)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1439 :     Display_Panel_String(PANEL_LCD_SYMBOL, "71");
$DGL	0,14
	movw	ax,#mirlw (?L0227)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1440 :     Display_Panel_String(PANEL_LCD_SYMBOL, "81");
$DGL	0,15
	movw	ax,#mirlw (?L0228)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1441 :     Display_Panel_String(PANEL_LCD_SYMBOL, "91");
$DGL	0,16
	movw	ax,#mirlw (?L0229)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1442 :     Display_Panel_String(PANEL_LCD_SYMBOL, "a1");
$DGL	0,17
	movw	ax,#mirlw (?L0230)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1443 :     Display_Panel_String(PANEL_LCD_SYMBOL, "b1");
$DGL	0,18
	movw	ax,#mirlw (?L0231)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1444 :     Display_Panel_String(PANEL_LCD_SYMBOL, "c1");
$DGL	0,19
	movw	ax,#mirlw (?L0232)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1445 :     Display_Panel_String(PANEL_LCD_SYMBOL, "d1");
$DGL	0,20
	movw	ax,#mirlw (?L0233)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1446 :     Display_Panel_String(PANEL_LCD_SYMBOL, "e1");
$DGL	0,21
	movw	ax,#mirlw (?L0234)				;[INF] 3, 1
	push	ax						;[INF] 1, 1
	movw	ax,#034H	; 52 				;[INF] 3, 1
	call	!!_Display_Panel_String				;[INF] 4, 3
	pop	ax						;[INF] 1, 1
; line  1447 :     
; line  1448 :     SECTD_Glyph_Map(1);
$DGL	0,23
	onew	ax						;[INF] 1, 1
	call	!!_SECTD_Glyph_Map				;[INF] 4, 3
; line  1449 :     SECTD_Glyph_Map(2);
$DGL	0,24
	movw	ax,#02H	; 2 					;[INF] 3, 1
	call	!!_SECTD_Glyph_Map				;[INF] 4, 3
; line  1450 :     SECTD_Glyph_Map(3);
$DGL	0,25
	movw	ax,#03H	; 3 					;[INF] 3, 1
	call	!!_SECTD_Glyph_Map				;[INF] 4, 3
; line  1451 :     SECTD_Glyph_Map(4);
$DGL	0,26
	movw	ax,#04H	; 4 					;[INF] 3, 1
	call	!!_SECTD_Glyph_Map				;[INF] 4, 3
; line  1452 :     SECTE_Glyph_Map(3);
$DGL	0,27
	movw	ax,#03H	; 3 					;[INF] 3, 1
	call	!!_SECTE_Glyph_Map				;[INF] 4, 3
; line  1453 :     SECTE_Glyph_Map(4);
$DGL	0,28
	movw	ax,#04H	; 4 					;[INF] 3, 1
	call	!!_SECTE_Glyph_Map				;[INF] 4, 3
; line  1454 :     SECTE_Glyph_Map(5);
$DGL	0,29
	movw	ax,#05H	; 5 					;[INF] 3, 1
	call	!!_SECTE_Glyph_Map				;[INF] 4, 3
; line  1455 :     SECTE_Glyph_Map(6);
$DGL	0,30
	movw	ax,#06H	; 6 					;[INF] 3, 1
	call	!!_SECTE_Glyph_Map				;[INF] 4, 3
; line  1456 : }
$DGL	0,31
??ef_LCD_ON:
	ret							;[INF] 1, 6
??ee_LCD_ON:
; line  1457 : /***************************************************************
;              ********************************************************
; line  1458 : End of function LCD_ON
; line  1459 : ****************************************************************
;              *******************************************************/
; line  1460 : 
; line  1461 : /***************************************************************
;              ********************************************************
; line  1462 : * Function Name: LCD_DISPLAY_ON
; line  1463 : * Description  : Turns on all LCD segments.
; line  1464 : * Arguments    : None
; line  1465 : * Return Value : None
; line  1466 : ****************************************************************
;              *******************************************************/
; line  1467 : void LCD_DISPLAY_ON (void)
; line  1468 : {
_LCD_DISPLAY_ON:
$DGL	1,712
??bf_LCD_DISPLAY_ON:
; line  1469 :     SEG0 = 0x0f;
$DGL	0,2
	mov	!SEG0,#0FH	; 15 				;[INF] 4, 1
; line  1470 :     SEG1 = 0x0f;
$DGL	0,3
	mov	!SEG1,#0FH	; 15 				;[INF] 4, 1
; line  1471 :     SEG2 = 0x0f;
$DGL	0,4
	mov	!SEG2,#0FH	; 15 				;[INF] 4, 1
; line  1472 :     SEG3 = 0x0f;
$DGL	0,5
	mov	!SEG3,#0FH	; 15 				;[INF] 4, 1
; line  1473 :     SEG4 = 0x0f;
$DGL	0,6
	mov	!SEG4,#0FH	; 15 				;[INF] 4, 1
; line  1474 :     SEG5 = 0x0f;
$DGL	0,7
	mov	!SEG5,#0FH	; 15 				;[INF] 4, 1
; line  1475 :     SEG6 = 0x0f;
$DGL	0,8
	mov	!SEG6,#0FH	; 15 				;[INF] 4, 1
; line  1476 :     SEG7 = 0x0f;
$DGL	0,9
	mov	!SEG7,#0FH	; 15 				;[INF] 4, 1
; line  1477 :     SEG8 = 0x0f;
$DGL	0,10
	mov	!SEG8,#0FH	; 15 				;[INF] 4, 1
; line  1478 :     SEG9 = 0x0f;
$DGL	0,11
	mov	!SEG9,#0FH	; 15 				;[INF] 4, 1
; line  1479 :     SEG10 = 0x0f;
$DGL	0,12
	mov	!SEG10,#0FH	; 15 				;[INF] 4, 1
; line  1480 :     SEG11 = 0x0f;
$DGL	0,13
	mov	!SEG11,#0FH	; 15 				;[INF] 4, 1
; line  1481 :     SEG12 = 0x0f;
$DGL	0,14
	mov	!SEG12,#0FH	; 15 				;[INF] 4, 1
; line  1482 :     SEG13 = 0x0f;
$DGL	0,15
	mov	!SEG13,#0FH	; 15 				;[INF] 4, 1
; line  1483 :     SEG14 = 0x0f;
$DGL	0,16
	mov	!SEG14,#0FH	; 15 				;[INF] 4, 1
; line  1484 :     SEG15 = 0x0f;
$DGL	0,17
	mov	!SEG15,#0FH	; 15 				;[INF] 4, 1
; line  1485 :     SEG16 = 0x0f;
$DGL	0,18
	mov	!SEG16,#0FH	; 15 				;[INF] 4, 1
; line  1486 :     SEG17 = 0x0f;
$DGL	0,19
	mov	!SEG17,#0FH	; 15 				;[INF] 4, 1
; line  1487 :     SEG18 = 0x0f;
$DGL	0,20
	mov	!SEG18,#0FH	; 15 				;[INF] 4, 1
; line  1488 :     SEG19 = 0x0f;
$DGL	0,21
	mov	!SEG19,#0FH	; 15 				;[INF] 4, 1
; line  1489 :     SEG20 = 0x0f;
$DGL	0,22
	mov	!SEG20,#0FH	; 15 				;[INF] 4, 1
; line  1490 :     SEG21 = 0x0f;
$DGL	0,23
	mov	!SEG21,#0FH	; 15 				;[INF] 4, 1
; line  1491 :     SEG22 = 0x0f;
$DGL	0,24
	mov	!SEG22,#0FH	; 15 				;[INF] 4, 1
; line  1492 :     SEG23 = 0x0f;
$DGL	0,25
	mov	!SEG23,#0FH	; 15 				;[INF] 4, 1
; line  1493 :     SEG24 = 0x0f;
$DGL	0,26
	mov	!SEG24,#0FH	; 15 				;[INF] 4, 1
; line  1494 :     SEG25 = 0x0f;
$DGL	0,27
	mov	!SEG25,#0FH	; 15 				;[INF] 4, 1
; line  1495 :     SEG26 = 0x0f;
$DGL	0,28
	mov	!SEG26,#0FH	; 15 				;[INF] 4, 1
; line  1496 :     SEG27 = 0x0f;
$DGL	0,29
	mov	!SEG27,#0FH	; 15 				;[INF] 4, 1
; line  1497 :     SEG28 = 0x0f;
$DGL	0,30
	mov	!SEG28,#0FH	; 15 				;[INF] 4, 1
; line  1498 :     SEG29 = 0x0f;
$DGL	0,31
	mov	!SEG29,#0FH	; 15 				;[INF] 4, 1
; line  1499 :     SEG30 = 0x0f;
$DGL	0,32
	mov	!SEG30,#0FH	; 15 				;[INF] 4, 1
; line  1500 :     SEG31 = 0x0f;
$DGL	0,33
	mov	!SEG31,#0FH	; 15 				;[INF] 4, 1
; line  1501 :     SEG32 = 0x0f;
$DGL	0,34
	mov	!SEG32,#0FH	; 15 				;[INF] 4, 1
; line  1502 :     SEG33 = 0x0f;
$DGL	0,35
	mov	!SEG33,#0FH	; 15 				;[INF] 4, 1
; line  1503 :     SEG34 = 0x0f;
$DGL	0,36
	mov	!SEG34,#0FH	; 15 				;[INF] 4, 1
; line  1504 :     SEG35 = 0x0f;
$DGL	0,37
	mov	!SEG35,#0FH	; 15 				;[INF] 4, 1
; line  1505 :     SEG36 = 0x0f;
$DGL	0,38
	mov	!SEG36,#0FH	; 15 				;[INF] 4, 1
; line  1506 :     SEG37 = 0x0f;
$DGL	0,39
	mov	!SEG37,#0FH	; 15 				;[INF] 4, 1
; line  1507 :     SEG38 = 0x0f;
$DGL	0,40
	mov	!SEG38,#0FH	; 15 				;[INF] 4, 1
; line  1508 : }
$DGL	0,41
??ef_LCD_DISPLAY_ON:
	ret							;[INF] 1, 6
??ee_LCD_DISPLAY_ON:
; line  1509 : /***************************************************************
;              ********************************************************
; line  1510 : End of function LCD_DISPLAY_ON
; line  1511 : ****************************************************************
;              *******************************************************/
; line  1512 : 
; line  1513 : /***************************************************************
;              ********************************************************
; line  1514 : * Function Name: LCD_DISPLAY_OFF
; line  1515 : * Description  : Turns off all segments.
; line  1516 : * Arguments    : None
; line  1517 : * Return Value : None
; line  1518 : ****************************************************************
;              *******************************************************/
; line  1519 : void LCD_DISPLAY_OFF (void)
; line  1520 : {
_LCD_DISPLAY_OFF:
$DGL	1,718
??bf_LCD_DISPLAY_OFF:
; line  1521 :     SEG0 = 0x00;
$DGL	0,2
	clrb	!SEG0						;[INF] 3, 1
; line  1522 :     SEG1 = 0x00;
$DGL	0,3
	clrb	!SEG1						;[INF] 3, 1
; line  1523 :     SEG2 = 0x00;
$DGL	0,4
	clrb	!SEG2						;[INF] 3, 1
; line  1524 :     SEG3 = 0x00;
$DGL	0,5
	clrb	!SEG3						;[INF] 3, 1
; line  1525 :     SEG4 = 0x00;
$DGL	0,6
	clrb	!SEG4						;[INF] 3, 1
; line  1526 :     SEG5 = 0x00;
$DGL	0,7
	clrb	!SEG5						;[INF] 3, 1
; line  1527 :     SEG6 = 0x00;
$DGL	0,8
	clrb	!SEG6						;[INF] 3, 1
; line  1528 :     SEG7 = 0x00;
$DGL	0,9
	clrb	!SEG7						;[INF] 3, 1
; line  1529 :     SEG8 = 0x00;
$DGL	0,10
	clrb	!SEG8						;[INF] 3, 1
; line  1530 :     SEG9 = 0x00;
$DGL	0,11
	clrb	!SEG9						;[INF] 3, 1
; line  1531 :     SEG10 = 0x00;
$DGL	0,12
	clrb	!SEG10						;[INF] 3, 1
; line  1532 :     SEG11 = 0x00;
$DGL	0,13
	clrb	!SEG11						;[INF] 3, 1
; line  1533 :     SEG12 = 0x00;
$DGL	0,14
	clrb	!SEG12						;[INF] 3, 1
; line  1534 :     SEG13 = 0x00;
$DGL	0,15
	clrb	!SEG13						;[INF] 3, 1
; line  1535 :     SEG14 = 0x00;
$DGL	0,16
	clrb	!SEG14						;[INF] 3, 1
; line  1536 :     SEG15 = 0x00;
$DGL	0,17
	clrb	!SEG15						;[INF] 3, 1
; line  1537 :     SEG16 = 0x00;
$DGL	0,18
	clrb	!SEG16						;[INF] 3, 1
; line  1538 :     SEG17 = 0x00;
$DGL	0,19
	clrb	!SEG17						;[INF] 3, 1
; line  1539 :     SEG18 = 0x00;
$DGL	0,20
	clrb	!SEG18						;[INF] 3, 1
; line  1540 :     SEG19 = 0x00;
$DGL	0,21
	clrb	!SEG19						;[INF] 3, 1
; line  1541 :     SEG20 = 0x00;
$DGL	0,22
	clrb	!SEG20						;[INF] 3, 1
; line  1542 :     SEG21 = 0x00;
$DGL	0,23
	clrb	!SEG21						;[INF] 3, 1
; line  1543 :     SEG22 = 0x00;
$DGL	0,24
	clrb	!SEG22						;[INF] 3, 1
; line  1544 :     SEG23 = 0x00;
$DGL	0,25
	clrb	!SEG23						;[INF] 3, 1
; line  1545 :     SEG24 = 0x00;
$DGL	0,26
	clrb	!SEG24						;[INF] 3, 1
; line  1546 :     SEG25 = 0x00;
$DGL	0,27
	clrb	!SEG25						;[INF] 3, 1
; line  1547 :     SEG26 = 0x00;
$DGL	0,28
	clrb	!SEG26						;[INF] 3, 1
; line  1548 :     SEG27 = 0x00;
$DGL	0,29
	clrb	!SEG27						;[INF] 3, 1
; line  1549 :     SEG28 = 0x00;
$DGL	0,30
	clrb	!SEG28						;[INF] 3, 1
; line  1550 :     SEG29 = 0x00;
$DGL	0,31
	clrb	!SEG29						;[INF] 3, 1
; line  1551 :     SEG30 = 0x00;
$DGL	0,32
	clrb	!SEG30						;[INF] 3, 1
; line  1552 :     SEG31 = 0x00;
$DGL	0,33
	clrb	!SEG31						;[INF] 3, 1
; line  1553 :     SEG32 = 0x00;
$DGL	0,34
	clrb	!SEG32						;[INF] 3, 1
; line  1554 :     SEG33 = 0x00;
$DGL	0,35
	clrb	!SEG33						;[INF] 3, 1
; line  1555 :     SEG34 = 0x00;
$DGL	0,36
	clrb	!SEG34						;[INF] 3, 1
; line  1556 :     SEG35 = 0x00;
$DGL	0,37
	clrb	!SEG35						;[INF] 3, 1
; line  1557 :     SEG36 = 0x00;
$DGL	0,38
	clrb	!SEG36						;[INF] 3, 1
; line  1558 :     SEG37 = 0x00;
$DGL	0,39
	clrb	!SEG37						;[INF] 3, 1
; line  1559 :     SEG38 = 0x00;
$DGL	0,40
	clrb	!SEG38						;[INF] 3, 1
; line  1560 : }
$DGL	0,41
??ef_LCD_DISPLAY_OFF:
	ret							;[INF] 1, 6
??ee_LCD_DISPLAY_OFF:

@@CODE	CSEG	BASE

@@BASE	CSEG	BASE
	END


; *** Code Information ***
;
; $FILE C:\Users\nguye\Downloads\dtmf_reader_rl78\RSK_Module_test\RSKRL78L13\AD
;	C_Repeat\cg_src\lcd_panel.c
;
; $FUNC Init_Display_Panel(63)
;	void=(void)
;	CODE SIZE= 33 bytes, CLOCK_SIZE= 24 clocks, STACK_SIZE= 4 bytes
;
; $CALL Init_Maps(65)
;	void=(void)
;
; $CALL Clear_Display(68)
;	void=(void)
;
; $CALL R_LCD_Start(77)
;	void=(void)
;
; $CALL R_LCD_Voltage_On(80)
;	void=(void)
;
; $FUNC Validate_Input(104)
;	bc=(unsigned char input:x, pointer output:[sp+4])
;	CODE SIZE= 294 bytes, CLOCK_SIZE= 265 clocks, STACK_SIZE= 4 bytes
;
; $FUNC SECTA_Glyph_Map(227)
;	void=(unsigned char glyph:x, unsigned short digit:[sp+4])
;	CODE SIZE= 161 bytes, CLOCK_SIZE= 122 clocks, STACK_SIZE= 8 bytes
;
; $FUNC SECTB_Glyph_Map(314)
;	void=(unsigned char glyph:x, unsigned short digit:[sp+4])
;	CODE SIZE= 269 bytes, CLOCK_SIZE= 192 clocks, STACK_SIZE= 8 bytes
;
; $FUNC SECTC_Glyph_Map(471)
;	void=(unsigned char glyph:x, unsigned short digit:[sp+4])
;	CODE SIZE= 237 bytes, CLOCK_SIZE= 163 clocks, STACK_SIZE= 12 bytes
;
; $FUNC SECTD_Glyph_Map(577)
;	void=(unsigned char level:x)
;	CODE SIZE= 144 bytes, CLOCK_SIZE= 77 clocks, STACK_SIZE= 4 bytes
;
; $FUNC SECTE_Glyph_Map(642)
;	void=(unsigned short level:ax)
;	CODE SIZE= 314 bytes, CLOCK_SIZE= 180 clocks, STACK_SIZE= 8 bytes
;
; $FUNC SECTF_Glyph_Map(749)
;	void=(unsigned char day:x)
;	CODE SIZE= 403 bytes, CLOCK_SIZE= 179 clocks, STACK_SIZE= 4 bytes
;
; $FUNC Symbol_Map(875)
;	bc=(unsigned short input:ax)
;	CODE SIZE= 659 bytes, CLOCK_SIZE= 395 clocks, STACK_SIZE= 6 bytes
;
; $FUNC Clear_Display(1119)
;	void=(void)
;	CODE SIZE= 36 bytes, CLOCK_SIZE= 30 clocks, STACK_SIZE= 6 bytes
;
; $FUNC Init_Maps(1147)
;	void=(void)
;	CODE SIZE= 737 bytes, CLOCK_SIZE= 314 clocks, STACK_SIZE= 0 bytes
;
; $FUNC Display_Panel_String(1257)
;	void=(unsigned char position:x, pointer string:[sp+4])
;	CODE SIZE= 418 bytes, CLOCK_SIZE= 324 clocks, STACK_SIZE= 18 bytes
;
; $CALL Validate_Input(1280)
;	bc=(int:ax, pointer:[sp+4])
;
; $CALL SECTB_Glyph_Map(1285)
;	void=(int:ax, unsigned short:[sp+4])
;
; $CALL Validate_Input(1299)
;	bc=(int:ax, pointer:[sp+4])
;
; $CALL SECTC_Glyph_Map(1305)
;	void=(int:ax, unsigned short:[sp+4])
;
; $CALL Validate_Input(1321)
;	bc=(int:ax, pointer:[sp+4])
;
; $CALL SECTA_Glyph_Map(1329)
;	void=(int:ax, unsigned short:[sp+4])
;
; $CALL SECTA_Glyph_Map(1334)
;	void=(int:ax, unsigned short:[sp+4])
;
; $CALL Validate_Input(1349)
;	bc=(int:ax, pointer:[sp+4])
;
; $CALL SECTF_Glyph_Map(1355)
;	void=(int:ax)
;
; $CALL Symbol_Map(1379)
;	bc=(unsigned short:ax)
;
; $FUNC Display_Panel_Delay(1405)
;	void=(unsigned long units:ax,bc)
;	CODE SIZE= 64 bytes, CLOCK_SIZE= 49 clocks, STACK_SIZE= 14 bytes
;
; $FUNC LCD_ON(1426)
;	void=(void)
;	CODE SIZE= 271 bytes, CLOCK_SIZE= 164 clocks, STACK_SIZE= 6 bytes
;
; $CALL Display_Panel_String(1427)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1428)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1429)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1432)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1433)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1434)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1435)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1436)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1437)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1438)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1439)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1440)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1441)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1442)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1443)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1444)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1445)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL Display_Panel_String(1446)
;	void=(int:ax, pointer:[sp+4])
;
; $CALL SECTD_Glyph_Map(1448)
;	void=(int:ax)
;
; $CALL SECTD_Glyph_Map(1449)
;	void=(int:ax)
;
; $CALL SECTD_Glyph_Map(1450)
;	void=(int:ax)
;
; $CALL SECTD_Glyph_Map(1451)
;	void=(int:ax)
;
; $CALL SECTE_Glyph_Map(1452)
;	void=(unsigned short:ax)
;
; $CALL SECTE_Glyph_Map(1453)
;	void=(unsigned short:ax)
;
; $CALL SECTE_Glyph_Map(1454)
;	void=(unsigned short:ax)
;
; $CALL SECTE_Glyph_Map(1455)
;	void=(unsigned short:ax)
;
; $FUNC LCD_DISPLAY_ON(1468)
;	void=(void)
;	CODE SIZE= 157 bytes, CLOCK_SIZE= 45 clocks, STACK_SIZE= 0 bytes
;
; $FUNC LCD_DISPLAY_OFF(1520)
;	void=(void)
;	CODE SIZE= 118 bytes, CLOCK_SIZE= 45 clocks, STACK_SIZE= 0 bytes

; Target chip : R5F10WMG
; Device file : V1.00 
