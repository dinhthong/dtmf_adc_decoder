


78K0R Assembler V1.80                                                                                    Date: 5 Jun 2021 Page:   1



Command:  -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\Device\RL78\Devicefile Debug\r_cg_lcd.asm -_msgoff -pDebu
          g -oDebug -zs
Para-file:
In-file:  Debug\r_cg_lcd.asm
Obj-file: Debug\r_cg_lcd.rel
Prn-file: Debug\r_cg_lcd.prn

      Assemble list

 ALNO  STNO ADRS   OBJECT   M I  SOURCE STATEMENT

    1     1                      ; 78K0R C Compiler V2.60 Assembler Source        Date: 5 Jun 2021 Time:10:38:22
    2     2                      
    3     3                      ; Command   : -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\
    4     4                      ;             Device\RL78\Devicefile ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_lcd.c
    5     5                      ;              -oDebug -_msgoff -nq -i..\RSKRL78L13\ADC_Repeat\cg_src -v -w2 -z
    6     6                      ;             ps -mm -mi0 -saDebug -li -no -g2
    7     7                      ; In-file   : ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_lcd.c
    8     8                      ; Asm-file  : Debug\r_cg_lcd.asm
    9     9                      ; Para-file : 
   10    10                      
   11    11                      $PROCESSOR(F10WMG)
   12    12                      $DEBUG
   13    13                      $NODEBUGA
   14    14                      $KANJICODE SJIS
   15    15                      $TOL_INF        03FH, 0260H, 00H, 04000H, 00H, 00H, 00H
   16    16                      
   17    17                      $DGS    FIL_NAM, .file,         031H,   0FFFEH, 03FH,   067H,   01H,    00H
   18    18                      $DGS    AUX_FIL, r_cg_lcd.c
   19    19                      $DGS    MOD_NAM, r_cg_lcd,      00H,    0FFFEH, 00H,    077H,   00H,    00H
   20    20                      $DGS    SEC_NAM, @@BITS,        U,      U,      00H,    078H,   00H,    00H
   21    21                      $DGS    SEC_NAM, @@CNST,        U,      U,      00H,    078H,   00H,    00H
   22    22                      $DGS    SEC_NAM, @@R_INIT,      U,      U,      00H,    078H,   00H,    00H
   23    23                      $DGS    SEC_NAM, @@INIT,        U,      U,      00H,    078H,   00H,    00H
   24    24                      $DGS    SEC_NAM, @@DATA,        U,      U,      00H,    078H,   00H,    00H
   25    25                      $DGS    SEC_NAM, @@R_INIS,      U,      U,      00H,    078H,   00H,    00H
   26    26                      $DGS    SEC_NAM, @@INIS,        U,      U,      00H,    078H,   00H,    00H
   27    27                      $DGS    SEC_NAM, @@DATS,        U,      U,      00H,    078H,   00H,    00H
   28    28                      $DGS    SEC_NAM, @@CNSTL,       U,      U,      00H,    078H,   00H,    00H
   29    29                      $DGS    SEC_NAM, @@RLINIT,      U,      U,      00H,    078H,   00H,    00H
   30    30                      $DGS    SEC_NAM, @@INITL,       U,      U,      00H,    078H,   00H,    00H
   31    31                      $DGS    SEC_NAM, @@DATAL,       U,      U,      00H,    078H,   00H,    00H
   32    32                      $DGS    SEC_NAM, @@CALT,        U,      U,      00H,    078H,   00H,    00H
   33    33                      $DGS    SEC_NAM, @@CODE,        U,      U,      00H,    078H,   00H,    00H
   34    34                      $DGS    SEC_NAM, @@CODEL,       U,      U,      00H,    078H,   00H,    00H
   35    35                      $DGS    SEC_NAM, @@BASE,        U,      U,      00H,    078H,   00H,    00H
   36    36                      $DGS    GLV_SYM, _R_LCD_Create, U,      U,      01H,    026H,   01H,    02H
   37    37                      $DGS    AUX_FUN, 00H,           U,      U,      019H,   01H,    00H
   38    38                      $DGS    BEG_FUN, ??bf_R_LCD_Create,     U,      U,      00H,    065H,   01H,    00H
   39    39                      $DGS    AUX_BEG, 043H,          00H,    019H
   40    40                      $DGS    END_FUN, ??ef_R_LCD_Create,     U,      U,      00H,    065H,   01H,    00H
   41    41                      $DGS    AUX_END, 033H
   42    42                      $DGS    GLV_SYM, _R_LCD_Start,  U,      U,      01H,    026H,   01H,    02H
   43    43                      $DGS    AUX_FUN, 00H,           U,      U,      01FH,   01H,    00H
   44    44                      $DGS    BEG_FUN, ??bf_R_LCD_Start,      U,      U,      00H,    065H,   01H,    00H
   45    45                      $DGS    AUX_BEG, 07DH,          00H,    01FH
   46    46                      $DGS    END_FUN, ??ef_R_LCD_Start,      U,      U,      00H,    065H,   01H,    00H
   47    47                      $DGS    AUX_END, 03H
   48    48                      $DGS    GLV_SYM, _R_LCD_Stop,   U,      U,      01H,    026H,   01H,    02H
   49    49                      $DGS    AUX_FUN, 00H,           U,      U,      025H,   01H,    00H
   50    50                      $DGS    BEG_FUN, ??bf_R_LCD_Stop,       U,      U,      00H,    065H,   01H,    00H
   51    51                      $DGS    AUX_BEG, 087H,          00H,    025H
   52    52                      $DGS    END_FUN, ??ef_R_LCD_Stop,       U,      U,      00H,    065H,   01H,    00H
   53    53                      $DGS    AUX_END, 03H
   54    54                      $DGS    GLV_SYM, _R_LCD_Voltage_Off,    U,      U,      01H,    026H,   01H,    02H
   55    55                      $DGS    AUX_FUN, 00H,           U,      U,      02BH,   01H,    00H
   56    56                      $DGS    BEG_FUN, ??bf_R_LCD_Voltage_Off,        U,      U,      00H,    065H,   01H,    00H
   57    57                      $DGS    AUX_BEG, 091H,          00H,    02BH
   58    58                      $DGS    END_FUN, ??ef_R_LCD_Voltage_Off,        U,      U,      00H,    065H,   01H,    00H
   59    59                      $DGS    AUX_END, 05H
   60    60                      $DGS    GLV_SYM, _R_LCD_Voltage_On,     U,      U,      01H,    026H,   01H,    02H
   61    61                      $DGS    AUX_FUN, 00H,           U,      U,      031H,   01H,    00H
   62    62                      $DGS    BEG_FUN, ??bf_R_LCD_Voltage_On, U,      U,      00H,    065H,   01H,    00H
   63    63                      $DGS    AUX_BEG, 09FH,          00H,    031H
   64    64                      $DGS    END_FUN, ??ef_R_LCD_Voltage_On, U,      U,      00H,    065H,   01H,    00H
   65    65                      $DGS    AUX_END, 08H
   66    66                      $DGS    GLV_SYM, _R_TAU_MsDelay,        U,      U,      01H,    02H,    01H,    02H
   67    67                      $DGS    AUX_FUN, 00H,           U,      U,      00H,    01H,    00H
   68    68                      
   69    69                              EXTRN   _R_TAU_MsDelay
   70    70                              PUBLIC  _R_LCD_Create
   71    71                              PUBLIC  _R_LCD_Start
   72    72                              PUBLIC  _R_LCD_Stop
   73    73                              PUBLIC  _R_LCD_Voltage_Off
   74    74                              PUBLIC  _R_LCD_Voltage_On
   75    75                      
   76    76 -----                @@BITS  BSEG
   77    77                      
   78    78 -----                @@CNST  CSEG    MIRRORP
   79    79                      
   80    80 -----                @@R_INIT        CSEG    UNIT64KP
   81    81                      
   82    82 -----                @@INIT  DSEG    BASEP
   83    83                      
   84    84 -----                @@DATA  DSEG    BASEP
   85    85                      
   86    86 -----                @@R_INIS        CSEG    UNIT64KP
   87    87                      
   88    88 -----                @@INIS  DSEG    SADDRP
   89    89                      
   90    90 -----                @@DATS  DSEG    SADDRP
   91    91                      
   92    92 -----                @@CNSTL CSEG    PAGE64KP
   93    93                      
   94    94 -----                @@RLINIT        CSEG    UNIT64KP
   95    95                      
   96    96 -----                @@INITL DSEG    UNIT64KP
   97    97                      
   98    98 -----                @@DATAL DSEG    UNIT64KP
   99    99                      
  100   100 -----                @@CALT  CSEG    CALLT0
  101   101                      
  102   102                      ; line     1 : /***************************************************************
  103   103                      ;              ********************************************************
  104   104                      ; line     2 : * DISCLAIMER
  105   105                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  106   106                      ;              nd is only 
  107   107                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  108   108                      ;              orized. This 
  109   109                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  110   110                      ;              otected under 
  111   111                      ; line     6 : * all applicable laws, including copyright laws.
  112   112                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  113   113                      ;              IES REGARDING 
  114   114                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  115   115                      ;              G BUT NOT 
  116   116                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  117   117                      ;              ULAR PURPOSE 
  118   118                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  119   119                      ;              AIMED.
  120   120                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  121   121                      ;               RENESAS 
  122   122                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  123   123                      ;              ALL BE LIABLE 
  124   124                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  125   125                      ;               DAMAGES FOR 
  126   126                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  127   127                      ;              FILIATES HAVE 
  128   128                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  129   129                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  130   130                      ;               this software 
  131   131                      ; line    17 : * and to discontinue the availability of this software.  By usin
  132   132                      ;              g this software, 
  133   133                      ; line    18 : * you agree to the additional terms and conditions found by acce
  134   134                      ;              ssing the 
  135   135                      ; line    19 : * following link:
  136   136                      ; line    20 : * http://www.renesas.com/disclaimer
  137   137                      ; line    21 : *
  138   138                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  139   139                      ;               reserved.
  140   140                      ; line    23 : ****************************************************************
  141   141                      ;              *******************************************************/
  142   142                      ; line    24 : 
  143   143                      ; line    25 : /***************************************************************
  144   144                      ;              ********************************************************
  145   145                      ; line    26 : * File Name    : r_cg_macrodriver.h
  146   146                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  147   147                      ;              ]
  148   148                      ; line    28 : * Device(s)    : R5F10WMG
  149   149                      ; line    29 : * Tool-Chain   : CA78K0R
  150   150                      ; line    30 : * Description  : This file implements general head file.
  151   151                      ; line    31 : * Creation Date: 05-Jun-21
  152   152                      ; line    32 : ****************************************************************
  153   153                      ;              *******************************************************/
  154   154                      ; line    33 : #ifndef MODULEID_H
  155   155                      ; line    34 : #define MODULEID_H
  156   156                      ; line    35 : /***************************************************************
  157   157                      ;              ********************************************************
  158   158                      ; line    36 : Includes
  159   159                      ; line    37 : ****************************************************************
  160   160                      ;              *******************************************************/
  161   161                      ; line    38 : #pragma sfr
  162   162                      ; line    39 : #pragma DI
  163   163                      ; line    40 : #pragma EI
  164   164                      ; line    41 : #pragma NOP
  165   165                      ; line    42 : #pragma HALT
  166   166                      ; line    43 : #pragma STOP
  167   167                      ; line    44 : 
  168   168                      ; line    45 : /***************************************************************
  169   169                      ;              ********************************************************
  170   170                      ; line    46 : Macro definitions (Register bit)
  171   171                      ; line    47 : ****************************************************************
  172   172                      ;              *******************************************************/
  173   173                      ; line    48 : 
  174   174                      ; line    49 : /***************************************************************
  175   175                      ;              ********************************************************
  176   176                      ; line    50 : Macro definitions
  177   177                      ; line    51 : ****************************************************************
  178   178                      ;              *******************************************************/
  179   179                      ; line    52 : #ifndef __TYPEDEF__
  180   180                      ; line    53 : /* Status list definition */
  181   181                      ; line    54 : #define MD_STATUSBASE        (0x00U)
  182   182                      ; line    55 : #define MD_OK                (MD_STATUSBASE + 0x00U) /* register
  183   183                      ;               setting OK */
  184   184                      ; line    56 : #define MD_SPT               (MD_STATUSBASE + 0x01U) /* IIC stop
  185   185                      ;               */
  186   186                      ; line    57 : #define MD_NACK              (MD_STATUSBASE + 0x02U) /* IIC no A
  187   187                      ;              CK */
  188   188                      ; line    58 : #define MD_BUSY1             (MD_STATUSBASE + 0x03U) /* busy 1 *
  189   189                      ;              /
  190   190                      ; line    59 : #define MD_BUSY2             (MD_STATUSBASE + 0x04U) /* busy 2 *
  191   191                      ;              /
  192   192                      ; line    60 : 
  193   193                      ; line    61 : /* Error list definition */
  194   194                      ; line    62 : #define MD_ERRORBASE         (0x80U)
  195   195                      ; line    63 : #define MD_ERROR             (MD_ERRORBASE + 0x00U)  /* error */
  196   196                      ; line    64 : #define MD_ARGERROR          (MD_ERRORBASE + 0x01U)  /* error ag
  197   197                      ;              rument input error */
  198   198                      ; line    65 : #define MD_ERROR1            (MD_ERRORBASE + 0x02U)  /* error 1 
  199   199                      ;              */
  200   200                      ; line    66 : #define MD_ERROR2            (MD_ERRORBASE + 0x03U)  /* error 2 
  201   201                      ;              */
  202   202                      ; line    67 : #define MD_ERROR3            (MD_ERRORBASE + 0x04U)  /* error 3 
  203   203                      ;              */
  204   204                      ; line    68 : #define MD_ERROR4            (MD_ERRORBASE + 0x05U)  /* error 4 
  205   205                      ;              */
  206   206                      ; line    69 : #define MD_ERROR5            (MD_ERRORBASE + 0x06U)  /* error 5 
  207   207                      ;              */
  208   208                      ; line    70 : #endif
  209   209                      ; line    71 : 
  210   210                      ; line    72 : /***************************************************************
  211   211                      ;              ********************************************************
  212   212                      ; line    73 : Typedef definitions
  213   213                      ; line    74 : ****************************************************************
  214   214                      ;              *******************************************************/
  215   215                      ; line    75 : #ifndef __TYPEDEF__
  216   216                      ; line    76 : typedef signed char         int8_t;
  217   217                      ; line    77 : typedef unsigned char       uint8_t;
  218   218                      ; line    78 : typedef signed short        int16_t;
  219   219                      ; line    79 : typedef unsigned short      uint16_t;
  220   220                      ; line    80 : typedef signed long         int32_t;
  221   221                      ; line    81 : typedef unsigned long       uint32_t;
  222   222                      ; line    82 : typedef unsigned short      MD_STATUS;
  223   223                      ; line     1 : /***************************************************************
  224   224                      ;              ********************************************************
  225   225                      ; line     2 : * DISCLAIMER
  226   226                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  227   227                      ;              nd is only 
  228   228                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  229   229                      ;              orized. This 
  230   230                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  231   231                      ;              otected under 
  232   232                      ; line     6 : * all applicable laws, including copyright laws.
  233   233                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  234   234                      ;              IES REGARDING 
  235   235                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  236   236                      ;              G BUT NOT 
  237   237                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  238   238                      ;              ULAR PURPOSE 
  239   239                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  240   240                      ;              AIMED.
  241   241                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  242   242                      ;               RENESAS 
  243   243                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  244   244                      ;              ALL BE LIABLE 
  245   245                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  246   246                      ;               DAMAGES FOR 
  247   247                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  248   248                      ;              FILIATES HAVE 
  249   249                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  250   250                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  251   251                      ;               this software 
  252   252                      ; line    17 : * and to discontinue the availability of this software.  By usin
  253   253                      ;              g this software, 
  254   254                      ; line    18 : * you agree to the additional terms and conditions found by acce
  255   255                      ;              ssing the 
  256   256                      ; line    19 : * following link:
  257   257                      ; line    20 : * http://www.renesas.com/disclaimer
  258   258                      ; line    21 : *
  259   259                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  260   260                      ;               reserved.
  261   261                      ; line    23 : ****************************************************************
  262   262                      ;              *******************************************************/
  263   263                      ; line    24 : 
  264   264                      ; line    25 : /***************************************************************
  265   265                      ;              ********************************************************
  266   266                      ; line    26 : * File Name    : r_cg_tau.h
  267   267                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  268   268                      ;              ]
  269   269                      ; line    28 : * Device(s)    : R5F10WMG
  270   270                      ; line    29 : * Tool-Chain   : CA78K0R
  271   271                      ; line    30 : * Description  : This file implements device driver for TAU modu
  272   272                      ;              le.
  273   273                      ; line    31 : * Creation Date: 05-Jun-21
  274   274                      ; line    32 : ****************************************************************
  275   275                      ;              *******************************************************/
  276   276                      ; line    33 : #ifndef TAU_H
  277   277                      ; line    34 : #define TAU_H
  278   278                      ; line    35 : 
  279   279                      ; line    36 : /***************************************************************
  280   280                      ;              ********************************************************
  281   281                      ; line    37 : Macro definitions (Register bit)
  282   282                      ; line    38 : ****************************************************************
  283   283                      ;              *******************************************************/
  284   284                      ; line    39 : /*
  285   285                      ; line    40 :     Peripheral Enable Register 0 (PER0)
  286   286                      ; line    41 : */
  287   287                      ; line    42 : /* Control of timer array unit 0 input clock (TAU0EN) */
  288   288                      ; line    43 : #define _00_TAU0_CLOCK_STOP                     (0x00U) /* stops
  289   289                      ;               supply of input clock */
  290   290                      ; line    44 : #define _01_TAU0_CLOCK_SUPPLY                   (0x01U) /* suppl
  291   291                      ;              ies input clock */
  292   292                      ; line    45 : 
  293   293                      ; line    46 : /*
  294   294                      ; line    47 :     Timer Clock Select Register m (TPSm)
  295   295                      ; line    48 : */
  296   296                      ; line    49 : /* Operating mode and clear mode selection (PRSm03 - PRSm00) */
  297   297                      ; line    50 : #define _0000_TAU_CKM0_fCLK_0                   (0x0000U) /* ckm
  298   298                      ;              0 - fCLK */
  299   299                      ; line    51 : #define _0001_TAU_CKM0_fCLK_1                   (0x0001U) /* ckm
  300   300                      ;              0 - fCLK/2^1 */
  301   301                      ; line    52 : #define _0002_TAU_CKM0_fCLK_2                   (0x0002U) /* ckm
  302   302                      ;              0 - fCLK/2^2 */
  303   303                      ; line    53 : #define _0003_TAU_CKM0_fCLK_3                   (0x0003U) /* ckm
  304   304                      ;              0 - fCLK/2^3 */
  305   305                      ; line    54 : #define _0004_TAU_CKM0_fCLK_4                   (0x0004U) /* ckm
  306   306                      ;              0 - fCLK/2^4 */
  307   307                      ; line    55 : #define _0005_TAU_CKM0_fCLK_5                   (0x0005U) /* ckm
  308   308                      ;              0 - fCLK/2^5 */
  309   309                      ; line    56 : #define _0006_TAU_CKM0_fCLK_6                   (0x0006U) /* ckm
  310   310                      ;              0 - fCLK/2^6 */
  311   311                      ; line    57 : #define _0007_TAU_CKM0_fCLK_7                   (0x0007U) /* ckm
  312   312                      ;              0 - fCLK/2^7 */
  313   313                      ; line    58 : #define _0008_TAU_CKM0_fCLK_8                   (0x0008U) /* ckm
  314   314                      ;              0 - fCLK/2^8 */
  315   315                      ; line    59 : #define _0009_TAU_CKM0_fCLK_9                   (0x0009U) /* ckm
  316   316                      ;              0 - fCLK/2^9 */
  317   317                      ; line    60 : #define _000A_TAU_CKM0_fCLK_10                  (0x000AU) /* ckm
  318   318                      ;              0 - fCLK/2^10 */
  319   319                      ; line    61 : #define _000B_TAU_CKM0_fCLK_11                  (0x000BU) /* ckm
  320   320                      ;              0 - fCLK/2^11 */
  321   321                      ; line    62 : #define _000C_TAU_CKM0_fCLK_12                  (0x000CU) /* ckm
  322   322                      ;              0 - fCLK/2^12 */
  323   323                      ; line    63 : #define _000D_TAU_CKM0_fCLK_13                  (0x000DU) /* ckm
  324   324                      ;              0 - fCLK/2^13 */
  325   325                      ; line    64 : #define _000E_TAU_CKM0_fCLK_14                  (0x000EU) /* ckm
  326   326                      ;              0 - fCLK/2^14 */
  327   327                      ; line    65 : #define _000F_TAU_CKM0_fCLK_15                  (0x000FU) /* ckm
  328   328                      ;              0 - fCLK/2^15 */
  329   329                      ; line    66 : /* Operating mode and clear mode selection (PRSm13 - PRSm10) */
  330   330                      ; line    67 : #define _0000_TAU_CKM1_fCLK_0                   (0x0000U) /* ckm
  331   331                      ;              1 - fCLK */
  332   332                      ; line    68 : #define _0010_TAU_CKM1_fCLK_1                   (0x0010U) /* ckm
  333   333                      ;              1 - fCLK/2^1 */
  334   334                      ; line    69 : #define _0020_TAU_CKM1_fCLK_2                   (0x0020U) /* ckm
  335   335                      ;              1 - fCLK/2^2 */
  336   336                      ; line    70 : #define _0030_TAU_CKM1_fCLK_3                   (0x0030U) /* ckm
  337   337                      ;              1 - fCLK/2^3 */
  338   338                      ; line    71 : #define _0040_TAU_CKM1_fCLK_4                   (0x0040U) /* ckm
  339   339                      ;              1 - fCLK/2^4 */
  340   340                      ; line    72 : #define _0050_TAU_CKM1_fCLK_5                   (0x0050U) /* ckm
  341   341                      ;              1 - fCLK/2^5 */
  342   342                      ; line    73 : #define _0060_TAU_CKM1_fCLK_6                   (0x0060U) /* ckm
  343   343                      ;              1 - fCLK/2^6 */
  344   344                      ; line    74 : #define _0070_TAU_CKM1_fCLK_7                   (0x0070U) /* ckm
  345   345                      ;              1 - fCLK/2^7 */
  346   346                      ; line    75 : #define _0080_TAU_CKM1_fCLK_8                   (0x0080U) /* ckm
  347   347                      ;              1 - fCLK/2^8 */
  348   348                      ; line    76 : #define _0090_TAU_CKM1_fCLK_9                   (0x0090U) /* ckm
  349   349                      ;              1 - fCLK/2^9 */
  350   350                      ; line    77 : #define _00A0_TAU_CKM1_fCLK_10                  (0x00A0U) /* ckm
  351   351                      ;              1 - fCLK/2^10 */
  352   352                      ; line    78 : #define _00B0_TAU_CKM1_fCLK_11                  (0x00B0U) /* ckm
  353   353                      ;              1 - fCLK/2^11 */
  354   354                      ; line    79 : #define _00C0_TAU_CKM1_fCLK_12                  (0x00C0U) /* ckm
  355   355                      ;              1 - fCLK/2^12 */
  356   356                      ; line    80 : #define _00D0_TAU_CKM1_fCLK_13                  (0x00D0U) /* ckm
  357   357                      ;              1 - fCLK/2^13 */
  358   358                      ; line    81 : #define _00E0_TAU_CKM1_fCLK_14                  (0x00E0U) /* ckm
  359   359                      ;              1 - fCLK/2^14 */
  360   360                      ; line    82 : #define _00F0_TAU_CKM1_fCLK_15                  (0x00F0U) /* ckm
  361   361                      ;              1 - fCLK/2^15 */
  362   362                      ; line    83 : /* Operating mode and clear mode selection (PRSm21 - PRSm20) */
  363   363                      ; line    84 : #define _0000_TAU_CKM2_fCLK_1                   (0x0000U) /* ckm
  364   364                      ;              2 - fCLK/2^1 */
  365   365                      ; line    85 : #define _0100_TAU_CKM2_fCLK_2                   (0x0100U) /* ckm
  366   366                      ;              2 - fCLK/2^2 */
  367   367                      ; line    86 : #define _0200_TAU_CKM2_fCLK_4                   (0x0200U) /* ckm
  368   368                      ;              2 - fCLK/2^4 */
  369   369                      ; line    87 : #define _0300_TAU_CKM2_fCLK_6                   (0x0300U) /* ckm
  370   370                      ;              2 - fCLK/2^6 */
  371   371                      ; line    88 : /* Operating mode and clear mode selection (PRSm31 - PRSm30) */
  372   372                      ; line    89 : #define _0000_TAU_CKM3_fCLK_8                   (0x0000U) /* ckm
  373   373                      ;              3 - fCLK/2^8 */
  374   374                      ; line    90 : #define _1000_TAU_CKM3_fCLK_10                  (0x1000U) /* ckm
  375   375                      ;              3 - fCLK/2^10 */
  376   376                      ; line    91 : #define _2000_TAU_CKM3_fCLK_12                  (0x2000U) /* ckm
  377   377                      ;              3 - fCLK/2^12 */
  378   378                      ; line    92 : #define _3000_TAU_CKM3_fCLK_14                  (0x3000U) /* ckm
  379   379                      ;              3 - fCLK/2^14 */
  380   380                      ; line    93 : 
  381   381                      ; line    94 : /*
  382   382                      ; line    95 :     Timer Mode Register mn (TMRmn)
  383   383                      ; line    96 : */
  384   384                      ; line    97 : /* Selection of macro clock (MCK) of channel n (CKSmn1 - CKSmn0)
  385   385                      ;               */
  386   386                      ; line    98 : #define _0000_TAU_CLOCK_SELECT_CKM0             (0x0000U) /* ope
  387   387                      ;              ration clock CK0 set by PRS register */ 
  388   388                      ; line    99 : #define _8000_TAU_CLOCK_SELECT_CKM1             (0x8000U) /* ope
  389   389                      ;              ration clock CK1 set by PRS register */
  390   390                      ; line   100 : #define _4000_TAU_CLOCK_SELECT_CKM2             (0x4000U) /* ope
  391   391                      ;              ration clock CK2 set by PRS register */
  392   392                      ; line   101 : #define _C000_TAU_CLOCK_SELECT_CKM3             (0xC000U) /* ope
  393   393                      ;              ration clock CK3 set by PRS register */
  394   394                      ; line   102 : /* Selection of count clock (CCK) of channel n (CCSmn) */
  395   395                      ; line   103 : #define _0000_TAU_CLOCK_MODE_CKS                (0x0000U) /* mac
  396   396                      ;              ro clock MCK specified by CKSmn bit */  
  397   397                      ; line   104 : #define _1000_TAU_CLOCK_MODE_TIMN               (0x1000U) /* val
  398   398                      ;              id edge of input signal input from TImn pin */
  399   399                      ; line   105 : /* Selection of slave/master of channel n (MASTERmn) */
  400   400                      ; line   106 : #define _0000_TAU_COMBINATION_SLAVE             (0x0000U) /* ope
  401   401                      ;              rates as slave channel */
  402   402                      ; line   107 : #define _0800_TAU_COMBINATION_MASTER            (0x0800U) /* ope
  403   403                      ;              rates as master channel */
  404   404                      ; line   108 : /* Operation explanation of channel 1 or 3 (SPLIT) */
  405   405                      ; line   109 : #define _0000_TAU_16BITS_MODE                   (0x0000U) /* ope
  406   406                      ;              rates as 16 bits timer */  
  407   407                      ; line   110 : #define _0800_TAU_8BITS_MODE                    (0x0800U) /* ope
  408   408                      ;              rates as 8 bits timer */
  409   409                      ; line   111 : /* Setting of start trigger or capture trigger of channel n (STS
  410   410                      ;              mn2 - STSmn0) */
  411   411                      ; line   112 : #define _0000_TAU_TRIGGER_SOFTWARE              (0x0000U) /* onl
  412   412                      ;              y software trigger start is valid */
  413   413                      ; line   113 : #define _0100_TAU_TRIGGER_TIMN_VALID            (0x0100U) /* TIm
  414   414                      ;              n input edge is used as a start/capture trigger */
  415   415                      ; line   114 : #define _0200_TAU_TRIGGER_TIMN_BOTH             (0x0200U) /* TIm
  416   416                      ;              n input edges are used as a start/capture trigger */
  417   417                      ; line   115 : #define _0400_TAU_TRIGGER_MASTER_INT            (0x0400U) /* int
  418   418                      ;              errupt signal of the master channel is used */
  419   419                      ; line   116 : /* Selection of TImn pin input valid edge (CISmn1 - CISmn0) */
  420   420                      ; line   117 : #define _0000_TAU_TIMN_EDGE_FALLING             (0x0000U) /* fal
  421   421                      ;              ling edge */
  422   422                      ; line   118 : #define _0040_TAU_TIMN_EDGE_RISING              (0x0040U) /* ris
  423   423                      ;              ing edge */
  424   424                      ; line   119 : #define _0080_TAU_TIMN_EDGE_BOTH_LOW            (0x0080U) /* bot
  425   425                      ;              h edges (when low-level width is measured) */
  426   426                      ; line   120 : #define _00C0_TAU_TIMN_EDGE_BOTH_HIGH           (0x00C0U) /* bot
  427   427                      ;              h edges (when high-level width is measured) */
  428   428                      ; line   121 : /* Operation mode of channel n (MDmn3 - MDmn0) */
  429   429                      ; line   122 : #define _0000_TAU_MODE_INTERVAL_TIMER           (0x0000U) /* int
  430   430                      ;              erval timer mode */
  431   431                      ; line   123 : #define _0004_TAU_MODE_CAPTURE                  (0x0004U) /* cap
  432   432                      ;              ture mode */
  433   433                      ; line   124 : #define _0006_TAU_MODE_EVENT_COUNT              (0x0006U) /* eve
  434   434                      ;              nt counter mode */
  435   435                      ; line   125 : #define _0008_TAU_MODE_ONE_COUNT                (0x0008U) /* one
  436   436                      ;               count mode */
  437   437                      ; line   126 : #define _000C_TAU_MODE_HIGHLOW_MEASURE          (0x000CU) /* hig
  438   438                      ;              h-/low-level width measurement mode */
  439   439                      ; line   127 : #define _0001_TAU_MODE_PWM_MASTER               (0x0001U) /* PWM
  440   440                      ;               function (master channel) mode */
  441   441                      ; line   128 : #define _0009_TAU_MODE_PWM_SLAVE                (0x0009U) /* PWM
  442   442                      ;               function (slave channel) mode */
  443   443                      ; line   129 : #define _0008_TAU_MODE_ONESHOT                  (0x0008U) /* one
  444   444                      ;              -shot pulse output mode */
  445   445                      ; line   130 : /* Setting of starting counting and interrupt (MDmn0) */
  446   446                      ; line   131 : #define _0000_TAU_START_INT_UNUSED              (0x0000U) /* int
  447   447                      ;              errupt is not generated when counting is started */
  448   448                      ; line   132 : #define _0001_TAU_START_INT_USED                (0x0001U) /* int
  449   449                      ;              errupt is generated when counting is started */
  450   450                      ; line   133 : 
  451   451                      ; line   134 : /*
  452   452                      ; line   135 :     Timer Status Register mn (TSRmn)
  453   453                      ; line   136 : */
  454   454                      ; line   137 : /* Counter overflow status of channel n (OVF) */
  455   455                      ; line   138 : #define _0000_TAU_OVERFLOW_NOT_OCCURS           (0x0000U) /* ove
  456   456                      ;              rflow does not occur */
  457   457                      ; line   139 : #define _0001_TAU_OVERFLOW_OCCURS               (0x0001U) /* ove
  458   458                      ;              rflow occurs */
  459   459                      ; line   140 : 
  460   460                      ; line   141 : /*
  461   461                      ; line   142 :     Timer Channel Enable Status Register m (TEm)
  462   462                      ; line   143 : */
  463   463                      ; line   144 : /* Indication of operation enable/stop status of channel 0 (TEm0
  464   464                      ;              ) */
  465   465                      ; line   145 : #define _0000_TAU_CH0_OPERATION_STOP            (0x0000U) /* ope
  466   466                      ;              ration is stopped */
  467   467                      ; line   146 : #define _0001_TAU_CH0_OPERATION_ENABLE          (0x0001U) /* ope
  468   468                      ;              ration is enabled */
  469   469                      ; line   147 : /* Indication of operation enable/stop status of channel 1 (TEm1
  470   470                      ;              ) */
  471   471                      ; line   148 : #define _0000_TAU_CH1_OPERATION_STOP            (0x0000U) /* ope
  472   472                      ;              ration is stopped */
  473   473                      ; line   149 : #define _0002_TAU_CH1_OPERATION_ENABLE          (0x0002U) /* ope
  474   474                      ;              ration is enabled */
  475   475                      ; line   150 : /* Indication of operation enable/stop status of channel 2 (TEm2
  476   476                      ;              ) */
  477   477                      ; line   151 : #define _0000_TAU_CH2_OPERATION_STOP            (0x0000U) /* ope
  478   478                      ;              ration is stopped */
  479   479                      ; line   152 : #define _0004_TAU_CH2_OPERATION_ENABLE          (0x0004U) /* ope
  480   480                      ;              ration is enabled */
  481   481                      ; line   153 : /* Indication of operation enable/stop status of channel 3 (TEm3
  482   482                      ;              ) */
  483   483                      ; line   154 : #define _0000_TAU_CH3_OPERATION_STOP            (0x0000U) /* ope
  484   484                      ;              ration is stopped */
  485   485                      ; line   155 : #define _0008_TAU_CH3_OPERATION_ENABLE          (0x0008U) /* ope
  486   486                      ;              ration is enabled */
  487   487                      ; line   156 : /* Indication of operation enable/stop status of channel 4 (TEm4
  488   488                      ;              ) */
  489   489                      ; line   157 : #define _0000_TAU_CH4_OPERATION_STOP            (0x0000U) /* ope
  490   490                      ;              ration is stopped */
  491   491                      ; line   158 : #define _0010_TAU_CH4_OPERATION_ENABLE          (0x0010U) /* ope
  492   492                      ;              ration is enabled */
  493   493                      ; line   159 : /* Indication of operation enable/stop status of channel 5 (TEm5
  494   494                      ;              ) */
  495   495                      ; line   160 : #define _0000_TAU_CH5_OPERATION_STOP            (0x0000U) /* ope
  496   496                      ;              ration is stopped */
  497   497                      ; line   161 : #define _0020_TAU_CH5_OPERATION_ENABLE          (0x0020U) /* ope
  498   498                      ;              ration is enabled */
  499   499                      ; line   162 : /* Indication of operation enable/stop status of channel 6 (TEm6
  500   500                      ;              ) */
  501   501                      ; line   163 : #define _0000_TAU_CH6_OPERATION_STOP            (0x0000U) /* ope
  502   502                      ;              ration is stopped */
  503   503                      ; line   164 : #define _0040_TAU_CH6_OPERATION_ENABLE          (0x0040U) /* ope
  504   504                      ;              ration is enabled */
  505   505                      ; line   165 : /* Indication of operation enable/stop status of channel 7 (TEm7
  506   506                      ;              ) */
  507   507                      ; line   166 : #define _0000_TAU_CH7_OPERATION_STOP            (0x0000U) /* ope
  508   508                      ;              ration is stopped */
  509   509                      ; line   167 : #define _0080_TAU_CH7_OPERATION_ENABLE          (0x0080U) /* ope
  510   510                      ;              ration is enabled */
  511   511                      ; line   168 : /* Indication of operation enable/stop status of channel 1 highe
  512   512                      ;              r 8 bits (TEHm1) */
  513   513                      ; line   169 : #define _0000_TAU_CH1_H8_OPERATION_STOP         (0x0000U) /* ope
  514   514                      ;              ration is stopped */
  515   515                      ; line   170 : #define _0200_TAU_CH1_H8_OPERATION_ENABLE       (0x0200U) /* ope
  516   516                      ;              ration is enabled */
  517   517                      ; line   171 : /* Indication of operation enable/stop status of channel 3 highe
  518   518                      ;              r 8 bits (TEHm3) */
  519   519                      ; line   172 : #define _0000_TAU_CH3_H8_OPERATION_STOP         (0x0000U) /* ope
  520   520                      ;              ration is stopped */
  521   521                      ; line   173 : #define _0800_TAU_CH3_H8_OPERATION_ENABLE       (0x0800U) /* ope
  522   522                      ;              ration is enabled */
  523   523                      ; line   174 : 
  524   524                      ; line   175 : /*
  525   525                      ; line   176 :     Timer Channel Start Register m (TSm)
  526   526                      ; line   177 : */
  527   527                      ; line   178 : /* Operation enable (start) trigger of channel 0 (TSm0) */
  528   528                      ; line   179 : #define _0000_TAU_CH0_START_TRG_OFF             (0x0000U) /* no 
  529   529                      ;              trigger operation */
  530   530                      ; line   180 : #define _0001_TAU_CH0_START_TRG_ON              (0x0001U) /* ope
  531   531                      ;              ration is enabled (start trigger is generated) */
  532   532                      ; line   181 : /* Operation enable (start) trigger of channel 1 (TSm1) */
  533   533                      ; line   182 : #define _0000_TAU_CH1_START_TRG_OFF             (0x0000U) /* no 
  534   534                      ;              trigger operation */
  535   535                      ; line   183 : #define _0002_TAU_CH1_START_TRG_ON              (0x0002U) /* ope
  536   536                      ;              ration is enabled (start trigger is generated) */
  537   537                      ; line   184 : /* Operation enable (start) trigger of channel 2 (TSm2) */
  538   538                      ; line   185 : #define _0000_TAU_CH2_START_TRG_OFF             (0x0000U) /* no 
  539   539                      ;              trigger operation */
  540   540                      ; line   186 : #define _0004_TAU_CH2_START_TRG_ON              (0x0004U) /* ope
  541   541                      ;              ration is enabled (start trigger is generated) */
  542   542                      ; line   187 : /* Operation enable (start) trigger of channel 3 (TSm3) */
  543   543                      ; line   188 : #define _0000_TAU_CH3_START_TRG_OFF             (0x0000U) /* no 
  544   544                      ;              trigger operation */
  545   545                      ; line   189 : #define _0008_TAU_CH3_START_TRG_ON              (0x0008U) /* ope
  546   546                      ;              ration is enabled (start trigger is generated) */
  547   547                      ; line   190 : /* Operation enable (start) trigger of channel 4 (TSm4) */
  548   548                      ; line   191 : #define _0000_TAU_CH4_START_TRG_OFF             (0x0000U) /* no 
  549   549                      ;              trigger operation */
  550   550                      ; line   192 : #define _0010_TAU_CH4_START_TRG_ON              (0x0010U) /* ope
  551   551                      ;              ration is enabled (start trigger is generated) */
  552   552                      ; line   193 : /* Operation enable (start) trigger of channel 5 (TSm5) */
  553   553                      ; line   194 : #define _0000_TAU_CH5_START_TRG_OFF             (0x0000U) /* no 
  554   554                      ;              trigger operation */
  555   555                      ; line   195 : #define _0020_TAU_CH5_START_TRG_ON              (0x0020U) /* ope
  556   556                      ;              ration is enabled (start trigger is generated) */
  557   557                      ; line   196 : /* Operation enable (start) trigger of channel 6 (TSm6) */
  558   558                      ; line   197 : #define _0000_TAU_CH6_START_TRG_OFF             (0x0000U) /* no 
  559   559                      ;              trigger operation */
  560   560                      ; line   198 : #define _0040_TAU_CH6_START_TRG_ON              (0x0040U) /* ope
  561   561                      ;              ration is enabled (start trigger is generated) */
  562   562                      ; line   199 : /* Operation enable (start) trigger of channel 7 (TSm7) */
  563   563                      ; line   200 : #define _0000_TAU_CH7_START_TRG_OFF             (0x0000U) /* no 
  564   564                      ;              trigger operation */
  565   565                      ; line   201 : #define _0080_TAU_CH7_START_TRG_ON              (0x0080U) /* ope
  566   566                      ;              ration is enabled (start trigger is generated) */
  567   567                      ; line   202 : /* Operation enable (start) trigger of channel 1 higher 8 bits (
  568   568                      ;              TSHm1) */
  569   569                      ; line   203 : #define _0000_TAU_CH1_H8_START_TRG_OFF          (0x0000U) /* no 
  570   570                      ;              trigger operation */
  571   571                      ; line   204 : #define _0200_TAU_CH1_H8_START_TRG_ON           (0x0200U) /* ope
  572   572                      ;              ration is enabled (start trigger is generated) */
  573   573                      ; line   205 : /* Operation enable (start) trigger of channel 3 higher 8 bits (
  574   574                      ;              TSHm3) */
  575   575                      ; line   206 : #define _0000_TAU_CH3_H8_START_TRG_OFF          (0x0000U) /* no 
  576   576                      ;              trigger operation */
  577   577                      ; line   207 : #define _0800_TAU_CH3_H8_START_TRG_ON           (0x0800U) /* ope
  578   578                      ;              ration is enabled (start trigger is generated) */
  579   579                      ; line   208 : 
  580   580                      ; line   209 : /*
  581   581                      ; line   210 :     Timer Channel Stop Register m (TTm)
  582   582                      ; line   211 : */
  583   583                      ; line   212 : /* Operation stop trigger of channel 0 (TTm0) */
  584   584                      ; line   213 : #define _0000_TAU_CH0_STOP_TRG_OFF              (0x0000U) /* no 
  585   585                      ;              trigger operation */
  586   586                      ; line   214 : #define _0001_TAU_CH0_STOP_TRG_ON               (0x0001U) /* ope
  587   587                      ;              ration is stopped (stop trigger is generated) */
  588   588                      ; line   215 : /* Operation stop trigger of channel 1 (TTm1) */
  589   589                      ; line   216 : #define _0000_TAU_CH1_STOP_TRG_OFF              (0x0000U) /* no 
  590   590                      ;              trigger operation */
  591   591                      ; line   217 : #define _0002_TAU_CH1_STOP_TRG_ON               (0x0002U) /* ope
  592   592                      ;              ration is stopped (stop trigger is generated) */
  593   593                      ; line   218 : /* Operation stop trigger of channel 2 (TTm2) */
  594   594                      ; line   219 : #define _0000_TAU_CH2_STOP_TRG_OFF              (0x0000U) /* no 
  595   595                      ;              trigger operation */
  596   596                      ; line   220 : #define _0004_TAU_CH2_STOP_TRG_ON               (0x0004U) /* ope
  597   597                      ;              ration is stopped (stop trigger is generated) */
  598   598                      ; line   221 : /* Operation stop trigger of channel 3 (TTm3) */
  599   599                      ; line   222 : #define _0000_TAU_CH3_STOP_TRG_OFF              (0x0000U) /* no 
  600   600                      ;              trigger operation */
  601   601                      ; line   223 : #define _0008_TAU_CH3_STOP_TRG_ON               (0x0008U) /* ope
  602   602                      ;              ration is stopped (stop trigger is generated) */
  603   603                      ; line   224 : /* Operation stop trigger of channel 4 (TTm4) */
  604   604                      ; line   225 : #define _0000_TAU_CH4_STOP_TRG_OFF              (0x0000U) /* no 
  605   605                      ;              trigger operation */
  606   606                      ; line   226 : #define _0010_TAU_CH4_STOP_TRG_ON               (0x0010U) /* ope
  607   607                      ;              ration is stopped (stop trigger is generated) */
  608   608                      ; line   227 : /* Operation stop trigger of channel 5 (TTm5) */
  609   609                      ; line   228 : #define _0000_TAU_CH5_STOP_TRG_OFF              (0x0000U) /* no 
  610   610                      ;              trigger operation */
  611   611                      ; line   229 : #define _0020_TAU_CH5_STOP_TRG_ON               (0x0020U) /* ope
  612   612                      ;              ration is stopped (stop trigger is generated) */
  613   613                      ; line   230 : /* Operation stop trigger of channel 6 (TTm6) */
  614   614                      ; line   231 : #define _0000_TAU_CH6_STOP_TRG_OFF              (0x0000U) /* no 
  615   615                      ;              trigger operation */
  616   616                      ; line   232 : #define _0040_TAU_CH6_STOP_TRG_ON               (0x0040U) /* ope
  617   617                      ;              ration is stopped (stop trigger is generated) */
  618   618                      ; line   233 : /* Operation stop trigger of channel 7 (TTm7) */
  619   619                      ; line   234 : #define _0000_TAU_CH7_STOP_TRG_OFF              (0x0000U) /* no 
  620   620                      ;              trigger operation */
  621   621                      ; line   235 : #define _0080_TAU_CH7_STOP_TRG_ON               (0x0080U) /* ope
  622   622                      ;              ration is stopped (stop trigger is generated) */
  623   623                      ; line   236 : /* Operation stop trigger of channel 1 higher 8 bits (TTHm1) */
  624   624                      ; line   237 : #define _0000_TAU_CH1_H8_STOP_TRG_OFF           (0x0000U) /* no 
  625   625                      ;              trigger operation */
  626   626                      ; line   238 : #define _0200_TAU_CH1_H8_STOP_TRG_ON            (0x0200U) /* ope
  627   627                      ;              ration is stopped (stop trigger is generated) */
  628   628                      ; line   239 : /* Operation stop trigger of channel 3 higher 8 bits (TTHm3) */
  629   629                      ; line   240 : #define _0000_TAU_CH3_H8_STOP_TRG_OFF           (0x0000U) /* no 
  630   630                      ;              trigger operation */
  631   631                      ; line   241 : #define _0800_TAU_CH3_H8_STOP_TRG_ON            (0x0800U) /* ope
  632   632                      ;              ration is stopped (stop trigger is generated) */
  633   633                      ; line   242 : 
  634   634                      ; line   243 : /*
  635   635                      ; line   244 :     Timer Input Select Register m (TIS0)
  636   636                      ; line   245 : */
  637   637                      ; line   246 : /* Selection of timer input used with channel 1 (TIS02 - TIS00) 
  638   638                      ;              */
  639   639                      ; line   247 : #define _00_TAU_CH1_INPUT_TI01                  (0x00U) /* input
  640   640                      ;               signal of timer input pin (TI01) */
  641   641                      ; line   248 : #define _04_TAU_CH1_INPUT_fIL                   (0x04U) /* low-s
  642   642                      ;              peed on-chip oscillator clock (fIL) */
  643   643                      ; line   249 : #define _05_TAU_CH1_INPUT_fSUB                  (0x05U) /* subsy
  644   644                      ;              stem clock (fSUB) */
  645   645                      ; line   250 : 
  646   646                      ; line   251 : /*
  647   647                      ; line   252 :     A timer array unit and an output selection register (TOS)
  648   648                      ; line   253 : */
  649   649                      ; line   254 : /* Remote control carrier power output selection */
  650   650                      ; line   255 : #define _00_TAU_REMOTE_CONTROL_UNUSED           (0x00U) /* remot
  651   651                      ;              e control carrier power output invalidity */
  652   652                      ; line   256 : #define _01_TAU_REMOTE_CONTROL_USED             (0x01U) /* remot
  653   653                      ;              e control carrier power output effective */
  654   654                      ; line   257 : 
  655   655                      ; line   258 : /*
  656   656                      ; line   259 :     Timer Output Enable Register m (TOEm)
  657   657                      ; line   260 : */
  658   658                      ; line   261 : /* Timer output enable/disable of channel 0 (TOEm0) */
  659   659                      ; line   262 : #define _0001_TAU_CH0_OUTPUT_ENABLE             (0x0001U) /* the
  660   660                      ;               TOm0 operation enabled by count operation */
  661   661                      ; line   263 : #define _0000_TAU_CH0_OUTPUT_DISABLE            (0x0000U) /* the
  662   662                      ;               TOm0 operation stopped by count operation */
  663   663                      ; line   264 : /* Timer output enable/disable of channel 1 (TOEm1) */
  664   664                      ; line   265 : #define _0002_TAU_CH1_OUTPUT_ENABLE             (0x0002U) /* the
  665   665                      ;               TOm1 operation enabled by count operation */
  666   666                      ; line   266 : #define _0000_TAU_CH1_OUTPUT_DISABLE            (0x0000U) /* the
  667   667                      ;               TOm1 operation stopped by count operation */
  668   668                      ; line   267 : /* Timer output enable/disable of channel 2 (TOEm2) */
  669   669                      ; line   268 : #define _0004_TAU_CH2_OUTPUT_ENABLE             (0x0004U) /* the
  670   670                      ;               TOm2 operation enabled by count operation */
  671   671                      ; line   269 : #define _0000_TAU_CH2_OUTPUT_DISABLE            (0x0000U) /* the
  672   672                      ;               TOm2 operation stopped by count operation */
  673   673                      ; line   270 : /* Timer output enable/disable of channel 3 (TOEm3) */
  674   674                      ; line   271 : #define _0008_TAU_CH3_OUTPUT_ENABLE             (0x0008U) /* the
  675   675                      ;               TOm3 operation enabled by count operation */
  676   676                      ; line   272 : #define _0000_TAU_CH3_OUTPUT_DISABLE            (0x0000U) /* the
  677   677                      ;               TOm3 operation stopped by count operation */
  678   678                      ; line   273 : /* Timer output enable/disable of channel 4 (TOEm4) */
  679   679                      ; line   274 : #define _0010_TAU_CH4_OUTPUT_ENABLE             (0x0010U) /* the
  680   680                      ;               TOm4 operation enabled by count operation */
  681   681                      ; line   275 : #define _0000_TAU_CH4_OUTPUT_DISABLE            (0x0000U) /* the
  682   682                      ;               TOm4 operation stopped by count operation */
  683   683                      ; line   276 : /* Timer output enable/disable of channel 5 (TOEm5) */
  684   684                      ; line   277 : #define _0020_TAU_CH5_OUTPUT_ENABLE             (0x0020U) /* the
  685   685                      ;               TOm5 operation enabled by count operation */
  686   686                      ; line   278 : #define _0000_TAU_CH5_OUTPUT_DISABLE            (0x0000U) /* the
  687   687                      ;               TOm5 operation stopped by count operation */
  688   688                      ; line   279 : /* Timer output enable/disable of channel 6 (TOEm6) */
  689   689                      ; line   280 : #define _0040_TAU_CH6_OUTPUT_ENABLE             (0x0040U) /* the
  690   690                      ;               TOm6 operation enabled by count operation */
  691   691                      ; line   281 : #define _0000_TAU_CH6_OUTPUT_DISABLE            (0x0000U) /* the
  692   692                      ;               TOm6 operation stopped by count operation */
  693   693                      ; line   282 : /* Timer output enable/disable of channel 7 (TOEm7) */
  694   694                      ; line   283 : #define _0080_TAU_CH7_OUTPUT_ENABLE             (0x0080U) /* the
  695   695                      ;               TOm7 operation enabled by count operation */
  696   696                      ; line   284 : #define _0000_TAU_CH7_OUTPUT_DISABLE            (0x0000U) /* the
  697   697                      ;               TOm7 operation stopped by count operation */
  698   698                      ; line   285 : 
  699   699                      ; line   286 : /*
  700   700                      ; line   287 :     Timer Output Register m (TOm)
  701   701                      ; line   288 : */
  702   702                      ; line   289 : /* Timer output of channel 0 (TOm0) */
  703   703                      ; line   290 : #define _0000_TAU_CH0_OUTPUT_VALUE_0            (0x0000U) /* tim
  704   704                      ;              er output value is "0" */
  705   705                      ; line   291 : #define _0001_TAU_CH0_OUTPUT_VALUE_1            (0x0001U) /* tim
  706   706                      ;              er output value is "1" */
  707   707                      ; line   292 : /* Timer output of channel 1 (TOm1) */
  708   708                      ; line   293 : #define _0000_TAU_CH1_OUTPUT_VALUE_0            (0x0000U) /* tim
  709   709                      ;              er output value is "0" */
  710   710                      ; line   294 : #define _0002_TAU_CH1_OUTPUT_VALUE_1            (0x0002U) /* tim
  711   711                      ;              er output value is "1" */
  712   712                      ; line   295 : /* Timer output of channel 2 (TOm2) */
  713   713                      ; line   296 : #define _0000_TAU_CH2_OUTPUT_VALUE_0            (0x0000U) /* tim
  714   714                      ;              er output value is "0" */
  715   715                      ; line   297 : #define _0004_TAU_CH2_OUTPUT_VALUE_1            (0x0004U) /* tim
  716   716                      ;              er output value is "1" */
  717   717                      ; line   298 : /* Timer output of channel 3 (TOm3) */
  718   718                      ; line   299 : #define _0000_TAU_CH3_OUTPUT_VALUE_0            (0x0000U) /* tim
  719   719                      ;              er output value is "0" */
  720   720                      ; line   300 : #define _0008_TAU_CH3_OUTPUT_VALUE_1            (0x0008U) /* tim
  721   721                      ;              er output value is "1" */
  722   722                      ; line   301 : /* Timer output of channel 4 (TOm4) */
  723   723                      ; line   302 : #define _0000_TAU_CH4_OUTPUT_VALUE_0            (0x0000U) /* tim
  724   724                      ;              er output value is "0" */
  725   725                      ; line   303 : #define _0010_TAU_CH4_OUTPUT_VALUE_1            (0x0010U) /* tim
  726   726                      ;              er output value is "1" */
  727   727                      ; line   304 : /* Timer output of channel 5 (TOm5) */
  728   728                      ; line   305 : #define _0000_TAU_CH5_OUTPUT_VALUE_0            (0x0000U) /* tim
  729   729                      ;              er output value is "0" */
  730   730                      ; line   306 : #define _0020_TAU_CH5_OUTPUT_VALUE_1            (0x0020U) /* tim
  731   731                      ;              er output value is "1" */
  732   732                      ; line   307 : /* Timer output of channel 6 (TOm6) */
  733   733                      ; line   308 : #define _0000_TAU_CH6_OUTPUT_VALUE_0            (0x0000U) /* tim
  734   734                      ;              er output value is "0" */
  735   735                      ; line   309 : #define _0040_TAU_CH6_OUTPUT_VALUE_1            (0x0040U) /* tim
  736   736                      ;              er output value is "1" */
  737   737                      ; line   310 : /* Timer output of channel 7 (TOm7) */
  738   738                      ; line   311 : #define _0000_TAU_CH7_OUTPUT_VALUE_0            (0x0000U) /* tim
  739   739                      ;              er output value is "0" */
  740   740                      ; line   312 : #define _0080_TAU_CH7_OUTPUT_VALUE_1            (0x0080U) /* tim
  741   741                      ;              er output value is "1" */
  742   742                      ; line   313 : 
  743   743                      ; line   314 : /*
  744   744                      ; line   315 :     Timer Output Level Register 0 (TOLm)
  745   745                      ; line   316 : */
  746   746                      ; line   317 : /* Control of timer output level of channel 1 (TOLm1) */
  747   747                      ; line   318 : #define _0000_TAU_CH1_OUTPUT_LEVEL_H            (0x0000U) /* pos
  748   748                      ;              itive logic output (active-high) */
  749   749                      ; line   319 : #define _0002_TAU_CH1_OUTPUT_LEVEL_L            (0x0002U) /* inv
  750   750                      ;              erted output (active-low) */
  751   751                      ; line   320 : /* Control of timer output level of channel 2 (TOLm2) */
  752   752                      ; line   321 : #define _0000_TAU_CH2_OUTPUT_LEVEL_H            (0x0000U) /* pos
  753   753                      ;              itive logic output (active-high) */
  754   754                      ; line   322 : #define _0004_TAU_CH2_OUTPUT_LEVEL_L            (0x0004U) /* inv
  755   755                      ;              erted output (active-low) */
  756   756                      ; line   323 : /* Control of timer output level of channel 3 (TOLm3) */
  757   757                      ; line   324 : #define _0000_TAU_CH3_OUTPUT_LEVEL_H            (0x0000U) /* pos
  758   758                      ;              itive logic output (active-high) */
  759   759                      ; line   325 : #define _0008_TAU_CH3_OUTPUT_LEVEL_L            (0x0008U) /* inv
  760   760                      ;              erted output (active-low) */
  761   761                      ; line   326 : /* Control of timer output level of channel 4 (TOLm4) */
  762   762                      ; line   327 : #define _0000_TAU_CH4_OUTPUT_LEVEL_H            (0x0000U) /* pos
  763   763                      ;              itive logic output (active-high) */
  764   764                      ; line   328 : #define _0010_TAU_CH4_OUTPUT_LEVEL_L            (0x0010U) /* inv
  765   765                      ;              erted output (active-low) */
  766   766                      ; line   329 : /* Control of timer output level of channel 5 (TOLm5) */
  767   767                      ; line   330 : #define _0000_TAU_CH5_OUTPUT_LEVEL_H            (0x0000U) /* pos
  768   768                      ;              itive logic output (active-high) */
  769   769                      ; line   331 : #define _0020_TAU_CH5_OUTPUT_LEVEL_L            (0x0020U) /* inv
  770   770                      ;              erted output (active-low) */
  771   771                      ; line   332 : /* Control of timer output level of channel 6 (TOLm6) */
  772   772                      ; line   333 : #define _0000_TAU_CH6_OUTPUT_LEVEL_H            (0x0000U) /* pos
  773   773                      ;              itive logic output (active-high) */
  774   774                      ; line   334 : #define _0040_TAU_CH6_OUTPUT_LEVEL_L            (0x0040U) /* inv
  775   775                      ;              erted output (active-low) */
  776   776                      ; line   335 : /* Control of timer output level of channel 7 (TOLm7) */
  777   777                      ; line   336 : #define _0000_TAU_CH7_OUTPUT_LEVEL_H            (0x0000U) /* pos
  778   778                      ;              itive logic output (active-high) */
  779   779                      ; line   337 : #define _0080_TAU_CH7_OUTPUT_LEVEL_L            (0x0080U) /* inv
  780   780                      ;              erted output (active-low) */
  781   781                      ; line   338 : 
  782   782                      ; line   339 : /*
  783   783                      ; line   340 :     Timer Output Mode Register m (TOMm)
  784   784                      ; line   341 : */
  785   785                      ; line   342 : /* Control of timer output mode of channel 1 (TOMm1) */
  786   786                      ; line   343 : #define _0000_TAU_CH1_OUTPUT_TOGGLE             (0x0000U) /* tog
  787   787                      ;              gle operation mode */
  788   788                      ; line   344 : #define _0002_TAU_CH1_OUTPUT_COMBIN             (0x0002U) /* com
  789   789                      ;              bination operation mode */
  790   790                      ; line   345 : /* Control of timer output mode of channel 2 (TOMm2) */
  791   791                      ; line   346 : #define _0000_TAU_CH2_OUTPUT_TOGGLE             (0x0000U) /* tog
  792   792                      ;              gle operation mode */
  793   793                      ; line   347 : #define _0004_TAU_CH2_OUTPUT_COMBIN             (0x0004U) /* com
  794   794                      ;              bination operation mode */
  795   795                      ; line   348 : /* Control of timer output mode of channel 3 (TOMm3) */
  796   796                      ; line   349 : #define _0000_TAU_CH3_OUTPUT_TOGGLE             (0x0000U) /* tog
  797   797                      ;              gle operation mode */
  798   798                      ; line   350 : #define _0008_TAU_CH3_OUTPUT_COMBIN             (0x0008U) /* com
  799   799                      ;              bination operation mode */
  800   800                      ; line   351 : /* Control of timer output mode of channel 4 (TOMm4) */
  801   801                      ; line   352 : #define _0000_TAU_CH4_OUTPUT_TOGGLE             (0x0000U) /* tog
  802   802                      ;              gle operation mode */
  803   803                      ; line   353 : #define _0010_TAU_CH4_OUTPUT_COMBIN             (0x0010U) /* com
  804   804                      ;              bination operation mode */
  805   805                      ; line   354 : /* Control of timer output mode of channel 5 (TOMm5) */
  806   806                      ; line   355 : #define _0000_TAU_CH5_OUTPUT_TOGGLE             (0x0000U) /* tog
  807   807                      ;              gle operation mode */
  808   808                      ; line   356 : #define _0020_TAU_CH5_OUTPUT_COMBIN             (0x0020U) /* com
  809   809                      ;              bination operation mode */
  810   810                      ; line   357 : /* Control of timer output mode of channel 6 (TOMm6) */
  811   811                      ; line   358 : #define _0000_TAU_CH6_OUTPUT_TOGGLE             (0x0000U) /* tog
  812   812                      ;              gle operation mode */
  813   813                      ; line   359 : #define _0040_TAU_CH6_OUTPUT_COMBIN             (0x0040U) /* com
  814   814                      ;              bination operation mode */
  815   815                      ; line   360 : /* Control of timer output mode of channel 7 (TOMm7) */
  816   816                      ; line   361 : #define _0000_TAU_CH7_OUTPUT_TOGGLE             (0x0000U) /* tog
  817   817                      ;              gle operation mode */
  818   818                      ; line   362 : #define _0080_TAU_CH7_OUTPUT_COMBIN             (0x0080U) /* com
  819   819                      ;              bination operation mode */
  820   820                      ; line   363 : 
  821   821                      ; line   364 : /*
  822   822                      ; line   365 :     Input Switch Control Register (ISC)
  823   823                      ; line   366 : */
  824   824                      ; line   367 : /* Switching external interrupt (INTP0) input (ISC0) */
  825   825                      ; line   368 : #define _00_TAU_EXTINT_INTP0                    (0x00U) /* uses 
  826   826                      ;              the INTP0 pin as an external interrupt */
  827   827                      ; line   369 : #define _01_TAU_EXTINT_RXD0                     (0x01U) /* uses 
  828   828                      ;              RXD0 pin as an external interrupt */
  829   829                      ; line   370 : /* Switching channel 5 input of timer array unit (ISC1) */
  830   830                      ; line   371 : #define _00_TAU_CH7_TI07_INPUT                  (0x00U) /* input
  831   831                      ;               signal of the TI05 pin as a timer input */
  832   832                      ; line   372 : #define _02_TAU_CH7_RXD0_INPUT                  (0x02U) /* input
  833   833                      ;               signal of RxD0 pin is used as timer input */
  834   834                      ; line   373 : 
  835   835                      ; line   374 : /*
  836   836                      ; line   375 :     Noise Filter Enable Register 1 (NFEN1)
  837   837                      ; line   376 : */
  838   838                      ; line   377 : /* Enable/disable using noise filter of TI00 pin input signal (T
  839   839                      ;              NFEN00) */
  840   840                      ; line   378 : #define _00_TAU_CH0_NOISE_OFF                   (0x00U) /* noise
  841   841                      ;               filter OFF */
  842   842                      ; line   379 : #define _01_TAU_CH0_NOISE_ON                    (0x01U) /* noise
  843   843                      ;               filter ON */
  844   844                      ; line   380 : /* Enable/disable using noise filter of TI01 pin input signal (T
  845   845                      ;              NFEN01) */
  846   846                      ; line   381 : #define _00_TAU_CH1_NOISE_OFF                   (0x00U) /* noise
  847   847                      ;               filter OFF */
  848   848                      ; line   382 : #define _02_TAU_CH1_NOISE_ON                    (0x02U) /* noise
  849   849                      ;               filter ON */
  850   850                      ; line   383 : /* Enable/disable using noise filter of TI02 pin input signal (T
  851   851                      ;              NFEN02) */
  852   852                      ; line   384 : #define _00_TAU_CH2_NOISE_OFF                   (0x00U) /* noise
  853   853                      ;               filter OFF */
  854   854                      ; line   385 : #define _04_TAU_CH2_NOISE_ON                    (0x04U) /* noise
  855   855                      ;               filter ON */
  856   856                      ; line   386 : /* Enable/disable using noise filter of TI03 pin input signal (T
  857   857                      ;              NFEN03) */
  858   858                      ; line   387 : #define _00_TAU_CH3_NOISE_OFF                   (0x00U) /* noise
  859   859                      ;               filter OFF */
  860   860                      ; line   388 : #define _08_TAU_CH3_NOISE_ON                    (0x08U) /* noise
  861   861                      ;               filter ON */
  862   862                      ; line   389 : /* Enable/disable using noise filter of TI04 pin input signal (T
  863   863                      ;              NFEN04) */
  864   864                      ; line   390 : #define _00_TAU_CH4_NOISE_OFF                   (0x00U) /* noise
  865   865                      ;               filter OFF */
  866   866                      ; line   391 : #define _10_TAU_CH4_NOISE_ON                    (0x10U) /* noise
  867   867                      ;               filter ON */
  868   868                      ; line   392 : /* Enable/disable using noise filter of TI05 pin input signal (T
  869   869                      ;              NFEN05) */
  870   870                      ; line   393 : #define _00_TAU_CH5_NOISE_OFF                   (0x00U) /* noise
  871   871                      ;               filter OFF */
  872   872                      ; line   394 : #define _20_TAU_CH5_NOISE_ON                    (0x20U) /* noise
  873   873                      ;               filter ON */
  874   874                      ; line   395 : /* Enable/disable using noise filter of TI06 pin input signal (T
  875   875                      ;              NFEN06) */
  876   876                      ; line   396 : #define _00_TAU_CH6_NOISE_OFF                   (0x00U) /* noise
  877   877                      ;               filter OFF */
  878   878                      ; line   397 : #define _40_TAU_CH6_NOISE_ON                    (0x40U) /* noise
  879   879                      ;               filter ON */
  880   880                      ; line   398 : /* Enable/disable using noise filter of TI07 pin input signal (T
  881   881                      ;              NFEN07) */
  882   882                      ; line   399 : #define _00_TAU_CH7_NOISE_OFF                   (0x00U) /* noise
  883   883                      ;               filter OFF */
  884   884                      ; line   400 : #define _80_TAU_CH7_NOISE_ON                    (0x80U) /* noise
  885   885                      ;               filter ON */
  886   886                      ; line   401 : 
  887   887                      ; line   402 : /***************************************************************
  888   888                      ;              ********************************************************
  889   889                      ; line   403 : Macro definitions
  890   890                      ; line   404 : ****************************************************************
  891   891                      ;              *******************************************************/
  892   892                      ; line   405 : /* 16-bit timer data register 00 (TDR00) */
  893   893                      ; line   406 : #define _C34F_TAU_TDR00_VALUE                   (0xC34FU)
  894   894                      ; line   407 : /* Clock divisor for TAU0 channel 0 */
  895   895                      ; line   408 : #define TAU0_CHANNEL0_DIVISOR                   (8U)      /* fCL
  896   896                      ;              K/2^3 */
  897   897                      ; line   409 : /* 16-bit timer data register 01 (TDR01) */
  898   898                      ; line   410 : #define _F423_TAU_TDR01_VALUE                   (0xF423U)
  899   899                      ; line   411 : /* Clock divisor for TAU0 channel 1 */
  900   900                      ; line   412 : #define TAU0_CHANNEL1_DIVISOR                   (64U)     /* fCL
  901   901                      ;              K/2^6 */
  902   902                      ; line   413 : /* 16-bit timer data register 02 (TDR02) */
  903   903                      ; line   414 : #define _0138_TAU_TDR02_VALUE                   (0x0138U)
  904   904                      ; line   415 : /* Clock divisor for TAU0 channel 2 */
  905   905                      ; line   416 : #define TAU0_CHANNEL2_DIVISOR                   (8U)      /* fCL
  906   906                      ;              K/2^3 */
  907   907                      ; line   417 : /* 16-bit timer data register 03 (TDR03) */
  908   908                      ; line   418 : #define _09C3_TAU_TDR03_VALUE                   (0x09C3U)
  909   909                      ; line   419 : /* Clock divisor for TAU0 channel 3 */
  910   910                      ; line   420 : #define TAU0_CHANNEL3_DIVISOR                   (8U)      /* fCL
  911   911                      ;              K/2^3 */
  912   912                      ; line   421 : 
  913   913                      ; line   422 : /***************************************************************
  914   914                      ;              ********************************************************
  915   915                      ; line   423 : Typedef definitions
  916   916                      ; line   424 : ****************************************************************
  917   917                      ;              *******************************************************/
  918   918                      ; line   425 : 
  919   919                      ; line   426 : /***************************************************************
  920   920                      ;              ********************************************************
  921   921                      ; line   427 : Global functions
  922   922                      ; line   428 : ****************************************************************
  923   923                      ;              *******************************************************/
  924   924                      ; line   429 : void R_TAU0_Create(void);
  925   925                      ; line   430 : void R_TAU0_Channel0_Start(void);
  926   926                      ; line   431 : void R_TAU0_Channel0_Stop(void);
  927   927                      ; line   432 : void R_TAU0_Channel1_Start(void);
  928   928                      ; line   433 : void R_TAU0_Channel1_Stop(void);
  929   929                      ; line   434 : void R_TAU0_Channel2_Start(void);
  930   930                      ; line   435 : void R_TAU0_Channel2_Stop(void);
  931   931                      ; line   436 : void R_TAU0_Channel3_Start(void);
  932   932                      ; line   437 : void R_TAU0_Channel3_Stop(void);
  933   933                      ; line   438 : 
  934   934                      ; line   439 : /* Start user code for function. Do not edit comment generated h
  935   935                      ;              ere */
  936   936                      ; line   440 : void R_TAU_MsDelay(const uint16_t millisec);
  937   937                      ; line     1 : /***************************************************************
  938   938                      ;              ********************************************************
  939   939                      ; line     2 : * DISCLAIMER
  940   940                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  941   941                      ;              nd is only 
  942   942                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  943   943                      ;              orized. This 
  944   944                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  945   945                      ;              otected under 
  946   946                      ; line     6 : * all applicable laws, including copyright laws.
  947   947                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  948   948                      ;              IES REGARDING 
  949   949                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  950   950                      ;              G BUT NOT 
  951   951                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  952   952                      ;              ULAR PURPOSE 
  953   953                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  954   954                      ;              AIMED.
  955   955                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  956   956                      ;               RENESAS 
  957   957                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  958   958                      ;              ALL BE LIABLE 
  959   959                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  960   960                      ;               DAMAGES FOR 
  961   961                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  962   962                      ;              FILIATES HAVE 
  963   963                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  964   964                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  965   965                      ;               this software 
  966   966                      ; line    17 : * and to discontinue the availability of this software.  By usin
  967   967                      ;              g this software, 
  968   968                      ; line    18 : * you agree to the additional terms and conditions found by acce
  969   969                      ;              ssing the 
  970   970                      ; line    19 : * following link:
  971   971                      ; line    20 : * http://www.renesas.com/disclaimer
  972   972                      ; line    21 : *
  973   973                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  974   974                      ;               reserved.
  975   975                      ; line    23 : ****************************************************************
  976   976                      ;              *******************************************************/
  977   977                      ; line    24 : 
  978   978                      ; line    25 : /***************************************************************
  979   979                      ;              ********************************************************
  980   980                      ; line    26 : * File Name    : r_cg_lcd.c
  981   981                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  982   982                      ;              ]
  983   983                      ; line    28 : * Device(s)    : R5F10WMG
  984   984                      ; line    29 : * Tool-Chain   : CA78K0R
  985   985                      ; line    30 : * Description  : This file implements device driver for LCD modu
  986   986                      ;              le.
  987   987                      ; line    31 : * Creation Date: 12/09/2013
  988   988                      ; line    32 : ****************************************************************
  989   989                      ;              *******************************************************/
  990   990                      ; line    33 : 
  991   991                      ; line    34 : /***************************************************************
  992   992                      ;              ********************************************************
  993   993                      ; line    35 : Pragma directive
  994   994                      ; line    36 : ****************************************************************
  995   995                      ;              *******************************************************/
  996   996                      ; line    37 : /* Start user code for pragma. Do not edit comment generated her
  997   997                      ;              e */
  998   998                      ; line    38 : /* End user code. Do not edit comment generated here */
  999   999                      ; line    39 : 
 1000  1000                      ; line    40 : /***************************************************************
 1001  1001                      ;              ********************************************************
 1002  1002                      ; line    41 : Includes
 1003  1003                      ; line    42 : ****************************************************************
 1004  1004                      ;              *******************************************************/
 1005  1005                      ; line    43 : #include "r_cg_macrodriver.h"
 1006  1006                      ; line    44 : #include "r_cg_lcd.h"
 1007  1007                      ; line    45 : /* Start user code for include. Do not edit comment generated he
 1008  1008                      ;              re */
 1009  1009                      ; line    46 : #include "r_cg_tau.h"
 1010  1010                      ; line    47 : /* End user code. Do not edit comment generated here */
 1011  1011                      ; line    48 : #include "r_cg_userdefine.h"
 1012  1012                      ; line    49 : 
 1013  1013                      ; line    50 : /***************************************************************
 1014  1014                      ;              ********************************************************
 1015  1015                      ; line    51 : Global variables and functions
 1016  1016                      ; line    52 : ****************************************************************
 1017  1017                      ;              *******************************************************/
 1018  1018                      ; line    53 : /* Start user code for global. Do not edit comment generated her
 1019  1019                      ;              e */
 1020  1020                      ; line    54 : 
 1021  1021                      ; line    55 : /* Some of the code in this file is generated using "Application
 1022  1022                      ;               Leading Tool (Applilet)" */
 1023  1023                      ; line    56 : /* Warnings exist in this module. */
 1024  1024                      ; line    57 : 
 1025  1025                      ; line    58 : /* End user code. Do not edit comment generated here */
 1026  1026                      ; line    59 : 
 1027  1027                      ; line    60 : /***************************************************************
 1028  1028                      ;              ********************************************************
 1029  1029                      ; line    61 : * Function Name: R_LCD_Create
 1030  1030                      ; line    62 : * Description  : This function initializes the LCD module.
 1031  1031                      ; line    63 : * Arguments    : None
 1032  1032                      ; line    64 : * Return Value : None
 1033  1033                      ; line    65 : ****************************************************************
 1034  1034                      ;              *******************************************************/
 1035  1035                      ; line    66 : void R_LCD_Create(void)
 1036  1036                      ; line    67 : {
 1037  1037                      
 1038  1038 -----                @@CODEL CSEG
 1039  1039 00000                _R_LCD_Create:
 1040  1040                      $DGL    1,19
 1041  1041 00000                ??bf_R_LCD_Create:
 1042  1042                      ; line    68 :     LCDON = 0U;    /* disable LCD clock operation */
 1043  1043                      $DGL    0,2
 1044  1044 00000  717B41                clr1    LCDM1.7                                         ;[INF] 3, 2
 1045  1045                      ; line    69 :     LCDMK0 = 1U;    /* disable INTLCD0 interrupt */
 1046  1046                      $DGL    0,3
 1047  1047 00003  715AD4                set1    MK2L.5                                          ;[INF] 3, 2
 1048  1048                      ; line    70 :     LCDIF0 = 0U;    /* clear INTLCD0 interrupt flag */
 1049  1049                      $DGL    0,4
 1050  1050 00006  715BD0                clr1    IF2L.5                                          ;[INF] 3, 2
 1051  1051                      ; line    71 :     LCDM0 = _00_LCD_DISPLAY_WAVEFORM_A | _0D_LCD_DISPLAY_MODE1;
 1052  1052                      $DGL    0,5
 1053  1053 00009  CE400D                mov     LCDM0,#0DH      ; 13                            ;[INF] 3, 1
 1054  1054                      ; line    72 :     LCDM0 |= _80_LCD_VOLTAGE_MODE_CAPACITOR;
 1055  1055                      $DGL    0,6
 1056  1056 0000C  8E40                  mov     a,LCDM0                                         ;[INF] 2, 1
 1057  1057 0000E  6C80                  or      a,#080H ; 128                                   ;[INF] 2, 1
 1058  1058 00010  9E40                  mov     LCDM0,a                                         ;[INF] 2, 1
 1059  1059                      ; line    73 :     /* Set CAPL and CAPH pins */
 1060  1060                      ; line    74 :     ISCLCD &= (uint8_t)~_01_LCD_CAPLH_BUFFER_VALID;
 1061  1061                      $DGL    0,8
 1062  1062 00012  8F0803                mov     a,!ISCLCD                                       ;[INF] 3, 1
 1063  1063 00015  5CFE                  and     a,#0FEH ; 254                                   ;[INF] 2, 1
 1064  1064 00017  9F0803                mov     !ISCLCD,a                                       ;[INF] 3, 1
 1065  1065                      ; line    75 :     PU12 &= 0x3FU;
 1066  1066                      $DGL    0,9
 1067  1067 0001A  8F3C00                mov     a,!PU12                                         ;[INF] 3, 1
 1068  1068 0001D  5C3F                  and     a,#03FH ; 63                                    ;[INF] 2, 1
 1069  1069 0001F  9F3C00                mov     !PU12,a                                         ;[INF] 3, 1
 1070  1070                      ; line    76 :     P12 &= 0x3FU;
 1071  1071                      $DGL    0,10
 1072  1072 00022  5A0C3F                and     P12,#03FH       ; 63                            ;[INF] 3, 2
 1073  1073                      ; line    77 :     PM12 |= 0xC0U;
 1074  1074                      $DGL    0,11
 1075  1075 00025  8E2C                  mov     a,PM12                                          ;[INF] 2, 1
 1076  1076 00027  6CC0                  or      a,#0C0H ; 192                                   ;[INF] 2, 1
 1077  1077 00029  9E2C                  mov     PM12,a                                          ;[INF] 2, 1
 1078  1078                      ; line    78 :     /* Set segment pins */
 1079  1079                      ; line    79 :     PU1 &= 0xE0U;
 1080  1080                      $DGL    0,13
 1081  1081 0002B  8F3100                mov     a,!PU1                                          ;[INF] 3, 1
 1082  1082 0002E  5CE0                  and     a,#0E0H ; 224                                   ;[INF] 2, 1
 1083  1083 00030  9F3100                mov     !PU1,a                                          ;[INF] 3, 1
 1084  1084                      ; line    80 :     PU2 &= 0x03U;
 1085  1085                      $DGL    0,14
 1086  1086 00033  8F3200                mov     a,!PU2                                          ;[INF] 3, 1
 1087  1087 00036  5C03                  and     a,#03H  ; 3                                     ;[INF] 2, 1
 1088  1088 00038  9F3200                mov     !PU2,a                                          ;[INF] 3, 1
 1089  1089                      ; line    81 :     PU3 &= 0xC0U;
 1090  1090                      $DGL    0,15
 1091  1091 0003B  8F3300                mov     a,!PU3                                          ;[INF] 3, 1
 1092  1092 0003E  5CC0                  and     a,#0C0H ; 192                                   ;[INF] 2, 1
 1093  1093 00040  9F3300                mov     !PU3,a                                          ;[INF] 3, 1
 1094  1094                      ; line    82 :     PU4 &= 0x3FU;
 1095  1095                      $DGL    0,16
 1096  1096 00043  8F3400                mov     a,!PU4                                          ;[INF] 3, 1
 1097  1097 00046  5C3F                  and     a,#03FH ; 63                                    ;[INF] 2, 1
 1098  1098 00048  9F3400                mov     !PU4,a                                          ;[INF] 3, 1
 1099  1099                      ; line    83 :     PU5 &= 0x00U;
 1100  1100                      $DGL    0,17
 1101  1101 0004B  8F3500                mov     a,!PU5                                          ;[INF] 3, 1
 1102  1102 0004E  5C00                  and     a,#00H  ; 0                                     ;[INF] 2, 1
 1103  1103 00050  9F3500                mov     !PU5,a                                          ;[INF] 3, 1
 1104  1104                      ; line    84 :     PU7 &= 0x00U;
 1105  1105                      $DGL    0,18
 1106  1106 00053  8F3700                mov     a,!PU7                                          ;[INF] 3, 1
 1107  1107 00056  5C00                  and     a,#00H  ; 0                                     ;[INF] 2, 1
 1108  1108 00058  9F3700                mov     !PU7,a                                          ;[INF] 3, 1
 1109  1109                      ; line    85 :     PU13 &= 0xFEU;
 1110  1110                      $DGL    0,19
 1111  1111 0005B  8F3D00                mov     a,!PU13                                         ;[INF] 3, 1
 1112  1112 0005E  5CFE                  and     a,#0FEH ; 254                                   ;[INF] 2, 1
 1113  1113 00060  9F3D00                mov     !PU13,a                                         ;[INF] 3, 1
 1114  1114                      ; line    86 :     POM3 &= 0xDFU;
 1115  1115                      $DGL    0,20
 1116  1116 00063  8F5300                mov     a,!POM3                                         ;[INF] 3, 1
 1117  1117 00066  5CDF                  and     a,#0DFH ; 223                                   ;[INF] 2, 1
 1118  1118 00068  9F5300                mov     !POM3,a                                         ;[INF] 3, 1
 1119  1119                      ; line    87 :     POM4 &= 0x3FU;
 1120  1120                      $DGL    0,21
 1121  1121 0006B  8F5400                mov     a,!POM4                                         ;[INF] 3, 1
 1122  1122 0006E  5C3F                  and     a,#03FH ; 63                                    ;[INF] 2, 1
 1123  1123 00070  9F5400                mov     !POM4,a                                         ;[INF] 3, 1
 1124  1124                      ; line    88 :     POM5 &= 0x87U;
 1125  1125                      $DGL    0,22
 1126  1126 00073  8F5500                mov     a,!POM5                                         ;[INF] 3, 1
 1127  1127 00076  5C87                  and     a,#087H ; 135                                   ;[INF] 2, 1
 1128  1128 00078  9F5500                mov     !POM5,a                                         ;[INF] 3, 1
 1129  1129                      ; line    89 :     POM13 &= 0xFEU;
 1130  1130                      $DGL    0,23
 1131  1131 0007B  8F5D00                mov     a,!POM13                                        ;[INF] 3, 1
 1132  1132 0007E  5CFE                  and     a,#0FEH ; 254                                   ;[INF] 2, 1
 1133  1133 00080  9F5D00                mov     !POM13,a                                        ;[INF] 3, 1
 1134  1134                      ; line    90 :     PIM3 &= 0xEFU;
 1135  1135                      $DGL    0,24
 1136  1136 00083  8F4300                mov     a,!PIM3                                         ;[INF] 3, 1
 1137  1137 00086  5CEF                  and     a,#0EFH ; 239                                   ;[INF] 2, 1
 1138  1138 00088  9F4300                mov     !PIM3,a                                         ;[INF] 3, 1
 1139  1139                      ; line    91 :     PIM4 &= 0x3FU;
 1140  1140                      $DGL    0,25
 1141  1141 0008B  8F4400                mov     a,!PIM4                                         ;[INF] 3, 1
 1142  1142 0008E  5C3F                  and     a,#03FH ; 63                                    ;[INF] 2, 1
 1143  1143 00090  9F4400                mov     !PIM4,a                                         ;[INF] 3, 1
 1144  1144                      ; line    92 :     PIM5 &= 0xD7U;
 1145  1145                      $DGL    0,26
 1146  1146 00093  8F4500                mov     a,!PIM5                                         ;[INF] 3, 1
 1147  1147 00096  5CD7                  and     a,#0D7H ; 215                                   ;[INF] 2, 1
 1148  1148 00098  9F4500                mov     !PIM5,a                                         ;[INF] 3, 1
 1149  1149                      ; line    93 :     PFSEG0 |= 0xF0U;
 1150  1150                      $DGL    0,27
 1151  1151 0009B  8F0003                mov     a,!PFSEG0                                       ;[INF] 3, 1
 1152  1152 0009E  6CF0                  or      a,#0F0H ; 240                                   ;[INF] 2, 1
 1153  1153 000A0  9F0003                mov     !PFSEG0,a                                       ;[INF] 3, 1
 1154  1154                      ; line    94 :     PFSEG1 |= 0xFFU;
 1155  1155                      $DGL    0,28
 1156  1156 000A3  8F0103                mov     a,!PFSEG1                                       ;[INF] 3, 1
 1157  1157 000A6  6CFF                  or      a,#0FFH ; 255                                   ;[INF] 2, 1
 1158  1158 000A8  9F0103                mov     !PFSEG1,a                                       ;[INF] 3, 1
 1159  1159                      ; line    95 :     PFSEG2 |= 0xFFU;
 1160  1160                      $DGL    0,29
 1161  1161 000AB  8F0203                mov     a,!PFSEG2                                       ;[INF] 3, 1
 1162  1162 000AE  6CFF                  or      a,#0FFH ; 255                                   ;[INF] 2, 1
 1163  1163 000B0  9F0203                mov     !PFSEG2,a                                       ;[INF] 3, 1
 1164  1164                      ; line    96 :     PFSEG3 |= 0xFBU;
 1165  1165                      $DGL    0,30
 1166  1166 000B3  8F0303                mov     a,!PFSEG3                                       ;[INF] 3, 1
 1167  1167 000B6  6CFB                  or      a,#0FBH ; 251                                   ;[INF] 2, 1
 1168  1168 000B8  9F0303                mov     !PFSEG3,a                                       ;[INF] 3, 1
 1169  1169                      ; line    97 :     PFSEG4 |= 0xFFU;
 1170  1170                      $DGL    0,31
 1171  1171 000BB  8F0403                mov     a,!PFSEG4                                       ;[INF] 3, 1
 1172  1172 000BE  6CFF                  or      a,#0FFH ; 255                                   ;[INF] 2, 1
 1173  1173 000C0  9F0403                mov     !PFSEG4,a                                       ;[INF] 3, 1
 1174  1174                      ; line    98 :     PFSEG5 |= 0x01U;
 1175  1175                      $DGL    0,32
 1176  1176 000C3  8F0503                mov     a,!PFSEG5                                       ;[INF] 3, 1
 1177  1177 000C6  6C01                  or      a,#01H  ; 1                                     ;[INF] 2, 1
 1178  1178 000C8  9F0503                mov     !PFSEG5,a                                       ;[INF] 3, 1
 1179  1179                      ; line    99 :     PMC1 &= 0xF0U;
 1180  1180                      $DGL    0,33
 1181  1181 000CB  8F6100                mov     a,!PMC1                                         ;[INF] 3, 1
 1182  1182 000CE  5CF0                  and     a,#0F0H ; 240                                   ;[INF] 2, 1
 1183  1183 000D0  9F6100                mov     !PMC1,a                                         ;[INF] 3, 1
 1184  1184                      ; line   100 :     P1 &= 0xE0U;
 1185  1185                      $DGL    0,34
 1186  1186 000D3  5A01E0                and     P1,#0E0H        ; 224                           ;[INF] 3, 2
 1187  1187                      ; line   101 :     PM1 &= 0xE0U;
 1188  1188                      $DGL    0,35
 1189  1189 000D6  8E21                  mov     a,PM1                                           ;[INF] 2, 1
 1190  1190 000D8  5CE0                  and     a,#0E0H ; 224                                   ;[INF] 2, 1
 1191  1191 000DA  9E21                  mov     PM1,a                                           ;[INF] 2, 1
 1192  1192                      ; line   102 :     PMC2 &= 0x03U;
 1193  1193                      $DGL    0,36
 1194  1194 000DC  8F6200                mov     a,!PMC2                                         ;[INF] 3, 1
 1195  1195 000DF  5C03                  and     a,#03H  ; 3                                     ;[INF] 2, 1
 1196  1196 000E1  9F6200                mov     !PMC2,a                                         ;[INF] 3, 1
 1197  1197                      ; line   103 :     P2 &= 0x03U;
 1198  1198                      $DGL    0,37
 1199  1199 000E4  5A0203                and     P2,#03H ; 3                                     ;[INF] 3, 2
 1200  1200                      ; line   104 :     PM2 &= 0x03U;
 1201  1201                      $DGL    0,38
 1202  1202 000E7  8E22                  mov     a,PM2                                           ;[INF] 2, 1
 1203  1203 000E9  5C03                  and     a,#03H  ; 3                                     ;[INF] 2, 1
 1204  1204 000EB  9E22                  mov     PM2,a                                           ;[INF] 2, 1
 1205  1205                      ; line   105 :     P3 &= 0xC0U;
 1206  1206                      $DGL    0,39
 1207  1207 000ED  5A03C0                and     P3,#0C0H        ; 192                           ;[INF] 3, 2
 1208  1208                      ; line   106 :     PM3 &= 0xC0U;
 1209  1209                      $DGL    0,40
 1210  1210 000F0  8E23                  mov     a,PM3                                           ;[INF] 2, 1
 1211  1211 000F2  5CC0                  and     a,#0C0H ; 192                                   ;[INF] 2, 1
 1212  1212 000F4  9E23                  mov     PM3,a                                           ;[INF] 2, 1
 1213  1213                      ; line   107 :     P4 &= 0x3FU;
 1214  1214                      $DGL    0,41
 1215  1215 000F6  5A043F                and     P4,#03FH        ; 63                            ;[INF] 3, 2
 1216  1216                      ; line   108 :     PM4 &= 0x3FU;
 1217  1217                      $DGL    0,42
 1218  1218 000F9  8E24                  mov     a,PM4                                           ;[INF] 2, 1
 1219  1219 000FB  5C3F                  and     a,#03FH ; 63                                    ;[INF] 2, 1
 1220  1220 000FD  9E24                  mov     PM4,a                                           ;[INF] 2, 1
 1221  1221                      ; line   109 :     P5 &= 0x00U;
 1222  1222                      $DGL    0,43
 1223  1223 000FF  5A0500                and     P5,#00H ; 0                                     ;[INF] 3, 2
 1224  1224                      ; line   110 :     PM5 &= 0x00U;
 1225  1225                      $DGL    0,44
 1226  1226 00102  8E25                  mov     a,PM5                                           ;[INF] 2, 1
 1227  1227 00104  5C00                  and     a,#00H  ; 0                                     ;[INF] 2, 1
 1228  1228 00106  9E25                  mov     PM5,a                                           ;[INF] 2, 1
 1229  1229                      ; line   111 :     P7 &= 0x00U;
 1230  1230                      $DGL    0,45
 1231  1231 00108  5A0700                and     P7,#00H ; 0                                     ;[INF] 3, 2
 1232  1232                      ; line   112 :     PM7 &= 0x00U;
 1233  1233                      $DGL    0,46
 1234  1234 0010B  8E27                  mov     a,PM7                                           ;[INF] 2, 1
 1235  1235 0010D  5C00                  and     a,#00H  ; 0                                     ;[INF] 2, 1
 1236  1236 0010F  9E27                  mov     PM7,a                                           ;[INF] 2, 1
 1237  1237                      ; line   113 :     P13 &= 0xFEU;
 1238  1238                      $DGL    0,47
 1239  1239 00111  5A0DFE                and     P13,#0FEH       ; 254                           ;[INF] 3, 2
 1240  1240                      ; line   114 :     PM13 &= 0xFEU;
 1241  1241                      $DGL    0,48
 1242  1242 00114  8E2D                  mov     a,PM13                                          ;[INF] 2, 1
 1243  1243 00116  5CFE                  and     a,#0FEH ; 254                                   ;[INF] 2, 1
 1244  1244 00118  9E2D                  mov     PM13,a                                          ;[INF] 2, 1
 1245  1245                      ; line   115 :     LCDM1 |= _00_LCD_DISPLAY_PATTERN_A;
 1246  1246                      $DGL    0,49
 1247  1247 0011A  8E41                  mov     a,LCDM1                                         ;[INF] 2, 1
 1248  1248 0011C  9E41                  mov     LCDM1,a                                         ;[INF] 2, 1
 1249  1249                      ; line   116 :     LCDC0 = _1A_LCD_CLOCK_FMAIN_17;
 1250  1250                      $DGL    0,50
 1251  1251 0011E  CE421A                mov     LCDC0,#01AH     ; 26                            ;[INF] 3, 1
 1252  1252                      ; line   117 : }
 1253  1253                      $DGL    0,51
 1254  1254 00121                ??ef_R_LCD_Create:
 1255  1255 00121  D7                    ret                                                     ;[INF] 1, 6
 1256  1256 00122                ??ee_R_LCD_Create:
 1257  1257                      ; line   118 : /***************************************************************
 1258  1258                      ;              ********************************************************
 1259  1259                      ; line   119 : * Function Name: R_LCD_Start
 1260  1260                      ; line   120 : * Description  : This function enables the LCD display.
 1261  1261                      ; line   121 : * Arguments    : None
 1262  1262                      ; line   122 : * Return Value : None
 1263  1263                      ; line   123 : ****************************************************************
 1264  1264                      ;              *******************************************************/
 1265  1265                      ; line   124 : void R_LCD_Start(void)
 1266  1266                      ; line   125 : {
 1267  1267 00122                _R_LCD_Start:
 1268  1268                      $DGL    1,25
 1269  1269 00122                ??bf_R_LCD_Start:
 1270  1270                      ; line   126 :     LCDON = 1U;
 1271  1271                      $DGL    0,2
 1272  1272 00122  717A41                set1    LCDM1.7                                         ;[INF] 3, 2
 1273  1273                      ; line   127 : }
 1274  1274                      $DGL    0,3
 1275  1275 00125                ??ef_R_LCD_Start:
 1276  1276 00125  D7                    ret                                                     ;[INF] 1, 6
 1277  1277 00126                ??ee_R_LCD_Start:
 1278  1278                      ; line   128 : /***************************************************************
 1279  1279                      ;              ********************************************************
 1280  1280                      ; line   129 : * Function Name: R_LCD_Stop
 1281  1281                      ; line   130 : * Description  : This function disables the LCD display.
 1282  1282                      ; line   131 : * Arguments    : None
 1283  1283                      ; line   132 : * Return Value : None
 1284  1284                      ; line   133 : ****************************************************************
 1285  1285                      ;              *******************************************************/
 1286  1286                      ; line   134 : void R_LCD_Stop(void)
 1287  1287                      ; line   135 : {
 1288  1288 00126                _R_LCD_Stop:
 1289  1289                      $DGL    1,31
 1290  1290 00126                ??bf_R_LCD_Stop:
 1291  1291                      ; line   136 :     LCDON = 0U;
 1292  1292                      $DGL    0,2
 1293  1293 00126  717B41                clr1    LCDM1.7                                         ;[INF] 3, 2
 1294  1294                      ; line   137 : }
 1295  1295                      $DGL    0,3
 1296  1296 00129                ??ef_R_LCD_Stop:
 1297  1297 00129  D7                    ret                                                     ;[INF] 1, 6
 1298  1298 0012A                ??ee_R_LCD_Stop:
 1299  1299                      ; line   138 : /***************************************************************
 1300  1300                      ;              ********************************************************
 1301  1301                      ; line   139 : * Function Name: R_LCD_Voltage_Off
 1302  1302                      ; line   140 : * Description  : This function disables voltage boost circuit or
 1303  1303                      ;               capacitor split circuit.
 1304  1304                      ; line   141 : * Arguments    : None
 1305  1305                      ; line   142 : * Return Value : None
 1306  1306                      ; line   143 : ****************************************************************
 1307  1307                      ;              *******************************************************/
 1308  1308                      ; line   144 : void R_LCD_Voltage_Off(void)
 1309  1309                      ; line   145 : {
 1310  1310 0012A                _R_LCD_Voltage_Off:
 1311  1311                      $DGL    1,37
 1312  1312 0012A                ??bf_R_LCD_Voltage_Off:
 1313  1313                      ; line   146 :     SCOC = 0U;
 1314  1314                      $DGL    0,2
 1315  1315 0012A  716B41                clr1    LCDM1.6                                         ;[INF] 3, 2
 1316  1316                      ; line   147 :     VLCON = 0U;
 1317  1317                      $DGL    0,3
 1318  1318 0012D  715B41                clr1    LCDM1.5                                         ;[INF] 3, 2
 1319  1319                      ; line   148 :     LCDM0 &= (uint8_t)~_C0_LCD_VOLTAGE_MODE_INITIALVALUE;
 1320  1320                      $DGL    0,4
 1321  1321 00130  8E40                  mov     a,LCDM0                                         ;[INF] 2, 1
 1322  1322 00132  5C3F                  and     a,#03FH ; 63                                    ;[INF] 2, 1
 1323  1323 00134  9E40                  mov     LCDM0,a                                         ;[INF] 2, 1
 1324  1324                      ; line   149 : }
 1325  1325                      $DGL    0,5
 1326  1326 00136                ??ef_R_LCD_Voltage_Off:
 1327  1327 00136  D7                    ret                                                     ;[INF] 1, 6
 1328  1328 00137                ??ee_R_LCD_Voltage_Off:
 1329  1329                      ; line   150 : 
 1330  1330                      ; line   151 : /* Start user code for adding. Do not edit comment generated her
 1331  1331                      ;              e */
 1332  1332                      ; line   152 : /***************************************************************
 1333  1333                      ;              ********************************************************
 1334  1334                      ; line   153 : * Function Name: R_LCD_Voltage_On
 1335  1335                      ; line   154 : * Description  : This function enables voltage boost circuit or 
 1336  1336                      ;              capacitor split circuit.
 1337  1337                      ; line   155 : * Arguments    : None
 1338  1338                      ; line   156 : * Return Value : None
 1339  1339                      ; line   157 : ****************************************************************
 1340  1340                      ;              *******************************************************/
 1341  1341                      ; line   158 : void R_LCD_Voltage_On (void)
 1342  1342                      ; line   159 : {
 1343  1343 00137                _R_LCD_Voltage_On:
 1344  1344                      $DGL    1,43
 1345  1345 00137                ??bf_R_LCD_Voltage_On:
 1346  1346                      ; line   160 :     VLCON = 1U;
 1347  1347                      $DGL    0,2
 1348  1348 00137  715A41                set1    LCDM1.5                                         ;[INF] 3, 2
 1349  1349                      ; line   161 : 
 1350  1350                      ; line   162 :     /* 100ms capacitor split wait time */
 1351  1351                      ; line   163 :     R_TAU_MsDelay(100);
 1352  1352                      $DGL    0,5
 1353  1353 0013A  306400                movw    ax,#064H        ; 100                           ;[INF] 3, 1
 1354  1354 0013D RFC000000              call    !!_R_TAU_MsDelay                                ;[INF] 4, 3
 1355  1355                      ; line   164 : 
 1356  1356                      ; line   165 :     SCOC = 1U;
 1357  1357                      $DGL    0,7
 1358  1358 00141  716A41                set1    LCDM1.6                                         ;[INF] 3, 2
 1359  1359                      ; line   166 : }
 1360  1360                      $DGL    0,8
 1361  1361 00144                ??ef_R_LCD_Voltage_On:
 1362  1362 00144  D7                    ret                                                     ;[INF] 1, 6
 1363  1363 00145                ??ee_R_LCD_Voltage_On:
 1364  1364                      
 1365  1365 -----                @@CODE  CSEG    BASE
 1366  1366                      
 1367  1367 -----                @@BASE  CSEG    BASE
 1368  1368                              END
 1369  1369                      
 1370  1370                      
 1371  1371                      ; *** Code Information ***
 1372  1372                      ;
 1373  1373                      ; $FILE C:\Users\nguye\Downloads\dtmf_reader_rl78\RSK_Module_test\RSKRL78L13\AD
 1374  1374                      ;       C_Repeat\cg_src\r_cg_lcd.c
 1375  1375                      ;
 1376  1376                      ; $FUNC R_LCD_Create(67)
 1377  1377                      ;       void=(void)
 1378  1378                      ;       CODE SIZE= 290 bytes, CLOCK_SIZE= 131 clocks, STACK_SIZE= 0 bytes
 1379  1379                      ;
 1380  1380                      ; $FUNC R_LCD_Start(125)
 1381  1381                      ;       void=(void)
 1382  1382                      ;       CODE SIZE= 4 bytes, CLOCK_SIZE= 8 clocks, STACK_SIZE= 0 bytes
 1383  1383                      ;
 1384  1384                      ; $FUNC R_LCD_Stop(135)
 1385  1385                      ;       void=(void)
 1386  1386                      ;       CODE SIZE= 4 bytes, CLOCK_SIZE= 8 clocks, STACK_SIZE= 0 bytes
 1387  1387                      ;
 1388  1388                      ; $FUNC R_LCD_Voltage_Off(145)
 1389  1389                      ;       void=(void)
 1390  1390                      ;       CODE SIZE= 13 bytes, CLOCK_SIZE= 13 clocks, STACK_SIZE= 0 bytes
 1391  1391                      ;
 1392  1392                      ; $FUNC R_LCD_Voltage_On(159)
 1393  1393                      ;       void=(void)
 1394  1394                      ;       CODE SIZE= 14 bytes, CLOCK_SIZE= 14 clocks, STACK_SIZE= 4 bytes
 1395  1395                      ;
 1396  1396                      ; $CALL R_TAU_MsDelay(163)
 1397  1397                      ;       void=(unsigned short:ax)
 1398  1398                      
 1399  1399                      ; Target chip : R5F10WMG
 1400  1400                      ; Device file : V1.00 

Segment informations:

ADRS  LEN      NAME

00000 00000H.0 @@BITS
00000 00000H   @@CNST
00000 00000H   @@R_INIT
00000 00000H   @@INIT
00000 00000H   @@DATA
00000 00000H   @@R_INIS
00000 00000H   @@INIS
00000 00000H   @@DATS
00000 00000H   @@CNSTL
00000 00000H   @@RLINIT
00000 00000H   @@INITL
00000 00000H   @@DATAL
00000 00000H   @@CALT
00000 00145H   @@CODEL
00000 00000H   @@CODE
00000 00000H   @@BASE

 Target chip : R5F10WMG
 Device file : V1.00
Assembly complete,     0 error(s) and     0 warning(s) found. (    0)
