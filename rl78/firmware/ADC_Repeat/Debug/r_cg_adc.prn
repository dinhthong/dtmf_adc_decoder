


78K0R Assembler V1.80                                                                                    Date: 5 Jun 2021 Page:   1



Command:  -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\Device\RL78\Devicefile Debug\r_cg_adc.asm -_msgoff -pDebu
          g -oDebug -zs
Para-file:
In-file:  Debug\r_cg_adc.asm
Obj-file: Debug\r_cg_adc.rel
Prn-file: Debug\r_cg_adc.prn

      Assemble list

 ALNO  STNO ADRS   OBJECT   M I  SOURCE STATEMENT

    1     1                      ; 78K0R C Compiler V2.60 Assembler Source        Date: 5 Jun 2021 Time:10:38:20
    2     2                      
    3     3                      ; Command   : -cf10wmg -yC:\Program Files (x86)\Renesas Electronics\CubeSuite+\
    4     4                      ;             Device\RL78\Devicefile ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_adc.c
    5     5                      ;              -oDebug -_msgoff -nq -i..\RSKRL78L13\ADC_Repeat\cg_src -v -w2 -z
    6     6                      ;             ps -mm -mi0 -saDebug -li -no -g2
    7     7                      ; In-file   : ..\RSKRL78L13\ADC_Repeat\cg_src\r_cg_adc.c
    8     8                      ; Asm-file  : Debug\r_cg_adc.asm
    9     9                      ; Para-file : 
   10    10                      
   11    11                      $PROCESSOR(F10WMG)
   12    12                      $DEBUG
   13    13                      $NODEBUGA
   14    14                      $KANJICODE SJIS
   15    15                      $TOL_INF        03FH, 0260H, 00H, 04000H, 00H, 00H, 00H
   16    16                      
   17    17                      $DGS    FIL_NAM, .file,         039H,   0FFFEH, 03FH,   067H,   01H,    00H
   18    18                      $DGS    AUX_FIL, r_cg_adc.c
   19    19                      $DGS    MOD_NAM, r_cg_adc,      00H,    0FFFEH, 00H,    077H,   00H,    00H
   20    20                      $DGS    SEC_NAM, @@BITS,        U,      U,      00H,    078H,   00H,    00H
   21    21                      $DGS    SEC_NAM, @@CNST,        U,      U,      00H,    078H,   00H,    00H
   22    22                      $DGS    SEC_NAM, @@R_INIT,      U,      U,      00H,    078H,   00H,    00H
   23    23                      $DGS    SEC_NAM, @@INIT,        U,      U,      00H,    078H,   00H,    00H
   24    24                      $DGS    SEC_NAM, @@DATA,        U,      U,      00H,    078H,   00H,    00H
   25    25                      $DGS    SEC_NAM, @@R_INIS,      U,      U,      00H,    078H,   00H,    00H
   26    26                      $DGS    SEC_NAM, @@INIS,        U,      U,      00H,    078H,   00H,    00H
   27    27                      $DGS    SEC_NAM, @@DATS,        U,      U,      00H,    078H,   00H,    00H
   28    28                      $DGS    SEC_NAM, @@CNSTL,       U,      U,      00H,    078H,   00H,    00H
   29    29                      $DGS    SEC_NAM, @@RLINIT,      U,      U,      00H,    078H,   00H,    00H
   30    30                      $DGS    SEC_NAM, @@INITL,       U,      U,      00H,    078H,   00H,    00H
   31    31                      $DGS    SEC_NAM, @@DATAL,       U,      U,      00H,    078H,   00H,    00H
   32    32                      $DGS    SEC_NAM, @@CALT,        U,      U,      00H,    078H,   00H,    00H
   33    33                      $DGS    SEC_NAM, @@CODE,        U,      U,      00H,    078H,   00H,    00H
   34    34                      $DGS    SEC_NAM, @@CODEL,       U,      U,      00H,    078H,   00H,    00H
   35    35                      $DGS    SEC_NAM, @@BASE,        U,      U,      00H,    078H,   00H,    00H
   36    36                      $DGS    GLV_SYM, _R_ADC_Create, U,      U,      01H,    026H,   01H,    02H
   37    37                      $DGS    AUX_FUN, 00H,           U,      U,      019H,   01H,    00H
   38    38                      $DGS    BEG_FUN, ??bf_R_ADC_Create,     U,      U,      00H,    065H,   01H,    00H
   39    39                      $DGS    AUX_BEG, 03EH,          00H,    019H
   40    40                      $DGS    END_FUN, ??ef_R_ADC_Create,     U,      U,      00H,    065H,   01H,    00H
   41    41                      $DGS    AUX_END, 012H
   42    42                      $DGS    GLV_SYM, _R_ADC_Start,  U,      U,      01H,    026H,   01H,    02H
   43    43                      $DGS    AUX_FUN, 00H,           U,      U,      01FH,   01H,    00H
   44    44                      $DGS    BEG_FUN, ??bf_R_ADC_Start,      U,      U,      00H,    065H,   01H,    00H
   45    45                      $DGS    AUX_BEG, 057H,          00H,    01FH
   46    46                      $DGS    END_FUN, ??ef_R_ADC_Start,      U,      U,      00H,    065H,   01H,    00H
   47    47                      $DGS    AUX_END, 05H
   48    48                      $DGS    GLV_SYM, _R_ADC_Stop,   U,      U,      01H,    026H,   01H,    02H
   49    49                      $DGS    AUX_FUN, 00H,           U,      U,      025H,   01H,    00H
   50    50                      $DGS    BEG_FUN, ??bf_R_ADC_Stop,       U,      U,      00H,    065H,   01H,    00H
   51    51                      $DGS    AUX_BEG, 063H,          00H,    025H
   52    52                      $DGS    END_FUN, ??ef_R_ADC_Stop,       U,      U,      00H,    065H,   01H,    00H
   53    53                      $DGS    AUX_END, 05H
   54    54                      $DGS    GLV_SYM, _R_ADC_Set_OperationOn,        U,      U,      01H,    026H,   01H,    02H
   55    55                      $DGS    AUX_FUN, 00H,           U,      U,      02BH,   01H,    00H
   56    56                      $DGS    BEG_FUN, ??bf_R_ADC_Set_OperationOn,    U,      U,      00H,    065H,   01H,    00H
   57    57                      $DGS    AUX_BEG, 06FH,          00H,    02BH
   58    58                      $DGS    END_FUN, ??ef_R_ADC_Set_OperationOn,    U,      U,      00H,    065H,   01H,    00H
   59    59                      $DGS    AUX_END, 03H
   60    60                      $DGS    GLV_SYM, _R_ADC_Set_OperationOff,       U,      U,      01H,    026H,   01H,    02H
   61    61                      $DGS    AUX_FUN, 00H,           U,      U,      031H,   01H,    00H
   62    62                      $DGS    BEG_FUN, ??bf_R_ADC_Set_OperationOff,   U,      U,      00H,    065H,   01H,    00H
   63    63                      $DGS    AUX_BEG, 079H,          00H,    031H
   64    64                      $DGS    END_FUN, ??ef_R_ADC_Set_OperationOff,   U,      U,      00H,    065H,   01H,    00H
   65    65                      $DGS    AUX_END, 03H
   66    66                      $DGS    GLV_SYM, _R_ADC_Get_Result,     U,      U,      01H,    026H,   01H,    02H
   67    67                      $DGS    AUX_FUN, 00H,           U,      U,      039H,   01H,    00H
   68    68                      $DGS    BEG_FUN, ??bf_R_ADC_Get_Result, U,      U,      00H,    065H,   01H,    00H
   69    69                      $DGS    AUX_BEG, 084H,          02H,    039H
   70    70                      $DGS    FUN_ARG, _buffer,       00H,    0FFFFH, 0500DH, 09H,    01H,    01H
   71    71                      $DGS    AUX_STR, 00H,           00H,    02H,    00H,    00H,    00H,    00H,    01H
   72    72                      $DGS    END_FUN, ??ef_R_ADC_Get_Result, U,      U,      00H,    065H,   01H,    00H
   73    73                      $DGS    AUX_END, 03H
   74    74                      
   75    75                              PUBLIC  _R_ADC_Create
   76    76                              PUBLIC  _R_ADC_Start
   77    77                              PUBLIC  _R_ADC_Stop
   78    78                              PUBLIC  _R_ADC_Set_OperationOn
   79    79                              PUBLIC  _R_ADC_Set_OperationOff
   80    80                              PUBLIC  _R_ADC_Get_Result
   81    81                      
   82    82 -----                @@BITS  BSEG
   83    83                      
   84    84 -----                @@CNST  CSEG    MIRRORP
   85    85                      
   86    86 -----                @@R_INIT        CSEG    UNIT64KP
   87    87                      
   88    88 -----                @@INIT  DSEG    BASEP
   89    89                      
   90    90 -----                @@DATA  DSEG    BASEP
   91    91                      
   92    92 -----                @@R_INIS        CSEG    UNIT64KP
   93    93                      
   94    94 -----                @@INIS  DSEG    SADDRP
   95    95                      
   96    96 -----                @@DATS  DSEG    SADDRP
   97    97                      
   98    98 -----                @@CNSTL CSEG    PAGE64KP
   99    99                      
  100   100 -----                @@RLINIT        CSEG    UNIT64KP
  101   101                      
  102   102 -----                @@INITL DSEG    UNIT64KP
  103   103                      
  104   104 -----                @@DATAL DSEG    UNIT64KP
  105   105                      
  106   106 -----                @@CALT  CSEG    CALLT0
  107   107                      
  108   108                      ; line     1 : /***************************************************************
  109   109                      ;              ********************************************************
  110   110                      ; line     2 : * DISCLAIMER
  111   111                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  112   112                      ;              nd is only 
  113   113                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  114   114                      ;              orized. This 
  115   115                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  116   116                      ;              otected under 
  117   117                      ; line     6 : * all applicable laws, including copyright laws.
  118   118                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  119   119                      ;              IES REGARDING 
  120   120                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  121   121                      ;              G BUT NOT 
  122   122                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  123   123                      ;              ULAR PURPOSE 
  124   124                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  125   125                      ;              AIMED.
  126   126                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  127   127                      ;               RENESAS 
  128   128                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  129   129                      ;              ALL BE LIABLE 
  130   130                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  131   131                      ;               DAMAGES FOR 
  132   132                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  133   133                      ;              FILIATES HAVE 
  134   134                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  135   135                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  136   136                      ;               this software 
  137   137                      ; line    17 : * and to discontinue the availability of this software.  By usin
  138   138                      ;              g this software, 
  139   139                      ; line    18 : * you agree to the additional terms and conditions found by acce
  140   140                      ;              ssing the 
  141   141                      ; line    19 : * following link:
  142   142                      ; line    20 : * http://www.renesas.com/disclaimer
  143   143                      ; line    21 : *
  144   144                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  145   145                      ;               reserved.
  146   146                      ; line    23 : ****************************************************************
  147   147                      ;              *******************************************************/
  148   148                      ; line    24 : 
  149   149                      ; line    25 : /***************************************************************
  150   150                      ;              ********************************************************
  151   151                      ; line    26 : * File Name    : r_cg_macrodriver.h
  152   152                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  153   153                      ;              ]
  154   154                      ; line    28 : * Device(s)    : R5F10WMG
  155   155                      ; line    29 : * Tool-Chain   : CA78K0R
  156   156                      ; line    30 : * Description  : This file implements general head file.
  157   157                      ; line    31 : * Creation Date: 05-Jun-21
  158   158                      ; line    32 : ****************************************************************
  159   159                      ;              *******************************************************/
  160   160                      ; line    33 : #ifndef MODULEID_H
  161   161                      ; line    34 : #define MODULEID_H
  162   162                      ; line    35 : /***************************************************************
  163   163                      ;              ********************************************************
  164   164                      ; line    36 : Includes
  165   165                      ; line    37 : ****************************************************************
  166   166                      ;              *******************************************************/
  167   167                      ; line    38 : #pragma sfr
  168   168                      ; line    39 : #pragma DI
  169   169                      ; line    40 : #pragma EI
  170   170                      ; line    41 : #pragma NOP
  171   171                      ; line    42 : #pragma HALT
  172   172                      ; line    43 : #pragma STOP
  173   173                      ; line    44 : 
  174   174                      ; line    45 : /***************************************************************
  175   175                      ;              ********************************************************
  176   176                      ; line    46 : Macro definitions (Register bit)
  177   177                      ; line    47 : ****************************************************************
  178   178                      ;              *******************************************************/
  179   179                      ; line    48 : 
  180   180                      ; line    49 : /***************************************************************
  181   181                      ;              ********************************************************
  182   182                      ; line    50 : Macro definitions
  183   183                      ; line    51 : ****************************************************************
  184   184                      ;              *******************************************************/
  185   185                      ; line    52 : #ifndef __TYPEDEF__
  186   186                      ; line    53 : /* Status list definition */
  187   187                      ; line    54 : #define MD_STATUSBASE        (0x00U)
  188   188                      ; line    55 : #define MD_OK                (MD_STATUSBASE + 0x00U) /* register
  189   189                      ;               setting OK */
  190   190                      ; line    56 : #define MD_SPT               (MD_STATUSBASE + 0x01U) /* IIC stop
  191   191                      ;               */
  192   192                      ; line    57 : #define MD_NACK              (MD_STATUSBASE + 0x02U) /* IIC no A
  193   193                      ;              CK */
  194   194                      ; line    58 : #define MD_BUSY1             (MD_STATUSBASE + 0x03U) /* busy 1 *
  195   195                      ;              /
  196   196                      ; line    59 : #define MD_BUSY2             (MD_STATUSBASE + 0x04U) /* busy 2 *
  197   197                      ;              /
  198   198                      ; line    60 : 
  199   199                      ; line    61 : /* Error list definition */
  200   200                      ; line    62 : #define MD_ERRORBASE         (0x80U)
  201   201                      ; line    63 : #define MD_ERROR             (MD_ERRORBASE + 0x00U)  /* error */
  202   202                      ; line    64 : #define MD_ARGERROR          (MD_ERRORBASE + 0x01U)  /* error ag
  203   203                      ;              rument input error */
  204   204                      ; line    65 : #define MD_ERROR1            (MD_ERRORBASE + 0x02U)  /* error 1 
  205   205                      ;              */
  206   206                      ; line    66 : #define MD_ERROR2            (MD_ERRORBASE + 0x03U)  /* error 2 
  207   207                      ;              */
  208   208                      ; line    67 : #define MD_ERROR3            (MD_ERRORBASE + 0x04U)  /* error 3 
  209   209                      ;              */
  210   210                      ; line    68 : #define MD_ERROR4            (MD_ERRORBASE + 0x05U)  /* error 4 
  211   211                      ;              */
  212   212                      ; line    69 : #define MD_ERROR5            (MD_ERRORBASE + 0x06U)  /* error 5 
  213   213                      ;              */
  214   214                      ; line    70 : #endif
  215   215                      ; line    71 : 
  216   216                      ; line    72 : /***************************************************************
  217   217                      ;              ********************************************************
  218   218                      ; line    73 : Typedef definitions
  219   219                      ; line    74 : ****************************************************************
  220   220                      ;              *******************************************************/
  221   221                      ; line    75 : #ifndef __TYPEDEF__
  222   222                      ; line    76 : typedef signed char         int8_t;
  223   223                      ; line    77 : typedef unsigned char       uint8_t;
  224   224                      ; line    78 : typedef signed short        int16_t;
  225   225                      ; line    79 : typedef unsigned short      uint16_t;
  226   226                      ; line    80 : typedef signed long         int32_t;
  227   227                      ; line    81 : typedef unsigned long       uint32_t;
  228   228                      ; line    82 : typedef unsigned short      MD_STATUS;
  229   229                      ; line     1 : /***************************************************************
  230   230                      ;              ********************************************************
  231   231                      ; line     2 : * DISCLAIMER
  232   232                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  233   233                      ;              nd is only 
  234   234                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  235   235                      ;              orized. This 
  236   236                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  237   237                      ;              otected under 
  238   238                      ; line     6 : * all applicable laws, including copyright laws.
  239   239                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  240   240                      ;              IES REGARDING 
  241   241                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  242   242                      ;              G BUT NOT 
  243   243                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  244   244                      ;              ULAR PURPOSE 
  245   245                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  246   246                      ;              AIMED.
  247   247                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  248   248                      ;               RENESAS 
  249   249                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  250   250                      ;              ALL BE LIABLE 
  251   251                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  252   252                      ;               DAMAGES FOR 
  253   253                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  254   254                      ;              FILIATES HAVE 
  255   255                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  256   256                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  257   257                      ;               this software 
  258   258                      ; line    17 : * and to discontinue the availability of this software.  By usin
  259   259                      ;              g this software, 
  260   260                      ; line    18 : * you agree to the additional terms and conditions found by acce
  261   261                      ;              ssing the 
  262   262                      ; line    19 : * following link:
  263   263                      ; line    20 : * http://www.renesas.com/disclaimer
  264   264                      ; line    21 : *
  265   265                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  266   266                      ;               reserved.
  267   267                      ; line    23 : ****************************************************************
  268   268                      ;              *******************************************************/
  269   269                      ; line    24 : 
  270   270                      ; line    25 : /***************************************************************
  271   271                      ;              ********************************************************
  272   272                      ; line    26 : * File Name    : r_cg_adc.h
  273   273                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  274   274                      ;              ]
  275   275                      ; line    28 : * Device(s)    : R5F10WMG
  276   276                      ; line    29 : * Tool-Chain   : CA78K0R
  277   277                      ; line    30 : * Description  : This file implements device driver for ADC modu
  278   278                      ;              le.
  279   279                      ; line    31 : * Creation Date: 05-Jun-21
  280   280                      ; line    32 : ****************************************************************
  281   281                      ;              *******************************************************/
  282   282                      ; line    33 : #ifndef ADC_H
  283   283                      ; line    34 : #define ADC_H
  284   284                      ; line    35 : 
  285   285                      ; line    36 : /***************************************************************
  286   286                      ;              ********************************************************
  287   287                      ; line    37 : Macro definitions (Register bit)
  288   288                      ; line    38 : ****************************************************************
  289   289                      ;              *******************************************************/
  290   290                      ; line    39 : /*
  291   291                      ; line    40 :     Peripheral enable register 0 (PER0)
  292   292                      ; line    41 : */
  293   293                      ; line    42 : /* Control of AD converter input clock (ADCEN) */
  294   294                      ; line    43 : #define _00_AD_CLOCK_STOP               (0x00U) /* stop supply o
  295   295                      ;              f input clock */
  296   296                      ; line    44 : #define _20_AD_CLOCK_SUPPLY             (0x20U) /* supply input 
  297   297                      ;              clock */
  298   298                      ; line    45 : 
  299   299                      ; line    46 : /*
  300   300                      ; line    47 :     AD converter mode register 0 (ADM0)
  301   301                      ; line    48 : */
  302   302                      ; line    49 : #define _00_AD_ADM0_INITIALVALUE        (0x00U)
  303   303                      ; line    50 : /* AD conversion operation control (ADCS) */
  304   304                      ; line    51 : #define _80_AD_CONVERSION_ENABLE        (0x80U) /* enable AD con
  305   305                      ;              version operation control */
  306   306                      ; line    52 : #define _00_AD_CONVERSION_DISABLE       (0x00U) /* disable AD co
  307   307                      ;              nversion operation control */
  308   308                      ; line    53 : /* AD conversion clock selection (FR2 - FR0) */
  309   309                      ; line    54 : #define _00_AD_CONVERSION_CLOCK_64      (0x00U) /* fCLK/64 */
  310   310                      ; line    55 : #define _08_AD_CONVERSION_CLOCK_32      (0x08U) /* fCLK/32 */
  311   311                      ; line    56 : #define _10_AD_CONVERSION_CLOCK_16      (0x10U) /* fCLK/16 */
  312   312                      ; line    57 : #define _18_AD_CONVERSION_CLOCK_8       (0x18U) /* fCLK/8 */
  313   313                      ; line    58 : #define _20_AD_CONVERSION_CLOCK_6       (0x20U) /* fCLK/6 */
  314   314                      ; line    59 : #define _28_AD_CONVERSION_CLOCK_5       (0x28U) /* fCLK/5 */
  315   315                      ; line    60 : #define _30_AD_CONVERSION_CLOCK_4       (0x30U) /* fCLK/4 */
  316   316                      ; line    61 : #define _38_AD_CONVERSION_CLOCK_2       (0x38U) /* fCLK/2 */
  317   317                      ; line    62 : /* Specification AD conversion time mode (LV1, LV0) */
  318   318                      ; line    63 : #define _00_AD_TIME_MODE_NORMAL_1       (0x00U) /* normal 1 mode
  319   319                      ;               */
  320   320                      ; line    64 : #define _02_AD_TIME_MODE_NORMAL_2       (0x02U) /* normal 2 mode
  321   321                      ;               */
  322   322                      ; line    65 : #define _04_AD_TIME_MODE_LOWVOLTAGE_1   (0x04U) /* low-voltage 1
  323   323                      ;               mode */
  324   324                      ; line    66 : #define _06_AD_TIME_MODE_LOWVOLTAGE_2   (0x06U) /* low-voltage 2
  325   325                      ;               mode */
  326   326                      ; line    67 : /* AD comparator operation control (ADCE) */
  327   327                      ; line    68 : #define _01_AD_COMPARATOR_ENABLE        (0x01U) /* enable compar
  328   328                      ;              ator operation control */
  329   329                      ; line    69 : #define _00_AD_COMPARATOR_DISABLE       (0x00U) /* disable compa
  330   330                      ;              rator operation control */
  331   331                      ; line    70 : 
  332   332                      ; line    71 : /*
  333   333                      ; line    72 :     Analog input channel specification register (ADS)
  334   334                      ; line    73 : */
  335   335                      ; line    74 : /* Specification of analog input channel (ADISS, ADS4 - ADS0) */
  336   336                      ; line    75 : /* Select mode */
  337   337                      ; line    76 : #define _00_AD_INPUT_CHANNEL_0          (0x00U) /* ANI0 */
  338   338                      ; line    77 : #define _01_AD_INPUT_CHANNEL_1          (0x01U) /* ANI1 */
  339   339                      ; line    78 : #define _10_AD_INPUT_CHANNEL_16         (0x10U) /* ANI16 */
  340   340                      ; line    79 : #define _11_AD_INPUT_CHANNEL_17         (0x11U) /* ANI17 */
  341   341                      ; line    80 : #define _12_AD_INPUT_CHANNEL_18         (0x12U) /* ANI18 */
  342   342                      ; line    81 : #define _13_AD_INPUT_CHANNEL_19         (0x13U) /* ANI19 */
  343   343                      ; line    82 : #define _14_AD_INPUT_CHANNEL_20         (0x14U) /* ANI20 */
  344   344                      ; line    83 : #define _15_AD_INPUT_CHANNEL_21         (0x15U) /* ANI21 */
  345   345                      ; line    84 : #define _16_AD_INPUT_CHANNEL_22         (0x16U) /* ANI22 */
  346   346                      ; line    85 : #define _17_AD_INPUT_CHANNEL_23         (0x17U) /* ANI23 */
  347   347                      ; line    86 : #define _18_AD_INPUT_CHANNEL_24         (0x18U) /* ANI24 */
  348   348                      ; line    87 : #define _19_AD_INPUT_CHANNEL_25         (0x19U) /* ANI25 */
  349   349                      ; line    88 : #define _80_AD_INPUT_TEMPERSENSOR       (0x80U) /* temperature s
  350   350                      ;              ensor output is used to be the input channel */
  351   351                      ; line    89 : #define _81_AD_INPUT_INTERREFVOLT       (0x81U) /* internal refe
  352   352                      ;              rence voltage output is used to be the input channel */
  353   353                      ; line    90 : 
  354   354                      ; line    91 : /*
  355   355                      ; line    92 :     AD converter mode register 1 (ADM1)
  356   356                      ; line    93 : */
  357   357                      ; line    94 : /* AD trigger mode selection (ADTMD1, ADTMD0) */
  358   358                      ; line    95 : #define _00_AD_TRIGGER_SOFTWARE         (0x00U) /* software trig
  359   359                      ;              ger mode */
  360   360                      ; line    96 : #define _80_AD_TRIGGER_HARDWARE_NOWAIT  (0x80U) /* hardware trig
  361   361                      ;              ger mode (no wait) */
  362   362                      ; line    97 : #define _C0_AD_TRIGGER_HARDWARE_WAIT    (0xC0U) /* hardware trig
  363   363                      ;              ger mode (wait) */
  364   364                      ; line    98 : /* AD convertion mode selection (ADSCM) */
  365   365                      ; line    99 : #define _00_AD_CONVMODE_CONSELECT       (0x00U) /* continuous co
  366   366                      ;              nvertion mode */
  367   367                      ; line   100 : #define _20_AD_CONVMODE_ONESELECT       (0x20U) /* oneshot conve
  368   368                      ;              rtion mode */
  369   369                      ; line   101 : /* Trigger signal selection (ADTRS1, ADTRS0) */
  370   370                      ; line   102 : #define _00_AD_TRIGGER_INTTM01          (0x00U) /* INTTM01 */
  371   371                      ; line   103 : #define _02_AD_TRIGGER_INTRTC           (0x02U) /* INTRTC */
  372   372                      ; line   104 : #define _03_AD_TRIGGER_INTIT            (0x03U) /* INTIT */
  373   373                      ; line   105 : 
  374   374                      ; line   106 : /*
  375   375                      ; line   107 :     AD converter mode register 2 (ADM2)
  376   376                      ; line   108 : */
  377   377                      ; line   109 : /* AD VREF(+) selection (ADREFP1, ADREFP0) */
  378   378                      ; line   110 : #define _00_AD_POSITIVE_VDD             (0x00U) /* use VDD as VR
  379   379                      ;              EF(+) */
  380   380                      ; line   111 : #define _40_AD_POSITIVE_AVREFP          (0x40U) /* use AVREFP as
  381   381                      ;               VREF(+) */
  382   382                      ; line   112 : #define _80_AD_POSITIVE_INTERVOLT       (0x80U) /* use internal 
  383   383                      ;              voltage as VREF(+) */
  384   384                      ; line   113 : /* AD VREF(-) selection (ADREFM) */
  385   385                      ; line   114 : #define _00_AD_NEGATIVE_VSS             (0x00U) /* use VSS as VR
  386   386                      ;              EF(-) */
  387   387                      ; line   115 : #define _20_AD_NEGATIVE_AVREFM          (0x20U) /* use AVREFM as
  388   388                      ;               VREF(-) */
  389   389                      ; line   116 : /* AD conversion result upper/lower bound value selection (ADRCK
  390   390                      ;              ) */
  391   391                      ; line   117 : #define _00_AD_AREA_MODE_1              (0x00U) /* generates INT
  392   392                      ;              AD when ADLL <= ADCRH <= ADUL */
  393   393                      ; line   118 : #define _08_AD_AREA_MODE_2_3            (0x08U) /* generates INT
  394   394                      ;              AD when ADUL < ADCRH or ADLL > ADCRH */
  395   395                      ; line   119 : /* AD wakeup function selection (AWC) */
  396   396                      ; line   120 : #define _00_AD_SNOOZE_OFF               (0x00U) /* stop SNOOZE f
  397   397                      ;              unction */
  398   398                      ; line   121 : #define _04_AD_SNOOZE_ON                (0x04U) /* use SNOOZE fu
  399   399                      ;              nction */
  400   400                      ; line   122 : /* AD resolution selection (ADTYP) */
  401   401                      ; line   123 : #define _00_AD_RESOLUTION_10BIT         (0x00U) /* 10 bits */
  402   402                      ; line   124 : #define _01_AD_RESOLUTION_8BIT          (0x01U) /* 8 bits */
  403   403                      ; line   125 : 
  404   404                      ; line   126 : /*
  405   405                      ; line   127 :     AD test function register (ADTES)
  406   406                      ; line   128 : */
  407   407                      ; line   129 : /* AD test mode signal (ADTES2 - ADTES0) */
  408   408                      ; line   130 : #define _00_AD_NORMAL_INPUT             (0x00U) /* normal mode *
  409   409                      ;              /
  410   410                      ; line   131 : #define _02_AD_TEST_AVREFM              (0x02U) /* use AVREFM as
  411   411                      ;               test signal */
  412   412                      ; line   132 : #define _03_AD_TEST_AVREFP              (0x03U) /* use AVREFP as
  413   413                      ;               test signal */
  414   414                      ; line   133 : 
  415   415                      ; line   134 : /*
  416   416                      ; line   135 :     AD port configuration register (ADPC)
  417   417                      ; line   136 : */
  418   418                      ; line   137 : /* Analog input/digital input switching (ADPC1, ADPC0) */
  419   419                      ; line   138 : #define _00_AD_ADPC_2ANALOG             (0x00U) /* ANI0 - ANI1 *
  420   420                      ;              /
  421   421                      ; line   139 : #define _01_AD_ADPC_0ANALOG             (0x01U) /* all digital *
  422   422                      ;              /
  423   423                      ; line   140 : #define _02_AD_ADPC_1ANALOG             (0x02U) /* ANI0 */
  424   424                      ; line   141 : 
  425   425                      ; line   142 : /***************************************************************
  426   426                      ;              ********************************************************
  427   427                      ; line   143 : Macro definitions
  428   428                      ; line   144 : ****************************************************************
  429   429                      ;              *******************************************************/
  430   430                      ; line   145 : /* Upper bound (ADUL) value */
  431   431                      ; line   146 : #define _FF_AD_ADUL_VALUE               (0xFFU)
  432   432                      ; line   147 : /* Lower bound (ADLL) value */
  433   433                      ; line   148 : #define _00_AD_ADLL_VALUE               (0x00U)
  434   434                      ; line   149 : 
  435   435                      ; line   150 : /***************************************************************
  436   436                      ;              ********************************************************
  437   437                      ; line   151 : Typedef definitions
  438   438                      ; line   152 : ****************************************************************
  439   439                      ;              *******************************************************/
  440   440                      ; line   153 : typedef enum
  441   441                      ; line   154 : {
  442   442                      ; line   155 :     ADCHANNEL0,
  443   443                      ; line   156 :     ADCHANNEL1,
  444   444                      ; line   157 :     ADCHANNEL16 = 16U,
  445   445                      ; line   158 :     ADCHANNEL17,
  446   446                      ; line   159 :     ADCHANNEL18,
  447   447                      ; line   160 :     ADCHANNEL19,
  448   448                      ; line   161 :     ADCHANNEL20,
  449   449                      ; line   162 :     ADCHANNEL21,
  450   450                      ; line   163 :     ADCHANNEL22,
  451   451                      ; line   164 :     ADCHANNEL23,
  452   452                      ; line   165 :     ADCHANNEL24,
  453   453                      ; line   166 :     ADCHANNEL25,
  454   454                      ; line   167 :     ADTEMPERSENSOR0 = 128U,
  455   455                      ; line   168 :     ADINTERREFVOLT
  456   456                      ; line   169 : } ad_channel_t;
  457   457                      ; line   170 : 
  458   458                      ; line   171 : typedef enum
  459   459                      ; line   172 : {
  460   460                      ; line   173 :     ADNORMALINPUT,
  461   461                      ; line   174 :     ADAVREFM = 2U,
  462   462                      ; line   175 :     ADAVREFP
  463   463                      ; line   176 : } test_channel_t;
  464   464                      ; line   177 : 
  465   465                      ; line   178 : /***************************************************************
  466   466                      ;              ********************************************************
  467   467                      ; line   179 : Global functions
  468   468                      ; line   180 : ****************************************************************
  469   469                      ;              *******************************************************/
  470   470                      ; line   181 : void R_ADC_Create(void);
  471   471                      ; line   182 : void R_ADC_Start(void);
  472   472                      ; line   183 : void R_ADC_Stop(void);
  473   473                      ; line   184 : void R_ADC_Set_OperationOn(void);
  474   474                      ; line   185 : void R_ADC_Set_OperationOff(void);
  475   475                      ; line   186 : void R_ADC_Get_Result(uint16_t * const buffer);
  476   476                      ; line   187 : 
  477   477                      ; line   188 : /* Start user code for function. Do not edit comment generated h
  478   478                      ;              ere */
  479   479                      ; line   189 : 
  480   480                      ; line   190 : /* Variable for storing the ADC value */
  481   481                      ; line   191 : extern volatile uint16_t g_adc_result;
  482   482                      ; line     1 : /***************************************************************
  483   483                      ;              ********************************************************
  484   484                      ; line     2 : * DISCLAIMER
  485   485                      ; line     3 : * This software is supplied by Renesas Electronics Corporation a
  486   486                      ;              nd is only 
  487   487                      ; line     4 : * intended for use with Renesas products. No other uses are auth
  488   488                      ;              orized. This 
  489   489                      ; line     5 : * software is owned by Renesas Electronics Corporation and is pr
  490   490                      ;              otected under 
  491   491                      ; line     6 : * all applicable laws, including copyright laws.
  492   492                      ; line     7 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANT
  493   493                      ;              IES REGARDING 
  494   494                      ; line     8 : * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDIN
  495   495                      ;              G BUT NOT 
  496   496                      ; line     9 : * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTIC
  497   497                      ;              ULAR PURPOSE 
  498   498                      ; line    10 : * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCL
  499   499                      ;              AIMED.
  500   500                      ; line    11 : * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER
  501   501                      ;               RENESAS 
  502   502                      ; line    12 : * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SH
  503   503                      ;              ALL BE LIABLE 
  504   504                      ; line    13 : * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  505   505                      ;               DAMAGES FOR 
  506   506                      ; line    14 : * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AF
  507   507                      ;              FILIATES HAVE 
  508   508                      ; line    15 : * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  509   509                      ; line    16 : * Renesas reserves the right, without notice, to make changes to
  510   510                      ;               this software 
  511   511                      ; line    17 : * and to discontinue the availability of this software.  By usin
  512   512                      ;              g this software, 
  513   513                      ; line    18 : * you agree to the additional terms and conditions found by acce
  514   514                      ;              ssing the 
  515   515                      ; line    19 : * following link:
  516   516                      ; line    20 : * http://www.renesas.com/disclaimer
  517   517                      ; line    21 : *
  518   518                      ; line    22 : * Copyright (C) 2013 Renesas Electronics Corporation. All rights
  519   519                      ;               reserved.
  520   520                      ; line    23 : ****************************************************************
  521   521                      ;              *******************************************************/
  522   522                      ; line    24 : 
  523   523                      ; line    25 : /***************************************************************
  524   524                      ;              ********************************************************
  525   525                      ; line    26 : * File Name    : r_cg_adc.c
  526   526                      ; line    27 : * Version      : Applilet4 for RL78/L13 V1.00.00.02 [10 May 2013
  527   527                      ;              ]
  528   528                      ; line    28 : * Device(s)    : R5F10WMG
  529   529                      ; line    29 : * Tool-Chain   : CA78K0R
  530   530                      ; line    30 : * Description  : This file implements device driver for ADC modu
  531   531                      ;              le.
  532   532                      ; line    31 : * Creation Date: 05-Jun-21
  533   533                      ; line    32 : ****************************************************************
  534   534                      ;              *******************************************************/
  535   535                      ; line    33 : 
  536   536                      ; line    34 : /***************************************************************
  537   537                      ;              ********************************************************
  538   538                      ; line    35 : Pragma directive
  539   539                      ; line    36 : ****************************************************************
  540   540                      ;              *******************************************************/
  541   541                      ; line    37 : /* Start user code for pragma. Do not edit comment generated her
  542   542                      ;              e */
  543   543                      ; line    38 : /* End user code. Do not edit comment generated here */
  544   544                      ; line    39 : 
  545   545                      ; line    40 : /***************************************************************
  546   546                      ;              ********************************************************
  547   547                      ; line    41 : Includes
  548   548                      ; line    42 : ****************************************************************
  549   549                      ;              *******************************************************/
  550   550                      ; line    43 : #include "r_cg_macrodriver.h"
  551   551                      ; line    44 : #include "r_cg_adc.h"
  552   552                      ; line    45 : /* Start user code for include. Do not edit comment generated he
  553   553                      ;              re */
  554   554                      ; line    46 : /* End user code. Do not edit comment generated here */
  555   555                      ; line    47 : #include "r_cg_userdefine.h"
  556   556                      ; line    48 : 
  557   557                      ; line    49 : /***************************************************************
  558   558                      ;              ********************************************************
  559   559                      ; line    50 : Global variables and functions
  560   560                      ; line    51 : ****************************************************************
  561   561                      ;              *******************************************************/
  562   562                      ; line    52 : /* Start user code for global. Do not edit comment generated her
  563   563                      ;              e */
  564   564                      ; line    53 : /* End user code. Do not edit comment generated here */
  565   565                      ; line    54 : 
  566   566                      ; line    55 : /***************************************************************
  567   567                      ;              ********************************************************
  568   568                      ; line    56 : * Function Name: R_ADC_Create
  569   569                      ; line    57 : * Description  : This function initializes the AD converter.
  570   570                      ; line    58 : * Arguments    : None
  571   571                      ; line    59 : * Return Value : None
  572   572                      ; line    60 : ****************************************************************
  573   573                      ;              *******************************************************/
  574   574                      ; line    61 : void R_ADC_Create(void)
  575   575                      ; line    62 : {
  576   576                      
  577   577 -----                @@CODEL CSEG
  578   578 00000                _R_ADC_Create:
  579   579                      $DGL    1,19
  580   580 00000                ??bf_R_ADC_Create:
  581   581                      ; line    63 :     ADCEN = 1U;  /* supply AD clock */
  582   582                      $DGL    0,2
  583   583 00000  7150F000              set1    !PER0.5                                         ;[INF] 4, 2
  584   584                      ; line    64 :     ADM0 = _00_AD_ADM0_INITIALVALUE;  /* disable AD conversion a
  585   585                      ;              nd clear ADM0 register */
  586   586                      $DGL    0,3
  587   587 00004  F530FF                clrb    !ADM0                                           ;[INF] 3, 1
  588   588                      ; line    65 :     ADMK = 1U;  /* disable INTAD interrupt */
  589   589                      $DGL    0,4
  590   590 00007  712AE7                set1    MK1H.2                                          ;[INF] 3, 2
  591   591                      ; line    66 :     ADIF = 0U;  /* clear INTAD interrupt flag */
  592   592                      $DGL    0,5
  593   593 0000A  712BE3                clr1    IF1H.2                                          ;[INF] 3, 2
  594   594                      ; line    67 :     /* Set INTAD low priority */
  595   595                      ; line    68 :     ADPR1 = 1U;
  596   596                      $DGL    0,7
  597   597 0000D  712AEF                set1    PR11H.2                                         ;[INF] 3, 2
  598   598                      ; line    69 :     ADPR0 = 1U;
  599   599                      $DGL    0,8
  600   600 00010  712AEB                set1    PR01H.2                                         ;[INF] 3, 2
  601   601                      ; line    70 :     /* Set ANI0 - ANI1 pin */
  602   602                      ; line    71 :     PM2 |= 0x03U;
  603   603                      $DGL    0,10
  604   604 00013  8E22                  mov     a,PM2                                           ;[INF] 2, 1
  605   605 00015  6C03                  or      a,#03H  ; 3                                     ;[INF] 2, 1
  606   606 00017  9E22                  mov     PM2,a                                           ;[INF] 2, 1
  607   607                      ; line    72 :     ADM0 = _08_AD_CONVERSION_CLOCK_32 | _00_AD_TIME_MODE_NORMAL_
  608   608                      ;              1;
  609   609                      $DGL    0,11
  610   610 00019  CE3008                mov     ADM0,#08H       ; 8                             ;[INF] 3, 1
  611   611                      ; line    73 :     ADM1 = _00_AD_TRIGGER_SOFTWARE | _00_AD_CONVMODE_CONSELECT;
  612   612                      $DGL    0,12
  613   613 0001C  F532FF                clrb    !ADM1                                           ;[INF] 3, 1
  614   614                      ; line    74 :     ADM2 = _00_AD_POSITIVE_VDD | _00_AD_NEGATIVE_VSS | _00_AD_AR
  615   615                      ;              EA_MODE_1 | _00_AD_RESOLUTION_10BIT;
  616   616                      $DGL    0,13
  617   617 0001F  F51000                clrb    !ADM2                                           ;[INF] 3, 1
  618   618                      ; line    75 :     ADUL = _FF_AD_ADUL_VALUE;
  619   619                      $DGL    0,14
  620   620 00022  CF1100FF              mov     !ADUL,#0FFH     ; 255                           ;[INF] 4, 1
  621   621                      ; line    76 :     ADLL = _00_AD_ADLL_VALUE;
  622   622                      $DGL    0,15
  623   623 00026  F51200                clrb    !ADLL                                           ;[INF] 3, 1
  624   624                      ; line    77 :     ADS = _00_AD_INPUT_CHANNEL_0;
  625   625                      $DGL    0,16
  626   626 00029  F531FF                clrb    !ADS                                            ;[INF] 3, 1
  627   627                      ; line    78 :     ADCE = 1U;  /* enable AD comparator */
  628   628                      $DGL    0,17
  629   629 0002C  710A30                set1    ADM0.0                                          ;[INF] 3, 2
  630   630                      ; line    79 : }
  631   631                      $DGL    0,18
  632   632 0002F                ??ef_R_ADC_Create:
  633   633 0002F  D7                    ret                                                     ;[INF] 1, 6
  634   634 00030                ??ee_R_ADC_Create:
  635   635                      ; line    80 : /***************************************************************
  636   636                      ;              ********************************************************
  637   637                      ; line    81 : * Function Name: R_ADC_Start
  638   638                      ; line    82 : * Description  : This function starts the AD converter.
  639   639                      ; line    83 : * Arguments    : None
  640   640                      ; line    84 : * Return Value : None
  641   641                      ; line    85 : ****************************************************************
  642   642                      ;              *******************************************************/
  643   643                      ; line    86 : void R_ADC_Start(void)
  644   644                      ; line    87 : {
  645   645 00030                _R_ADC_Start:
  646   646                      $DGL    1,25
  647   647 00030                ??bf_R_ADC_Start:
  648   648                      ; line    88 :     ADIF = 0U;  /* clear INTAD interrupt flag */
  649   649                      $DGL    0,2
  650   650 00030  712BE3                clr1    IF1H.2                                          ;[INF] 3, 2
  651   651                      ; line    89 :     ADMK = 0U;  /* enable INTAD interrupt */
  652   652                      $DGL    0,3
  653   653 00033  712BE7                clr1    MK1H.2                                          ;[INF] 3, 2
  654   654                      ; line    90 :     ADCS = 1U;  /* enable AD conversion */
  655   655                      $DGL    0,4
  656   656 00036  717A30                set1    ADM0.7                                          ;[INF] 3, 2
  657   657                      ; line    91 : }
  658   658                      $DGL    0,5
  659   659 00039                ??ef_R_ADC_Start:
  660   660 00039  D7                    ret                                                     ;[INF] 1, 6
  661   661 0003A                ??ee_R_ADC_Start:
  662   662                      ; line    92 : /***************************************************************
  663   663                      ;              ********************************************************
  664   664                      ; line    93 : * Function Name: R_ADC_Stop
  665   665                      ; line    94 : * Description  : This function stops the AD converter.
  666   666                      ; line    95 : * Arguments    : None
  667   667                      ; line    96 : * Return Value : None
  668   668                      ; line    97 : ****************************************************************
  669   669                      ;              *******************************************************/
  670   670                      ; line    98 : void R_ADC_Stop(void)
  671   671                      ; line    99 : {
  672   672 0003A                _R_ADC_Stop:
  673   673                      $DGL    1,31
  674   674 0003A                ??bf_R_ADC_Stop:
  675   675                      ; line   100 :     ADCS = 0U;  /* disable AD conversion */
  676   676                      $DGL    0,2
  677   677 0003A  717B30                clr1    ADM0.7                                          ;[INF] 3, 2
  678   678                      ; line   101 :     ADMK = 1U;  /* disable INTAD interrupt */
  679   679                      $DGL    0,3
  680   680 0003D  712AE7                set1    MK1H.2                                          ;[INF] 3, 2
  681   681                      ; line   102 :     ADIF = 0U;  /* clear INTAD interrupt flag */
  682   682                      $DGL    0,4
  683   683 00040  712BE3                clr1    IF1H.2                                          ;[INF] 3, 2
  684   684                      ; line   103 : }
  685   685                      $DGL    0,5
  686   686 00043                ??ef_R_ADC_Stop:
  687   687 00043  D7                    ret                                                     ;[INF] 1, 6
  688   688 00044                ??ee_R_ADC_Stop:
  689   689                      ; line   104 : /***************************************************************
  690   690                      ;              ********************************************************
  691   691                      ; line   105 : * Function Name: R_ADC_Set_OperationOn
  692   692                      ; line   106 : * Description  : This function enables comparator operation.
  693   693                      ; line   107 : * Arguments    : None
  694   694                      ; line   108 : * Return Value : None
  695   695                      ; line   109 : ****************************************************************
  696   696                      ;              *******************************************************/
  697   697                      ; line   110 : void R_ADC_Set_OperationOn(void)
  698   698                      ; line   111 : {
  699   699 00044                _R_ADC_Set_OperationOn:
  700   700                      $DGL    1,37
  701   701 00044                ??bf_R_ADC_Set_OperationOn:
  702   702                      ; line   112 :     ADCE = 1U;  /* enable AD comparator */
  703   703                      $DGL    0,2
  704   704 00044  710A30                set1    ADM0.0                                          ;[INF] 3, 2
  705   705                      ; line   113 : }
  706   706                      $DGL    0,3
  707   707 00047                ??ef_R_ADC_Set_OperationOn:
  708   708 00047  D7                    ret                                                     ;[INF] 1, 6
  709   709 00048                ??ee_R_ADC_Set_OperationOn:
  710   710                      ; line   114 : /***************************************************************
  711   711                      ;              ********************************************************
  712   712                      ; line   115 : * Function Name: R_ADC_Set_OperationOff
  713   713                      ; line   116 : * Description  : This function stops comparator operation.
  714   714                      ; line   117 : * Arguments    : None
  715   715                      ; line   118 : * Return Value : None
  716   716                      ; line   119 : ****************************************************************
  717   717                      ;              *******************************************************/
  718   718                      ; line   120 : void R_ADC_Set_OperationOff(void)
  719   719                      ; line   121 : {
  720   720 00048                _R_ADC_Set_OperationOff:
  721   721                      $DGL    1,43
  722   722 00048                ??bf_R_ADC_Set_OperationOff:
  723   723                      ; line   122 :     ADCE = 0U;  /* disable AD comparator */
  724   724                      $DGL    0,2
  725   725 00048  710B30                clr1    ADM0.0                                          ;[INF] 3, 2
  726   726                      ; line   123 : }
  727   727                      $DGL    0,3
  728   728 0004B                ??ef_R_ADC_Set_OperationOff:
  729   729 0004B  D7                    ret                                                     ;[INF] 1, 6
  730   730 0004C                ??ee_R_ADC_Set_OperationOff:
  731   731                      ; line   124 : /***************************************************************
  732   732                      ;              ********************************************************
  733   733                      ; line   125 : * Function Name: R_ADC_Get_Result
  734   734                      ; line   126 : * Description  : This function returns the conversion result in 
  735   735                      ;              the buffer.
  736   736                      ; line   127 : * Arguments    : buffer -
  737   737                      ; line   128 : *                    the address where to write the conversion r
  738   738                      ;              esult
  739   739                      ; line   129 : * Return Value : None
  740   740                      ; line   130 : ****************************************************************
  741   741                      ;              *******************************************************/
  742   742                      ; line   131 : void R_ADC_Get_Result(uint16_t * const buffer)
  743   743                      ; line   132 : {
  744   744 0004C                _R_ADC_Get_Result:
  745   745                      $DGL    1,49
  746   746 0004C  C7                    push    hl                                              ;[INF] 1, 1
  747   747 0004D  C1                    push    ax                                              ;[INF] 1, 1
  748   748 0004E  FBF8FF                movw    hl,sp                                           ;[INF] 3, 1
  749   749 00051                ??bf_R_ADC_Get_Result:
  750   750                      ; line   133 :     *buffer = (uint16_t)(ADCR >> 6U);
  751   751                      $DGL    0,2
  752   752 00051  AD1E                  movw    ax,ADCR                                         ;[INF] 2, 1
  753   753 00053  316E                  shrw    ax,6                                            ;[INF] 2, 1
  754   754 00055  12                    movw    bc,ax                                           ;[INF] 1, 1
  755   755 00056  AB                    movw    ax,[hl] ; buffer                                ;[INF] 1, 1
  756   756 00057  14                    movw    de,ax                                           ;[INF] 1, 1
  757   757 00058  13                    movw    ax,bc                                           ;[INF] 1, 1
  758   758 00059  B9                    movw    [de],ax                                         ;[INF] 1, 1
  759   759                      ; line   134 : }
  760   760                      $DGL    0,3
  761   761 0005A                ??ef_R_ADC_Get_Result:
  762   762 0005A  C0                    pop     ax                                              ;[INF] 1, 1
  763   763 0005B  C6                    pop     hl                                              ;[INF] 1, 1
  764   764 0005C  D7                    ret                                                     ;[INF] 1, 6
  765   765 0005D                ??ee_R_ADC_Get_Result:
  766   766                      
  767   767 -----                @@CODE  CSEG    BASE
  768   768                      
  769   769 -----                @@BASE  CSEG    BASE
  770   770                              END
  771   771                      
  772   772                      
  773   773                      ; *** Code Information ***
  774   774                      ;
  775   775                      ; $FILE C:\Users\nguye\Downloads\dtmf_reader_rl78\RSK_Module_test\RSKRL78L13\AD
  776   776                      ;       C_Repeat\cg_src\r_cg_adc.c
  777   777                      ;
  778   778                      ; $FUNC R_ADC_Create(62)
  779   779                      ;       void=(void)
  780   780                      ;       CODE SIZE= 48 bytes, CLOCK_SIZE= 28 clocks, STACK_SIZE= 0 bytes
  781   781                      ;
  782   782                      ; $FUNC R_ADC_Start(87)
  783   783                      ;       void=(void)
  784   784                      ;       CODE SIZE= 10 bytes, CLOCK_SIZE= 12 clocks, STACK_SIZE= 0 bytes
  785   785                      ;
  786   786                      ; $FUNC R_ADC_Stop(99)
  787   787                      ;       void=(void)
  788   788                      ;       CODE SIZE= 10 bytes, CLOCK_SIZE= 12 clocks, STACK_SIZE= 0 bytes
  789   789                      ;
  790   790                      ; $FUNC R_ADC_Set_OperationOn(111)
  791   791                      ;       void=(void)
  792   792                      ;       CODE SIZE= 4 bytes, CLOCK_SIZE= 8 clocks, STACK_SIZE= 0 bytes
  793   793                      ;
  794   794                      ; $FUNC R_ADC_Set_OperationOff(121)
  795   795                      ;       void=(void)
  796   796                      ;       CODE SIZE= 4 bytes, CLOCK_SIZE= 8 clocks, STACK_SIZE= 0 bytes
  797   797                      ;
  798   798                      ; $FUNC R_ADC_Get_Result(132)
  799   799                      ;       void=(pointer buffer:ax)
  800   800                      ;       CODE SIZE= 17 bytes, CLOCK_SIZE= 18 clocks, STACK_SIZE= 4 bytes
  801   801                      
  802   802                      ; Target chip : R5F10WMG
  803   803                      ; Device file : V1.00 

Segment informations:

ADRS  LEN      NAME

00000 00000H.0 @@BITS
00000 00000H   @@CNST
00000 00000H   @@R_INIT
00000 00000H   @@INIT
00000 00000H   @@DATA
00000 00000H   @@R_INIS
00000 00000H   @@INIS
00000 00000H   @@DATS
00000 00000H   @@CNSTL
00000 00000H   @@RLINIT
00000 00000H   @@INITL
00000 00000H   @@DATAL
00000 00000H   @@CALT
00000 0005DH   @@CODEL
00000 00000H   @@CODE
00000 00000H   @@BASE

 Target chip : R5F10WMG
 Device file : V1.00
Assembly complete,     0 error(s) and     0 warning(s) found. (    0)
